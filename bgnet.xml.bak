<?xml version='1.0' encoding="ISO-8859-1"?>

<!-- Copyright (C) 2008 Brian "Beej Jorgensen" Hall <beej@beej.us> -->

<!-- TODO ==========================================================
fix header tables in FO, fop 0.95 giving tons of warnings

will images embed as SVGs properly with fop 0.95?

IPv6 chapter for IPv6-specifics
	IP6 multicast instead of INADDR_BROADCAST
	advanced IPv6 socket stuff
	scope
	flow info
	etc.

convert select demo to poll demo???

index items
=============================================================== -->

<!DOCTYPE guide SYSTEM "bg.dtd" [

<!ENTITY copydates "2008">

<!ENTITY samplepre "http://beej.us/guide/bgnet/examples/">
<!ENTITY homepage "http://beej.us/guide/bgnet/">

<!ENTITY redir "http://beej.us/guide/url/">

<!ENTITY beejmail "beej@beej.us">

<!ENTITY cclicenseurl "http://creativecommons.org/licenses/by-nc-nd/3.0/">

<!ENTITY amazonref "http://www.amazon.com/exec/obidos/">
<!-- put an all-digits ISBN here: "ASIN/0123456789" -->
<!-- or home page reference: "redirect-home" -->
<!ENTITY amazonrefid "/beejsguides-20">

<!ENTITY rfcbase "http://www.rfc-editor.org/">
<!ENTITY rfcsearch "http://tools.ietf.org/rfc/">
<!ENTITY rfcpre "http://tools.ietf.org/html/rfc">
<!ENTITY rfcpost "">
<!--
<!ENTITY rfcpre "http://www.rfc-editor.org/rfc/rfc">
<!ENTITY rfcpost ".txt">
-->

<!ENTITY manpre "http://www.linuxmanpages.com/man">
<!-- "2/accept.2", for instance -->
<!ENTITY manpost ".php">

<!ENTITY winsockfaq "http://tangentsoft.net/wskfaq/">
<!ENTITY linuxurl "http://www.linux.com/">
<!ENTITY bsdurl "http://www.bsd.org/">
<!ENTITY openssl "http://www.openssl.org/">
<!ENTITY esrsmartqs "http://www.catb.org/~esr/faqs/smart-questions.html">
<!ENTITY socketsqd "http://www.frostbytes.com/~jimf/papers/sockets/sockets.html">
<!ENTITY socketfaq "http://www.developerweb.net/forum/forumdisplay.php?f=70">
<!ENTITY introtcp "http://pclt.cis.yale.edu/pclt/COMM/TCPIP.HTM">
<!ENTITY tcpfaq "http://www.faqs.org/faqs/internet/tcp-ip/tcp-ip-faq/part1/">
<!ENTITY tplurl "http://tpl.sourceforge.net/">
<!ENTITY practprog "http://cm.bell-labs.com/cm/cs/tpop/">
<!ENTITY wpcs "http://en.wikipedia.org/wiki/Client-server">
<!ENTITY wpsocket "http://en.wikipedia.org/wiki/Berkeley_sockets">
<!ENTITY wptcp "http://en.wikipedia.org/wiki/Transmission_Control_Protocol">
<!ENTITY wpudp "http://en.wikipedia.org/wiki/User_Datagram_Protocol">
<!ENTITY wpip "http://en.wikipedia.org/wiki/Internet_Protocol">
<!ENTITY wpserial "http://en.wikipedia.org/wiki/Serialization">
<!ENTITY wpirc "http://en.wikipedia.org/wiki/Internet_Relay_Chat">
<!ENTITY wp754 "http://en.wikipedia.org/wiki/IEEE_754">
<!ENTITY wpvint "http://en.wikipedia.org/wiki/Vinton_Cerf">
<!ENTITY wpdoom "http://en.wikipedia.org/wiki/Doom_&#x28;video_game&#x29;">
<!ENTITY wpeliza "http://en.wikipedia.org/wiki/ELIZA">
<!ENTITY wpwilford "http://en.wikipedia.org/wiki/Wilford_Brimley">
<!ENTITY ljsniff "http://interactive.linuxjournal.com/article/4659">
<!ENTITY portlist "http://www.iana.org/assignments/port-numbers">
<!ENTITY cygwinurl "http://www.cygwin.com/">
]>

<guide id="index">

<guideinfo>
	<title>Beej's Guide to Network Programming</title>
	<subtitle>Using Internet Sockets</subtitle>

	<author>
		<name>Brian "Beej Jorgensen" Hall</name>
		<email>&beejmail;</email>
	</author>

	<!--
	History:

	2.3.2:		socket man page
	2.3.3:		sockaddr_in man page
	2.3.4:		bind, listen man page
	2.3.5:		connect man page
	2.3.6:		listen, perror man page
	2.3.7:		errno man page
	2.3.8:		htonl etc man page
	2.3.9:		close man page, expanded man page leader
	2.3.10:		inet_ntoa, setsockopt man pages
	2.3.11:		getpeername man page
	2.3.12:		send/sendto man pages
	2.3.13:		shutdown man pages
	2.3.14:		gethostname man pages, fix inet_aton links
	2.3.15:		fcntl man page
	2.3.16:		recv/recvfrom man page
	2.3.17:		gethostbyname/gethostbyaddr man page
	2.3.18:		changed GET / to GET / HTTP/1.0
	2.3.19:		added select() man page
	2.3.20:		added poll() man page
	2.3.21:		section on NAT and reserved networks
	2.3.22:		typo fixes in sects "man" and "privnet"
	2.3.23:		added broadcast packets section
	2.3.24:		manpage prototype changed to code, subtitle moved out of title
	2.4.0:		big overhaul, serialization stuff
	2.4.1:		minor text changes in intro
	2.4.2:		changed all sizeofs to use variable names instead of types
	2.4.3:		fix myaddr->my_addr in listener.c, sockaddr_inman example
	2.4.4:		fix myaddr->my_addr in server.c
	2.4.5:		fix 14->18 in son of data encap
	3.0.0:		IPv6 overhaul
	3.0.1:		sa-to-sa6 typo fix
	3.0.2:		typo fixes
	3.0.3:		typo fixes
	3.0.4:		cut-n-paste errors, selectserver hints fix
	3.0.5:		typo fixes
	3.0.6:		typo fixes
	-->

	<version>Version 3.0.6</version>
	<date>December 3, 2008</date>

	<copyright>Copyright <copysym/> &copydates;  Brian "Beej Jorgensen" Hall</copyright>

</guideinfo>

<indexinfo id="zindex">
<indexentry id="AF_INET"><const>AF_INET</const></indexentry>
<indexentry id="AF_INET6"><const>AF_INET6</const></indexentry>
<indexentry id="accept()"><func>accept()</func></indexentry>
<indexentry id="bind()"><func>bind()</func></indexentry>
<indexentry id="close()"><func>close()</func></indexentry>
<indexentry id="closesocket()"><func>closesocket()</func></indexentry>
<indexentry id="connect()"><func>connect()</func></indexentry>
<indexentry id="compilers;gcc"><com>gcc</com></indexentry>
<indexentry id="CreateProcess()"><func>CreateProcess()</func></indexentry>
<indexentry id="CreateThread()"><func>CreateThread()</func></indexentry>
<indexentry id="CSocket"><type>CSocket</type></indexentry>
<indexentry id="disconnected network" see="private network">disconnected network</indexentry>
<indexentry id="domain name service" see="DNS">domain name service</indexentry>
<indexentry id="EAGAIN"><const>EAGAIN</const></indexentry>
<indexentry id="EPIPE"><const>EPIPE</const></indexentry>
<indexentry id="errno"><var>errno</var></indexentry>
<indexentry id="EWOULDBLOCK"><const>EWOULDBLOCK</const></indexentry>
<indexentry id="external data representation standard" see="XDR">external data representation standard</indexentry>
<indexentry id="F_SETFL"><const>F_SETFL</const></indexentry>
<indexentry id="fcntl()"><func>fcntl()</func></indexentry>
<indexentry id="FD_CLR()"><func>FD_CLR()</func></indexentry>
<indexentry id="FD_ISSET()"><func>FD_ISSET()</func></indexentry>
<indexentry id="FD_SET()"><func>FD_SET()</func></indexentry>
<indexentry id="FD_ZERO()"><func>FD_ZERO()</func></indexentry>
<indexentry id="fork()"><func>fork()</func></indexentry>
<indexentry id="getaddrinfo()"><func>getaddrinfo()</func></indexentry>
<indexentry id="getnameinfo()"><func>getnameinfo()</func></indexentry>
<indexentry id="gethostbyaddr()"><func>gethostbyaddr()</func></indexentry>
<indexentry id="gethostbyname()"><func>gethostbyname()</func></indexentry>
<indexentry id="gethostname()"><func>gethostname()</func></indexentry>
<indexentry id="getpeername()"><func>getpeername()</func></indexentry>
<indexentry id="getprotobyname()"><func>getprotobyname()</func></indexentry>
<indexentry id="getsockopt()"><func>getsockopt()</func></indexentry>
<indexentry id="gettimeofday()"><func>gettimeofday()</func></indexentry>
<indexentry id="goto"><tt>goto</tt></indexentry>
<indexentry id="herror()"><func>herror()</func></indexentry>
<indexentry id="hstrerror()"><func>hstrerror()</func></indexentry>
<indexentry id="htonl()"><func>htonl()</func></indexentry>
<indexentry id="htons()"><func>htons()</func></indexentry>
<indexentry id="INADDR_ANY"><const>INADDR_ANY</const></indexentry>
<indexentry id="INADDR_BROADCAST"><const>INADDR_BROADCAST</const></indexentry>
<indexentry id="inet_addr()"><func>inet_addr()</func></indexentry>
<indexentry id="inet_aton()"><func>inet_aton()</func></indexentry>
<indexentry id="inet_ntoa()"><func>inet_ntoa()</func></indexentry>
<indexentry id="inet_ntop()"><func>inet_ntoa()</func></indexentry>
<indexentry id="inet_pton()"><func>inet_pton()</func></indexentry>
<indexentry id="Internet Control Message Protocol" see="ICMP">Internet Control Message Protocol</indexentry>
<indexentry id="Internet protocol" see="IP">Internet protocol</indexentry>
<indexentry id="Internet Relay Chat" see="IRC">Internet Relay Chat</indexentry>
<indexentry id="layered network model" see="ISO/OSI">layered network model</indexentry>
<indexentry id="listen()"><func>listen()</func></indexentry>
<indexentry id="lo" see="loopback device"><tt>lo</tt></indexentry>
<indexentry id="man pages"><com>man</com> pages</indexentry>
<indexentry id="MSG_DONTROUTE"><const>MSG_DONTROUTE</const></indexentry>
<indexentry id="MSG_DONTWAIT"><const>MSG_DONTWAIT</const></indexentry>
<indexentry id="MSG_NOSIGNAL"><const>MSG_NOSIGNAL</const></indexentry>
<indexentry id="MSG_OOB"><const>MSG_OOB</const></indexentry>
<indexentry id="MSG_PEEK"><const>MSG_PEEK</const></indexentry>
<indexentry id="MSG_WAITALL"><const>MSG_WAITALL</const></indexentry>
<indexentry id="Maximum Transmission Unit" see="MTU">Maximum Transmission Unit</indexentry>
<indexentry id="netstat"><com>netstat</com></indexentry>
<indexentry id="network address translation" see="NAT">network address translation</indexentry>
<indexentry id="ntohl()"><func>ntohl()</func></indexentry>
<indexentry id="ntohs()"><func>ntohs()</func></indexentry>
<indexentry id="O_ASYNC" see="asynchronous I/O"><const>O_ASYNC</const></indexentry>
<indexentry id="O_NONBLOCK" see="non-blocking sockets"><const>O_NONBLOCK</const></indexentry>
<indexentry id="perror()"><func>perror()</func></indexentry>
<indexentry id="PF_INET"><const>PF_INET</const></indexentry>
<indexentry id="poll()"><func>poll()</func></indexentry>
<indexentry id="read()"><func>read()</func></indexentry>
<indexentry id="recv()"><func>recv()</func></indexentry>
<indexentry id="recvfrom()"><func>recvfrom()</func></indexentry>
<indexentry id="recvtimeout()"><func>recvtimeout()</func></indexentry>
<indexentry id="route"><com>route</com></indexentry>
<indexentry id="SA_RESTART"><const>SA_RESTART</const></indexentry>
<indexentry id="Secure Sockets Layer" see="SSL">Secure Sockets Layer</indexentry>
<indexentry id="select()"><func>select()</func></indexentry>
<indexentry id="send()"><func>send()</func></indexentry>
<indexentry id="sendall()"><func>sendall()</func></indexentry>
<indexentry id="sendto()"><func>sendto()</func></indexentry>
<indexentry id="setsockopt()"><func>setsockopt()</func></indexentry>
<indexentry id="shutdown()"><func>shutdown()</func></indexentry>
<indexentry id="sigaction()"><func>sigaction()</func></indexentry>
<indexentry id="SIGIO"><const>SIGIO</const></indexentry>
<indexentry id="SIGPIPE"><const>SIGPIPE</const></indexentry>
<indexentry id="SIGURG"><const>SIGURG</const></indexentry>
<indexentry id="SO_BINDTODEVICE"><const>SO_BINDTODEVICE</const></indexentry>
<indexentry id="SO_BROADCAST"><const>SO_BROADCAST</const></indexentry>
<indexentry id="SO_RCVTIMEO"><const>SO_RCVTIMEO</const></indexentry>
<indexentry id="SO_REUSEADDR"><const>SO_REUSEADDR</const></indexentry>
<indexentry id="SO_SNDTIMEO"><const>SO_SNDTIMEO</const></indexentry>
<indexentry id="socket()"><func>socket()</func></indexentry>
<indexentry id="SOCK_DGRAM" see="socket;datagram"><const>SOCK_DGRAM</const></indexentry>
<indexentry id="SOCK_STREAM" see="socket;stream"><const>SOCK_STREAM</const></indexentry>
<indexentry id="SOL_SOCKET"><const>SOL_SOCKET</const></indexentry>
<indexentry id="strerror()"><func>strerror()</func></indexentry>
<indexentry id="struct addrinfo"><type>struct addrinfo</type></indexentry>
<indexentry id="struct in_addr"><type>struct in_addr</type></indexentry>
<indexentry id="struct hostent"><type>struct hostent</type></indexentry>
<indexentry id="struct pollfd"><type>struct pollfd</type></indexentry>
<indexentry id="struct sockaddr"><type>struct sockaddr</type></indexentry>
<indexentry id="struct sockaddr_in"><type>struct sockaddr_in</type></indexentry>
<indexentry id="struct timeval"><type>struct timeval</type></indexentry>
<indexentry id="telnet"><com>gcc</com></indexentry>
<indexentry id="transmission control protocol" see="TCP">transmission control protocol</indexentry>
<indexentry id="user datagram protocol" see="UDP">user datagram protocol</indexentry>
<indexentry id="write()"><func>write()</func></indexentry>
<indexentry id="WSACleanup()"><func>WSACleanup()</func></indexentry>
<indexentry id="WSAStartup()"><func>WSAStartup()</func></indexentry>
</indexinfo>

<!-- ======================================================= -->
<!-- Introduction -->
<!-- ======================================================= -->
<sect1 id="intro">
<title>Intro</title>

<p>Hey!  Socket programming got you down?  Is this stuff just a little
too difficult to figure out from the <com>man</com> pages?  You want to
do cool Internet programming, but you don't have time to wade through a
gob of <type>struct</type>s trying to figure out if you have to call
<func>bind()</func> before you <func>connect()</func>, etc., etc.</p>

<p>Well, guess what!  I've already done this nasty business, and I'm
dying to share the information with everyone!  You've come to the right
place.  This document should give the average competent C programmer the
edge s/he needs to get a grip on this networking noise.</p>

<p>And check it out: I've finally caught up with the future (just in the
nick of time, too!) and have updated the Guide for IPv6!  Enjoy!</p>

<!-- ======================================================= -->
<!-- Audience -->
<!-- ======================================================= -->
<sect2 id="audience">
<title>Audience</title>

<p>This document has been written as a tutorial, not a complete
reference.  It is probably at its best when read by individuals who are
just starting out with socket programming and are looking for a
foothold.  It is certainly not the <emp>complete and total</emp> guide
to sockets programming, by any means.</p>

<p>Hopefully, though, it'll be just enough for those man pages to start
making sense... <smiley/></p>

</sect2>

<!-- ======================================================= -->
<!-- Platform and Compiler -->
<!-- ======================================================= -->
<sect2 id="platform">
<title>Platform and Compiler</title>

<p>The code contained within this document was compiled on a Linux PC
using Gnu's <ii key="compilers;gcc"/><com>gcc</com> compiler.  It
should, however, build on just about any platform that uses
<com>gcc</com>.  Naturally, this doesn't apply if you're programming for
Windows&emdash;see the <link dest="windows">section on Windows
programming</link>, below.</p>

</sect2>

<!-- ======================================================= -->
<!-- Homepage -->
<!-- ======================================================= -->
<sect2 id="homepage">
<title>Official Homepage</title>

<p>This official location of this document is <tt><ulink
url="&homepage;" footnote="n">&homepage;</ulink></tt>.</p>

</sect2>

<!-- ======================================================= -->
<!-- Solaris and SunOS -->
<!-- ======================================================= -->
<sect2 id="solaris">
<title>Note for Solaris/SunOS Programmers</title>

<p>When compiling for <ii key="Solaris"/>Solaris or <ii
key="SunOS"/>SunOS, you need to specify some extra command-line switches
for linking in the proper libraries.  In order to do this, simply add
"<tt>-lnsl -lsocket -lresolv</tt>" to the end of the compile command,
like so:</p>

<screen>$ cc -o server server.c -lnsl -lsocket -lresolv</screen>

<p>If you still get errors, you could try further adding a
"<tt>-lxnet</tt>" to the end of that command line.  I don't know what
that does, exactly, but some people seem to need it.</p>

<p>Another place that you might find problems is in the call to
<func>setsockopt()</func>.  The prototype differs from that on my Linux
box, so instead of:</p>

<code>int yes=1;</code>

<p>enter this:</p>

<code>char yes='1';</code>

<p>As I don't have a Sun box, I haven't tested any of the above
information&emdash;it's just what people have told me through email.</p>

</sect2>

<!-- ======================================================= -->
<!-- Windows -->
<!-- ======================================================= -->
<sect2 id="windows">
<title>Note for Windows Programmers</title>

<p>At this point in the guide, historically, I've done a bit of bagging
on <ii key="Windows"/>Windows, simply due to the fact that I don't like
it very much.  But I should really be fair and tell you that Windows has
a huge install base and is obviously a perfectly fine operating
system.</p>

<p>They say absence makes the heart grow fonder, and in this case, I
believe it to be true.  (Or maybe it's age.)  But what I can say is that
after a decade-plus of not using Microsoft OSes for my personal work,
I'm much happier!  As such, I can sit back and safely say, "Sure, feel
free to use Windows!"  ...Ok yes, it does make me grit my teeth to say
that.</p>

<p>So I still encourage you to try <ulink
url="&linuxurl;">Linux</ulink>, <ulink url="&bsdurl;">BSD</ulink>, or
some flavor of Unix, instead.</p>

<p>But people like what they like, and you Windows folk will be pleased
to know that this information is generally applicable to you guys, with
a few minor changes, if any.</p>

<p>One cool thing you can do is install <ulink
url="&cygwinurl;">Cygwin</ulink>, which is a collection of Unix tools
for Windows.  I've heard on the grapevine that doing so allows all these
programs to compile unmodified.</p>

<p>But some of you might want to do things the Pure Windows Way.  That's
very gutsy of you, and this is what you have to do: run out and get Unix
immediately!  No, no&emdash;I'm kidding.  I'm supposed to be
Windows-friendly(er) these days...</p>

<p>This is what you'll have to do (unless you install <ulink
url="&cygwinurl;" footnote="n">Cygwin</ulink>!): first, ignore pretty
much all of the system header files I mention in here.  All you need to
include is:</p>

<code><ii key="Winsock"/><![CDATA[#include <winsock.h>]]></code>

<p>Wait!  You also have to make a call to <ii
key="WSAStartup()"/><func>WSAStartup()</func> before doing anything else
with the sockets library.  The code to do that looks something like
this:</p>

<code><![CDATA[#include <winsock.h>

{
    WSADATA wsaData;   // if this doesn't work
    //WSAData wsaData; // then try this instead

    if (WSAStartup(MAKEWORD(1, 1), &wsaData) != 0) {
        fprintf(stderr, "WSAStartup failed.\n");
        exit(1);
    }]]></code>

<p>You also have to tell your compiler to link in the Winsock library,
usually called <file>wsock32.lib</file> or <file>winsock32.lib</file> or
some-such.  Under VC++, this can be done through the <tt>Project</tt>
menu, under <tt>Settings...</tt>.  Click the <tt>Link</tt> tab, and look
for the box titled "Object/library modules".  Add "wsock32.lib" to that
list.</p>

<p>Or so I hear.</p>

<p>Finally, you need to call <ii
key="WSACleanup()"/><func>WSACleanup()</func> when you're all through
with the sockets library.  See your online help for details.</p>

<p>Once you do that, the rest of the examples in this tutorial should
generally apply, with a few exceptions.  For one thing, you can't use
<func>close()</func> to close a socket&emdash;you need to use <ii
key="closesocket()"/><func>closesocket()</func>, instead.  Also, <ii
key="select()"/><func>select()</func> only works with socket
descriptors, not file descriptors (like <const>0</const> for
<tt>stdin</tt>).</p>

<p>There is also a socket class that you can use, <ii
key="CSocket"/><type>CSocket</type>.  Check your compilers help pages
for more information.</p>

<p>To get more information about Winsock, read the <ii key="Winsock
FAQ"/><ulink url="&winsockfaq;">Winsock FAQ</ulink> and go from
there.</p>

<p>Finally, I hear that Windows has no <ii
key="fork()"/><func>fork()</func> system call which is, unfortunately,
used in some of my examples.  Maybe you have to link in a POSIX library
or something to get it to work, or you can use <ii
key="CreateProcess()"/><func>CreateProcess()</func> instead.
<func>fork()</func> takes no arguments, and <func>CreateProcess()</func>
takes about 48 billion arguments.  If you're not up to that, the <ii
key="CreateThread()"/><func>CreateThread()</func> is a little easier to
digest...unfortunately a discussion about multithreading is beyond the
scope of this document.  I can only talk about so much, you know!</p>

</sect2>

<!-- ======================================================= -->
<!-- Email policy -->
<!-- ======================================================= -->
<sect2 id="emailpolicy">
<title>Email Policy</title>

<p>I'm generally available to help out with <ii key="email to
Beej"/>email questions so feel free to write in, but I can't guarantee a
response.  I lead a pretty busy life and there are times when I just
can't answer a question you have.  When that's the case, I usually just
delete the message.  It's nothing personal; I just won't ever have the
time to give the detailed answer you require.</p>

<p>As a rule, the more complex the question, the less likely I am to
respond.  If you can narrow down your question before mailing it and be
sure to include any pertinent information (like platform, compiler,
error messages you're getting, and anything else you think might help me
troubleshoot), you're much more likely to get a response.  For more
pointers, read ESR's document, <ulink url="&esrsmartqs;">How To Ask
Questions The Smart Way</ulink>.</p>

<p>If you don't get a response, hack on it some more, try to find the
answer, and if it's still elusive, then write me again with the
information you've found and hopefully it will be enough for me to help
out.</p>

<p>Now that I've badgered you about how to write and not write me, I'd
just like to let you know that I <emp>fully</emp> appreciate all the
praise the guide has received over the years.  It's a real morale boost,
and it gladdens me to hear that it is being used for good! <smiley/>
Thank you!</p>

</sect2>

<!-- ======================================================= -->
<!-- Mirroring -->
<!-- ======================================================= -->

<sect2 id="mirroring">
<title>Mirroring</title>

<p><ii key="mirroring"/>You are more than welcome to mirror this site,
whether publicly or privately.  If you publicly mirror the site and want
me to link to it from the main page, drop me a line at
<email>&beejmail;</email>.</p>

</sect2>

<!-- ======================================================= -->
<!-- Translators -->
<!-- ======================================================= -->

<sect2 id="xlate">
<title>Note for Translators</title>

<p><ii key="translations"/>If you want to translate the guide into
another language, write me at <email>&beejmail;</email> and I'll link to
your translation from the main page. Feel free to add your name and
contact info to the translation.</p>

<p>Please note the license restrictions in the Copyright and
Distribution section, below.</p>

<p>Sorry, but due to space constraints, I cannot host the
translations myself.</p>

</sect2>

<!-- ======================================================= -->
<!-- Copyright -->
<!-- ======================================================= -->
<sect2 id="copyright">
<title>Copyright and Distribution</title>

<p>Beej's Guide to Network Programming is Copyright <copysym/> &copydates;
Brian "Beej Jorgensen" Hall.</p>

<p>With specific exceptions for source code and translations, below,
this work is licensed under the Creative Commons Attribution-
Noncommercial- No Derivative Works 3.0 License. To view a copy of this
license, visit <tt><ulink url="&cclicenseurl;"
footnote="n">&cclicenseurl;</ulink></tt> or send a letter to Creative
Commons, 171 Second Street, Suite 300, San Francisco, California, 94105,
USA.</p>

<p>One specific exception to the "No Derivative Works" portion of the
license is as follows: this guide may be freely translated into any
language, provided the translation is accurate, and the guide is
reprinted in its entirety.  The same license restrictions apply to the
translation as to the original guide.  The translation may also include
the name and contact information for the translator.</p>

<p>The C source code presented in this document is hereby granted to the
public domain, and is completely free of any license restriction.</p>

<p>Educators are freely encouraged to recommend or supply copies of this
guide to their students.</p>

<p>Contact <email>&beejmail;</email> for more information.</p>

</sect2>

</sect1> <!-- /Introduction -->


<!-- ======================================================= -->
<!-- What is a socket? -->
<!-- ======================================================= -->

<sect1 id="theory">
<title>What is a socket?</title>

<p>You hear talk of "<ii key="socket"/>sockets" all the time, and
perhaps you are wondering just what they are exactly.  Well, they're
this: a way to speak to other programs using standard Unix file
descriptors.</p>

<p>What?</p>

<p>Ok&emdash;you may have heard some Unix hacker state, "Jeez,
<emp>everything</emp> in Unix is a file!"  What that person may have
been talking about is the fact that when Unix programs do any sort of
I/O, they do it by reading or writing to a <ii key="file
descriptor"/>file descriptor.  A file descriptor is simply an integer
associated with an open file.  But (and here's the catch), that file can
be a network connection, a FIFO, a pipe, a terminal, a real on-the-disk
file, or just about anything else.  Everything in Unix <emp>is</emp> a
file!  So when you want to communicate with another program over the
Internet you're gonna do it through a file descriptor, you'd better
believe it.</p>

<p>"Where do I get this file descriptor for network communication, Mr.
Smarty-Pants?" is probably the last question on your mind right now, but
I'm going to answer it anyway: You make a call to the <ii
key="socket()"/><func>socket()</func> system routine.  It returns the
<ii key="socket descriptor"/>socket descriptor, and you communicate
through it using the specialized <ii key="send()"/><func>send()</func>
and <ii key="recv()"/><func>recv()</func> (<com><link dest="sendman">man
send</link></com>, <com><link dest="recvman">man recv</link></com>)
socket calls.</p>

<p>"But, hey!" you might be exclaiming right about now.  "If it's a file
descriptor, why in the name of Neptune can't I just use the normal <ii
key="read()"/><func>read()</func> and <ii
key="write()"/><func>write()</func> calls to communicate through the
socket?"  The short answer is, "You can!"  The longer answer is, "You
can, but <ii key="send()"/><func>send()</func> and <ii
key="recv()"/><func>recv()</func> offer much greater control over your
data transmission."</p>

<p>What next?  How about this: there are all kinds of sockets.  There
are <ii key="socket;types"/>DARPA Internet addresses (Internet
Sockets), path names on a local node (Unix Sockets), CCITT X.25
addresses (X.25 Sockets that you can safely ignore), and probably many
others depending on which Unix flavor you run.  This document deals only
with the first: Internet Sockets.</p>

<!-- ======================================================= -->
<!-- Two Types of Internet Sockets -->
<!-- ======================================================= -->

<sect2 id="twotypes">
<title>Two Types of Internet Sockets</title>

<p>What's this?  <ii key="socket;types"/>There are two types of Internet
sockets?  Yes.  Well, no.  I'm lying.  There are more, but I didn't want
to scare you.  I'm only going to talk about two types here.  Except for
this sentence, where I'm going to tell you that "<ii key="raw
sockets"/><ii key="socket;raw"/>Raw Sockets" are also very powerful and
you should look them up.</p>

<p>All right, already.  What are the two types?  One is "<ii
key="socket;stream"/>Stream Sockets"; the other is
"<ii key="socket;datagram"/>Datagram Sockets", which
may hereafter be referred to as "<const>SOCK_STREAM</const>" and
"<const>SOCK_DGRAM</const>", respectively.  Datagram sockets are
sometimes called "connectionless sockets".  (Though they can be <ii
key="connect()"/><func>connect()</func>'d if you really want.  See
<func><link dest="connect">connect()</link></func>, below.)</p>

<p>Stream sockets are reliable two-way connected communication streams.
If you output two items into the socket in the order "1, 2", they will
arrive in the order "1, 2" at the opposite end.  They will also be
error-free.  I'm so certain, in fact, they will be error-free, that I'm
just going to put my fingers in my ears and chant <emp>la la la la</emp>
if anyone tries to claim otherwise.</p>

<p>What uses <ii key="socket;stream"/>stream sockets?  Well, you may
have heard of the <ii key="telnet"/><com>telnet</com> application, yes?
It uses stream sockets.  All the characters you type need to arrive in
the same order you type them, right?  Also, web browsers use the <ii
key="HTTP protocol"/>HTTP protocol which uses stream sockets to get
pages.  Indeed, if you telnet to a web site on port 80, and type
"<tt>GET / HTTP/1.0</tt>" and hit RETURN twice, it'll dump the HTML back
at you!</p>

<p>How do stream sockets achieve this high level of data transmission
quality?  They use a protocol called "The Transmission Control
Protocol", otherwise known as <ii key="TCP"/>"TCP" (see <ulink
url="&rfcpre;793&rfcpost;">RFC 793</ulink> for extremely detailed info
on TCP.)  TCP makes sure your data arrives sequentially and error-free.
You may have heard "TCP" before as the better half of "TCP/IP" where <ii
key="IP"/> "IP" stands for "Internet Protocol" (see <ulink
url="&rfcpre;791&rfcpost;">RFC 791</ulink>.)  IP deals primarily with
Internet routing and is not generally responsible for data
integrity.</p>

<p>Cool.  <ii key="socket;datagram"/>What about Datagram sockets?  Why
are they called connectionless?  What is the deal, here, anyway?  Why
are they unreliable?  Well, here are some facts: if you send a datagram,
it may arrive.  It may arrive out of order.  If it arrives, the data
within the packet will be error-free.</p>

<p>Datagram sockets also use IP for routing, but they don't use TCP;
they use the "User Datagram Protocol", or <ii key="UDP"/>"UDP" (see
<ulink url="&rfcpre;768&rfcpost;">RFC 768</ulink>.)</p>

<p>Why are they connectionless?  Well, basically, it's because you don't
have to maintain an open connection as you do with stream sockets.  You
just build a packet, slap an IP header on it with destination
information, and send it out.  No connection needed.  They are generally
used either when a TCP stack is unavailable or when a few dropped
packets here and there don't mean the end of the Universe.  Sample
applications: <com>tftp</com> (trivial file transfer protocol, a little
brother to FTP), <com>dhcpcd</com> (a DHCP client), multiplayer games,
streaming audio, video conferencing, etc.</p>

<p>"Wait a minute!  <com>tftp</com> and <com>dhcpcd</com> are used to
transfer binary applications from one host to another!  Data can't be
lost if you expect the application to work when it arrives!  What kind
of dark magic is this?"</p>

<p>Well, my human friend, <com>tftp</com> and similar programs have
their own protocol on top of UDP.  For example, the tftp protocol says
that for each packet that gets sent, the recipient has to send back a
packet that says, "I got it!" (an "ACK" packet.)  If the sender of the
original packet gets no reply in, say, five seconds, he'll re-transmit
the packet until he finally gets an ACK.  This acknowledgment procedure
is very important when implementing reliable <const>SOCK_DGRAM</const>
applications.</p>

<p>For unreliable applications like games, audio, or video, you just
ignore the dropped packets, or perhaps try to cleverly compensate for
them.  (Quake players will know the manifestation this effect by the
technical term: <emp>#!%$@* lag</emp>.)</p>

<p>Why would you use an unreliable underlying protocol?  Two reasons:
speed and speed.  It's way faster to fire-and-forget than it is to keep
track of what has arrived safely and make sure it's in order and all
that.  If you're sending chat messages, TCP is great; if you're sending
40 positional updates per second of the players in the world, maybe it
doesn't matter so much if one or two get dropped, and UDP is a good
choice.</p>

</sect2>

<!-- ======================================================= -->
<!-- Two Types of Internet Sockets -->
<!-- ======================================================= -->

<sect2 id="lowlevel">
<title>Low level Nonsense and Network Theory</title>

<p>Since I just mentioned layering of protocols, it's time to talk
about how networks really work, and to show some examples of how <ii
key="SOCK_DGRAM"/><const>SOCK_DGRAM</const> packets are built.
Practically, you can probably skip this section.  It's good background,
however.</p>

<figure id="figure1">
<image file="dataencap-120-4.736.png" printfile="dataencap-300-4.736.png" printwidth="4.736in" alt="[Encapsulated Protocols Diagram]"/>
<title>Data Encapsulation.</title>
</figure>

<p>Hey, kids, it's time to learn about <ii key="data
encapsulation"/><emp><link dest="figure1">Data
Encapsulation</link></emp>!  This is very very important.  It's so
important that you might just learn about it if you take the networks
course here at Chico State <winky/>.  Basically, it says this: a packet
is born, the packet is wrapped ("encapsulated") in a <ii
key="header"/>header (and rarely a <ii key="footer"/>footer) by the
first protocol (say, the <ii key="TFTP"/>TFTP protocol), then the whole
thing (TFTP header included) is encapsulated again by the next protocol
(say, <ii key="UDP"/>UDP), then again by the next (<ii key="IP"/>IP),
then again by the final protocol on the hardware (physical) layer (say,
<ii key="Ethernet"/>Ethernet).</p>

<p>When another computer receives the packet, the hardware strips the
Ethernet header, the kernel strips the IP and UDP headers, the TFTP
program strips the TFTP header, and it finally has the data.</p>

<p>Now I can finally talk about the infamous <ii key="layered network
model"/><emp>Layered Network Model</emp> (aka "ISO/OSI").  This Network
Model describes a system of network functionality that has many
advantages over other models.  For instance, you can write sockets
programs that are exactly the same without caring how the data is
physically transmitted (serial, thin Ethernet, AUI, whatever) because
programs on lower levels deal with it for you.  The actual network
hardware and topology is transparent to the socket programmer.</p>

<p>Without any further ado, I'll present the layers of the full-blown
model.  Remember this for network class exams:</p>

<list>
<li>Application</li>
<li>Presentation</li>
<li>Session</li>
<li>Transport</li>
<li>Network</li>
<li>Data Link</li>
<li>Physical</li>
</list>

<p>The Physical Layer is the hardware (serial, Ethernet, etc.).  The
Application  Layer is just about as far from the physical layer as you
can imagine&emdash;it's the place where users interact with the
network.</p>

<p>Now, this model is so general you could probably use it as an
automobile repair guide if you really wanted to.  A layered model more
consistent with Unix might be:</p>

<list>
<li>Application Layer (<emp>telnet, ftp, etc.</emp>)</li>
<li>Host-to-Host Transport Layer (<emp>TCP, UDP</emp>)</li>
<li>Internet Layer (<emp>IP and routing</emp>)</li>
<li>Network Access Layer (<emp>Ethernet, wi-fi, or whatever</emp>)</li>
</list>

<p>At this point in time, you can probably see how these layers
correspond to the encapsulation of the original data.</p>

<p>See how much work there is in building a simple packet?  Jeez!
And you have to type in the packet headers yourself using
"<com>cat</com>"!  Just kidding.  All you have to do for stream sockets
is <ii key="send()"/><func>send()</func> the data out.  All you have to
do for datagram sockets is encapsulate the packet in the method of your
choosing and <ii key="sendto()"/><func>sendto()</func> it out.  The
kernel builds the Transport Layer and Internet Layer on for you and the
hardware does the Network Access Layer.  Ah, modern technology.</p>

<p>So ends our brief foray into network theory.  Oh yes, I forgot to
tell you everything I wanted to say about routing: nothing!  That's
right, I'm not going to talk about it at all.  The router strips the
packet to the IP header, consults its routing table, <ii
key="blah blah blah"/>blah blah blah.  Check out the <ulink
url="&rfcpre;791&rfcpost;">IP RFC</ulink> if you really really care.  If
you never learn about it, well, you'll live.</p>

</sect2>

</sect1> <!-- /What is a socket? -->

<!-- ======================================================= -->
<!-- structs -->
<!-- ======================================================= -->
<sect1 id="ipstructsdata">
<title>IP Addresses, <type>struct</type>s, and Data Munging</title>

<p>Here's the part of the game where we get to talk code for a
change.</p>

<p>But first, let's discuss more non-code!  Yay!  First I want to talk
about <ii key="IP"/>IP addresses and ports for just a tad so we have
that sorted out.  Then we'll talk about how the sockets API stores and
manipulates IP addresses and other data.</p>

<sect2 id="ipaddrs1">
<title>IP Addresses, versions 4 and 6</title>

<p>In the good old days back when Ben Kenobi was still called Obi Wan
Kenobi, there was a wonderful network routing system called The Internet
Protocol Version 4, also called <ii key="IPv4"/>IPv4.  It had addresses
made up of four bytes (A.K.A. four "octets"), and was common written in
"dots and numbers" form, like so: <tt>192.0.2.111</tt>.</p>

<p>You've probably seen it around.</p>

<p>In fact, as of this writing in 2008, virtually every site on the
Internet uses IPv4.</p>

<p>Everyone, including Obi Wan, was happy.  Things were great, until
some naysayer by the name of Vint Cerf warned everyone that we were
about to run out of IPv4 addresses!</p>

<p>(Besides warning everyone of the Coming IPv4 Apocalypse Of Doom And
Gloom, <ii key="Vint Cerf"/><ulink url="&wpvint;">Vint Cerf</ulink> is
also well-known for being The Father Of The Internet.  So I really am in
no position to second-guess his judgment.)</p>

<p>Run out of addresses?  How could this be?  I mean, there are like
billions of IP addresses in a 32-bit IPv4 address.  Do we really have
billions of computers out there?</p>

<p>Yes.</p>

<p>Also, in the beginning, when there were only a few computers and
everyone thought a billion was an impossibly large number, some big
organizations were generously allocated millions of IP addresses for
their own use.  (Such as Xerox, MIT, Ford, HP, IBM, GE, AT&amp;T, and
some little company called Apple, to name a few.)</p>

<p>In fact, if it weren't for several stopgap measures, we would have
run out a long time ago.</p>

<p>But now we're living in an era where we're talking about every human
having an IP address, every computer, every calculator, every phone,
every parking meter, and (why not) every puppy dog, as well.</p>

<p>And so, <ii key="IPv6"/>IPv6 was born.  Since Vint Cerf is probably
immortal (even if his physical form should pass on, heaven forbid, he is
probably already existing as some kind of hyper-intelligent <ulink
url="&wpeliza;">ELIZA</ulink> program out in the depths of the
Internet2), no one wants to have to hear him say again "I told you so"
if we don't have enough addresses in the next version of the Internet
Protocol.</p>

<p>What does this suggest to you?</p>

<p>That we need a <emp>lot</emp> more addresses.  That we need not just
twice as many address, not a billion times as many, not a thousand
trillion times as many, but <emp>79 MILLION BILLION TRILLION times as
many possible addresses!</emp>  That'll show 'em!</p>

<p>You're saying, "Beej, is that true?  I have every reason to
disbelieve large numbers."  Well, the difference between 32 bits and 128
bits might not sound like a lot; it's only 96 more bits, right?  But
remember, we're talking powers here: 32 bits represents some 4 billion
numbers (2<super>32</super>), while 128 bits represents about 340
trillion trillion trillion numbers (for real, 2<super>128</super>).
That's like a million IPv4 Internets for <emp>every single star in the
Universe</emp>.</p>

<p>Forget this dots-and-numbers look of IPv4, too; now we've got a
hexidecimal representation, with each two-byte chunk separated by a
colon, like this: <tt>2001:0db8:c9d2:aee5:73e3:934a:a5ae:9551</tt>.</p>

<p>That's not all!  Lots of times, you'll have an IP address with lots
of zeros in it, and you can compress them between two colons.  And you
can leave off leading zeros for each byte pair.  For instance, each of
these pairs of addresses are equivalent:</p>

<screen>2001:0db8:c9d2:0012:0000:0000:0000:0051
2001:db8:c9d2:12::51

2001:0db8:ab00:0000:0000:0000:0000:0000
2001:db8:ab00::

0000:0000:0000:0000:0000:0000:0000:0001
::1
</screen>

<p>The address <tt>::1</tt> is the <emp>loopback address</emp>.  It
always means "this machine I'm running on now".  In IPv4, the loopback
address is 127.0.0.1.</p>

<p>Finally, there's an IPv4-compatibility mode for IPv6 addresses that
you might come across.  If you want, for example, to represent the IPv4
address 192.0.2.33 as an IPv6 address, you use the following notation:
"<tt>::ffff:192.0.2.33</tt>".</p>

<p>We're talking serious fun.</p>

<p>In fact, it's such serious fun, that the Creators of IPv6 have quite
cavalierly lopped off trillions and trillions of addresses for reserved
use, but we have so many, frankly, who's even counting anymore?  There
are plenty left over for every man, woman, child, puppy, and parking
meter on every planet in the galaxy.  And believe me, every planet in
the galaxy has parking meters.  You know it's true.</p>

<sect3 id="netslash">
<title>Subnets</title>

<p>For organizational reasons, it's sometimes convenient to declare that
"this first part of this IP address up through this bit is the
<emp>network portion</emp> of the IP address, and the remainder is the
<emp>host portion</emp>.</p>

<p>For instance, with IPv4, you might have <tt>192.0.2.12</tt>, and we could say
that the first three bytes are the network and the last byte was the
host.  Or, put another way, we're talking about host <tt>12</tt> on
network <tt>192.0.2.0</tt> (see how we zero out the byte the was the
host.)</p>

<p>And now for more outdated information!  Ready?  In the Ancient Times,
there were "classes" of subnets, where the first one, two, or three
bytes of the address was the network part.  If you were lucky enough to
have one byte for the network and three for the host, you could have
24 bits-worth of hosts on your network (24 million or so).  That was a
"Class A" network.  On the opposite end was a "Class C", with three
bytes of network, and one byte of host (256 hosts, minus a couple that
were reserved.)</p>

<p>So as you can see, there were just a few Class As, a huge pile of
Class Cs, and some Class Bs in the middle.</p>

<p>The network portion of the IP address is described by something
called the <emp>netmask</emp>, which you bitwise-AND with the IP address
to get the network number out of it.  The netmask usually looks
something like <tt>255.255.255.0</tt>.  (E.g. with that netmask, if your
IP is <tt>192.0.2.12</tt>, then your network is <tt>192.0.2.12</tt> AND
<tt>255.255.255.0</tt> which gives <tt>192.0.2.0</tt>.)</p>

<p>Unfortunately, it turned out that this wasn't fine-grained enough for
the eventual needs of the Internet; we were running out of Class C
networks quite quickly, and we were most definitely out of Class As, so
don't even bother to ask.  To remedy this, The Powers That Be allowed
for the netmask to be an arbitrary number of bits, not just 8, 16, or
24.  So you might have a netmask of, say <tt>255.255.255.252</tt>, which
is 30 bits of network, and 2 bits of host allowing for four hosts on the
network.  (Note that the netmask is <emp>ALWAYS</emp> a bunch of 1-bits
followed by a bunch of 0-bits.)</p>

<p>But it's a bit unwieldy to use a big string of numbers like
<tt>255.192.0.0</tt> as a netmask.  First of all, people don't have an
intuitive idea of how many bits that is, and secondly, it's really not
compact.  So the New Style came along, and it's much nicer.  You just
put a slash after the IP address, and then follow that by the number of
network bits in decimal.  Like this: <tt>192.0.2.12/30</tt>.</p>

<p>Or, for IPv6, something like this: <tt>2001:db8::/32</tt> or
<tt>2001:db8:5413:4028::9db9/64</tt>.</p>

</sect3>

<sect3 id="portnums">
<title>Port Numbers</title>

<p>If you'll kindly remember, I presented you earlier with the <link
dest="lowlevel">Layered Network Model</link> which had the Internet
Layer (IP) split off from the Host-to-Host Transport Layer (TCP and
UDP).  Get up to speed on that before the next paragraph.</p>

<p>Turns out that besides an IP address (used by the IP layer), there
is another address that is used by TCP (stream sockets) and,
coincidentally, by UDP (datagram sockets).  It is the <emp>port
number</emp>.  It's a 16-bit number that's like the local address for
the connection.</p>

<p>Think of the IP address as the street address of a hotel, and the
port number as the room number.  That's a decent analogy; maybe later
I'll come up with one involving the automobile industry.</p>

<p>Say you want to have a computer that handles incoming mail AND web
services&emdash;how do you differentiate between the two on a computer
with a single IP address?</p>

<p>Well, different services on the Internet have different well-known
port numbers.  You can see them all in <ulink url="&portlist;">the Big
IANA Port List</ulink> or, if you're on a Unix box, in your
<file>/etc/services</file> file.  HTTP (the web) is port 80, telnet is
port 23, SMTP is port 25, the game <ulink url="&wpdoom;">DOOM</ulink>
used port 666, etc. and so on.  Ports under 1024 are often considered
special, and usually require special OS privileges to use.</p>

<p>And that's about it!</p>

</sect3> <!-- portnums -->

</sect2> <!-- ipaddrs1 -->

<sect2 id="byteorder">
<title>Byte Order</title>

<p><ii key="byte ordering"/>By Order of the Realm!  There shall be two
byte orderings, hereafter to be known as Lame and Magnificent!</p>

<p>I joke, but one really is better than the other.  <smiley/></p>

<p>There really is no easy way to say this, so I'll just blurt it out:
your computer might have been storing bytes in reverse order behind your
back.  I know!  No one wanted to have to tell you.</p>

<p>The thing is, everyone in the Internet world has generally agreed
that if you want to represent the two-byte hex number, say
<tt>b34f</tt>, you'll store it in two sequential bytes <tt>b3</tt>
followed by <tt>4f</tt>.  Makes sense, and, as <ulink
url="&wpwilford;">Wilford Brimley</ulink> would tell you, it's the Right
Thing To Do.  This number, stored with the big end first, is called
<emp>Big-Endian</emp>.</p>

<p>Unfortunately, a few computers scattered here and there throughout
the world, namely anything with an Intel or Intel-compatible processor,
store the bytes reversed, so <tt>b34f</tt> would be stored in memory as
the sequential bytes <tt>4f</tt> followed by <tt>b3</tt>.  This storage
method is called <emp>Little-Endian</emp>.</p>

<p>But wait, I'm not done with terminology yet!  The more-sane
<emp>Big-Endian</emp> is also called <emp>Network Byte Order</emp>
because that's the order us network types like.</p>

<p>Your computer stores numbers in <emp>Host Byte Order</emp>.  If it's
an Intel 80x86, Host Byte Order is Little-Endian.  If it's a Motorola
68k, Host Byte Order is Big-Endian.  If it's a PowerPC, Host Byte Order
is...  well, it depends!</p>

<p>A lot of times when you're building packets or filling out data
structures you'll need to make sure your two- and four-byte numbers are
in Network Byte Order.  But how can you do this if you don't know the
native Host Byte Order?</p>

<p>Good news!  You just get to assume the Host Byte Order isn't right,
and you always run the value through a function to set it to Network
Byte Order.  The function will do the magic conversion if it has to, and
this way your code is portable to machines of differing endianness.</p>

<p>All righty.  There are two types of numbers that you can convert:
<type>short</type> (two bytes) and <type>long</type> (four bytes).
These functions work for the <type>unsigned</type> variations as well.
Say you want to convert a <type>short</type> from Host Byte Order to
Network Byte Order.  Start with "h" for "host", follow it with "to",
then "n" for "network", and "s" for "short": h-to-n-s, or
<func>htons()</func> (read: "Host to Network Short").</p>

<p>It's almost too easy...</p>

<p>You can use every combination of "n", "h", "s", and "l" you want,
not counting the really stupid ones.  For example, there is NOT a
<func>stolh()</func> ("Short to Long Host") function&emdash;not at this
party, anyway.  But there are:</p>

<p>
<table border="0" width="60%">
<tr><td width="20%"><p><ii key="htons()"/><func>htons()</func></p></td><td width="78%"><p><func>h</func>ost <func>to</func> <func>n</func>etwork <func>s</func>hort</p></td></tr>
<tr><td><p><ii key="htonl()"/><func>htonl()</func></p></td><td><p><func>h</func>ost <func>to</func> <func>n</func>etwork <func>l</func>ong</p></td></tr>
<tr><td><p><ii key="ntohs()"/><func>ntohs()</func></p></td><td><p><func>n</func>etwork <func>to</func> <func>h</func>ost <func>s</func>hort</p></td></tr>
<tr><td><p><ii key="ntohl()"/><func>ntohl()</func></p></td><td><p><func>n</func>etwork <func>to</func> <func>h</func>ost <func>l</func>ong</p></td></tr>
</table>
</p>

<p>Basically, you'll want to convert the numbers to Network Byte Order
before they go out on the wire, and convert them to Host Byte Order as
they come in off the wire.</p>

<p>I don't know of a 64-bit variant, sorry.  And if you want to do
floating point, check out the section on <link
dest="serialization">Serialization</link>, far below.</p>

<p>Assume the numbers in this document are in Host Byte Order unless I
say otherwise.</p>

</sect2> <!-- byteorder -->

<sect2 id="structs">
<title><type>struct</type>s</title>

<p>Well, we're finally here.  It's time to talk about programming.
In this section, I'll cover various data types used by the sockets
interface, since some of them are a real bear to figure out.</p>

<p>First the easy one: a <ii key="socket descriptor"/>socket descriptor.
A socket descriptor is the following type:</p>

<code><![CDATA[int]]></code>

<p>Just a regular <type>int</type>.</p>

<p>Things get weird from here, so just read through and bear with
me.</p>

<p>My First Struct<super>TM</super>&emdash;<ii key="struct addrinfo"/><type>struct
addrinfo</type>.  This structure is a more recent invention, and is used
to prep the socket address structures for subsequent use.  It's also
used in host name lookups, and service name lookups.  That'll make more
sense later when we get to actual usage, but just know for now that it's
one of the first things you'll call when making a connection.</p>

<code><![CDATA[struct addrinfo {
    int              ai_flags;     // AI_PASSIVE, AI_CANONNAME, etc.
    int              ai_family;    // AF_INET, AF_INET6, AF_UNSPEC
    int              ai_socktype;  // SOCK_STREAM, SOCK_DGRAM
    int              ai_protocol;  // use 0 for "any"
    size_t           ai_addrlen;   // size of ai_addr in bytes
    struct sockaddr *ai_addr;      // struct sockaddr_in or _in6
    char            *ai_canonname; // full canonical hostname

    struct addrinfo *ai_next;      // linked list, next node
};]]></code>

<p>You'll load this struct up a bit, and then call <ii
key="getaddrinfo()"/><func>getaddrinfo()</func>.  It'll return a pointer
to a new linked list of these structures filled out with all the goodies
you need.</p>

<p>You can force it to use IPv4 or IPv6 in the <param>ai_family</param>
field, or leave it as <const>AF_UNSPEC</const> to use whatever.  This is
cool because your code can be IP version-agnostic.</p>

<p>Note that this is a linked list: <param>ai_next</param> points at the
next element&emdash;there could be several results for you to choose
from.  I'd use the first result that worked, but you might have
different business needs; I don't know everything, man!</p>

<p>You'll see that the <param>ai_addr</param> field in the <type>struct
addrinfo</type> is a pointer to a <ii key="struct
sockaddr"/><type>struct sockaddr</type>.  This is where we start getting
into the nitty-gritty details of what's inside an IP address
structure.</p>

<p>You might not usually need to write to these structures; oftentimes,
a call to <func>getaddrinfo()</func> to fill out your <type>struct
addrinfo</type> for you is all you'll need.  You <emp>will</emp>,
however, have to peer inside these <type>struct</type>s to get the
values out, so I'm presenting them here.</p>

<p>(Also, all the code written before <type>struct addrinfo</type> was
invented packed all this stuff by hand, so you'll see a lot of IPv4 code
out in the wild that does exactly that.  You know, in old versions of
this guide and so on.)</p>

<p>Some <type>struct</type>s are IPv4, some are IPv6, and some are both.
I'll make notes of which are what.</p>

<p>Anyway, the <type>struct sockaddr</type> holds socket address
information for many types of sockets.</p>

<code><![CDATA[struct sockaddr {
    unsigned short    sa_family;    // address family, AF_xxx
    char              sa_data[14];  // 14 bytes of protocol address
}; ]]>
</code>

<p><param>sa_family</param> can be a variety of things, but it'll be <ii
key="AF_INET"/><const>AF_INET</const> (IPv4) or <ii
key="AF_INET6"/><const>AF_INET6</const> (IPv6) for everything we do in
this document.  <param>sa_data</param> contains a destination address
and port number for the socket.  This is rather unwieldy since you don't
want to tediously pack the address in the <param>sa_data</param> by
hand.</p>

<p>To deal with <type>struct sockaddr</type>, programmers created a
parallel structure: <ii key="struct sockaddr_in"/><type>struct
sockaddr_in</type> ("in" for "Internet") to be used with IPv4.</p>

<p>And <emp>this is the important</emp> bit: a pointer to a <type>struct
sockaddr_in</type> can be cast to a pointer to a <type>struct
sockaddr</type> and vice-versa.  So even though <func>connect()</func>
wants a <type>struct sockaddr*</type>, you can still use a <type>struct
sockaddr_in</type> and cast it at the last minute!</p>

<code><![CDATA[// (IPv4 only--see struct sockaddr_in6 for IPv6)

struct sockaddr_in {
    short int          sin_family;  // Address family, AF_INET
    unsigned short int sin_port;    // Port number
    struct in_addr     sin_addr;    // Internet address
    unsigned char      sin_zero[8]; // Same size as struct sockaddr
};]]>
</code>

<p>This structure makes it easy to reference elements of the socket
address.  Note that <param>sin_zero</param> (which is included to pad
the structure to the length of a <type>struct sockaddr</type>) should be
set to all zeros with the function <func>memset()</func>.  Also, notice
that <param>sin_family</param> corresponds to <param>sa_family</param>
in a <type>struct sockaddr</type> and should be set to
"<const>AF_INET</const>".  Finally, the <param>sin_port</param> must be
in <ii key="byte ordering"/><emp>Network Byte Order</emp> (by using <ii
key="htons()"/><func>htons()</func>!)</p>

<p>Let's dig deeper!  You see the <param>sin_addr</param> field is a
<type>struct in_addr</type>.  What is that thing?  Well, not to be
overly dramatic, but it's one of the scariest unions of all time:</p>

<code><![CDATA[// (IPv4 only--see struct in6_addr for IPv6)

// Internet address (a structure for historical reasons)
struct in_addr {
    uint32_t s_addr; // that's a 32-bit int (4 bytes)
};]]></code>

<p>Whoa!  Well, it <emp>used</emp> to be a union, but now those days
seem to be gone.  Good riddance.  So if you have declared
<param>ina</param> to be of type <type>struct sockaddr_in</type>, then
<param>ina.sin_addr.s_addr</param> references the 4-byte IP address (in
Network Byte Order).  Note that even if your system still uses the
God-awful union for <type>struct in_addr</type>, you can still reference
the 4-byte IP address in exactly the same way as I did above (this due
to <tt>#define</tt>s.)</p>

<p>What about <ii key="IPv6"/>IPv6?  Similar <type>struct</type>s exist
for it, as well:</p>

<code><![CDATA[// (IPv6 only--see struct sockaddr_in and struct in_addr for IPv4)

struct sockaddr_in6 {
    u_int16_t       sin6_family;   // address family, AF_INET6
    u_int16_t       sin6_port;     // port number, Network Byte Order
    u_int32_t       sin6_flowinfo; // IPv6 flow information
    struct in6_addr sin6_addr;     // IPv6 address
    u_int32_t       sin6_scope_id; // Scope ID
};

struct in6_addr {
    unsigned char   s6_addr[16];   // IPv6 address
};]]></code>

<p>Note that IPv6 has an IPv6 address and a port number, just like IPv4
has an IPv4 address and a port number.</p>

<p>Also note that I'm not going to talk about the IPv6 flow information
or Scope ID fields for the moment... this is just a starter guide.
<smiley/></p>

<p>Last but not least, here is another simple structure, <type>struct
sockaddr_storage</type> that is designed
to be large enough to hold both IPv4 and IPv6 structures.  (See, for
some calls, sometimes you don't know in advance if it's going to fill
out your <type>struct sockaddr</type> with an IPv4 or IPv6 address.  So
you pass in this parallel structure, very similar to <type>struct
sockaddr</type> except larger, and then cast it to the type you
need:</p>

<code><![CDATA[struct sockaddr_storage {
    sa_family_t  ss_family;     // address family

	// all this is padding, implementation specific, ignore it:
    char      __ss_pad1[_SS_PAD1SIZE];
    int64_t   __ss_align;
    char      __ss_pad2[_SS_PAD2SIZE];
};]]></code>

<p>What's important is that you can see the address family in the
<var>ss_family</var> field&emdash;check this to see if it's
<const>AF_INET</const> or <const>AF_INET6</const> (for IPv4 or
IPv6).  Then you can cast it to a <type>struct sockaddr_in</type> or
<type>struct sockaddr_in6</type> if you wanna.</p>

</sect2> <!-- structs -->

<!-- ======================================================= -->
<!-- IP Addresses -->
<!-- ======================================================= -->
<sect2 id="ipaddrs2">
<title>IP Addresses, Part Deux</title>

<p>Fortunately for you, there are a bunch of functions that allow you to
manipulate <ii key="IP"/>IP addresses.  No need to figure them out by
hand and stuff them in a <type>long</type> with the
<tt><![CDATA[<<]]></tt> operator.</p>

<p>First, let's say you have a <type>struct sockaddr_in ina</type>, and
you have an IP address "<tt>10.12.110.57</tt>" or
"<tt>2001:db8:63b3:1::3490</tt>" that you want to store into it.  The
function you want to use, <ii key="inet_pton()"/>
<func>inet_pton()</func>, converts an IP address in numbers-and-dots
notation into either a <type>struct in_addr</type> or a <type>struct
in6_addr</type> depending on whether you specify <const>AF_INET</const>
or <const>AF_INET6</const>.  ("pton" stands for "presentation to
network"&emdash;you can call it "printable to network" if that's easier
to remember.)  The conversion can be made as follows:</p>

<code><![CDATA[struct sockaddr_in sa; // IPv4
struct sockaddr_in6 sa6; // IPv6

inet_pton(AF_INET, "192.0.2.1", &(sa.sin_addr)); // IPv4
inet_pton(AF_INET6, "2001:db8:63b3:1::3490", &(sa6.sin6_addr)); // IPv6]]></code>

<p>(Quick note: the old way of doing things used a function called <ii
key="inet_addr()"/><func>inet_addr()</func> or another function called
<ii key="inet_aton()"/><func>inet_aton()</func>; these are now obsolete
and don't work with IPv6.)</p>

<p>Now, the above code snippet isn't very robust because there is no
error checking.  See, <func>inet_pton()</func> returns
<const>-1</const> on error, or 0 if the address is messed up.  So check
to make sure the result is greater than 0 before using!</p>

<p>All right, now you can convert string IP addresses to their binary
representations.  What about the other way around?  What if you have a
<type>struct in_addr</type> and you want to print it in numbers-and-dots
notation?   (Or a <type>struct in6_addr</type> that you want in, uh,
"hex-and-colons" notation.)  In this case, you'll want to use the
function <ii key="inet_ntop()"/><func>inet_ntop()</func> ("ntop" means
"network to presentation"&emdash;you can call it "network to printable"
if that's easier to remember), like this:</p>

<code><![CDATA[// IPv4:

char ip4[INET_ADDRSTRLEN];  // space to hold the IPv4 string
struct sockaddr_in sa;      // pretend this is loaded with something

inet_ntop(AF_INET, &(sa.sin_addr), ip4, INET_ADDRSTRLEN);

printf("The IPv4 address is: %s\n", ip4);


// IPv6:

char ip6[INET6_ADDRSTRLEN]; // space to hold the IPv6 string
struct sockaddr_in6 sa6;    // pretend this is loaded with something

inet_ntop(AF_INET6, &(sa6.sin6_addr), ip6, INET6_ADDRSTRLEN);

printf("The address is: %s\n", ip6);]]></code>

<p>When you call it, you'll pass the address type (IPv4 or IPv6), the
address, a pointer to a string to hold the result, and the maximum
length of that string.  (Two macros conveniently hold the size of the
string you'll need to hold the largest IPv4 or IPv6 address:
<const>INET_ADDRSTRLEN</const> and <const>INET6_ADDRSTRLEN</const>.)</p>

<p>(Another quick note to mention once again the old way of doing
things: the historical function to do this conversion was called <ii
key="inet_ntoa()"/><func>inet_ntoa()</func>.  It's also obsolete and
won't work with IPv6.)</p>

<p>Lastly, these functions only work with numeric IP
addresses&emdash;they won't do any nameserver DNS lookup on a hostname,
like "www.example.com".  You will use <func>getaddrinfo()</func> to do
that, as you'll see later on.</p>

<sect3 id="privnet">
<title>Private (Or Disconnected) Networks</title>

<p><ii key="private network"/>Lots of places have a <ii
key="firewall"/>firewall that hides the network from the rest of the
world for their own protection.  And often times, the firewall
translates "internal" IP addresses to "external" (that everyone else in
the world knows) IP addresses using a process called <emp>Network
Address Translation</emp>, or <ii key="NAT"/>NAT.</p>

<p>Are you getting nervous yet?  "Where's he going with all this weird
stuff?"</p>

<p>Well, relax and buy yourself a non-alcoholic (or alcoholic) drink,
because as a beginner, you don't even have to worry about NAT, since
it's done for you transparently.  But I wanted to talk about the network
behind the firewall in case you started getting confused by the network
numbers you were seeing.</p>

<p>For instance, I have a firewall at home.  I have two static IPv4
addresses allocated to me by the DSL company, and yet I have seven
computers on the network.  How is this possible?  Two computers can't
share the same IP address, or else the data wouldn't know which one to
go to!</p>

<p>The answer is: they don't share the same IP addresses.  They are on a
private network with 24 million IP addresses allocated to it.  They are
all just for me.  Well, all for me as far as anyone else is concerned.
Here's what's happening:</p>

<p>If I log into a remote computer, it tells me I'm logged in from
192.0.2.33 which is the public IP address my ISP has provided to me.
But if I ask my local computer what it's IP address is, it says
10.0.0.5.  Who is translating the IP address from one to the other?
That's right, the firewall!  It's doing NAT!</p>

<p>10.<emp>x</emp>.<emp>x</emp>.<emp>x</emp> is one of a few reserved
networks that are only to be used either on fully disconnected networks,
or on networks that are behind firewalls.  The details of which private
network numbers are available for you to use are outlined in <ulink
url="&rfcpre;1918&rfcpost;">RFC 1918</ulink>,
but some common ones you'll see are <ii
key="10.x.x.x"/>10.<emp>x</emp>.<emp>x</emp>.<emp>x</emp> and <ii
key="192.168.x.x"/>192.168.<emp>x</emp>.<emp>x</emp>, where <emp>x</emp>
is 0-255, generally.  Less common is
172.<emp>y</emp>.<emp>x</emp>.<emp>x</emp>, where <emp>y</emp> goes
between 16 and 31.</p>

<p>Networks behind a NATing firewall don't <emp>need</emp> to be on one
of these reserved networks, but they commonly are.</p>

<p>(Fun fact!  My external IP address isn't really 192.0.2.33.  The
192.0.2.<emp>x</emp> network is reserved for make-believe "real" IP
addresses to be used in documentation, just like this guide!
Wowzers!)</p>

<p><ii key="IPv6"/>IPv6 has private networks, too, in a sense.  They'll
start with <tt>fd<emp>xx</emp>:</tt> (or maybe in the future
<tt>fc<emp>XX</emp>:</tt>), as per <ulink
url="&rfcpre;4193&rfcpost;">RFC 4193</ulink>.  NAT and IPv6 don't
generally mix, however (unless you're doing the IPv6 to IPv4 gateway
thing which is beyond the scope of this document)&emdash;in theory
you'll have so many addresses at your disposal that you won't need to
use NAT any longer.  But if you want to allocate addresses for yourself
on a network that won't route outside, this is how to do it.</p>

</sect3> <!-- privnet -->

</sect2> <!-- ipaddrs2 -->

</sect1> <!-- structs -->

<!-- ======================================================= -->
<!-- IPv4 to IPv6 -->
<!-- ======================================================= -->
<sect1 id="ip4to6">
<title>Jumping from IPv4 to IPv6</title>

<p><ii key="IPv6"/>But I just want to know what to change in my code to
get it going with IPv6!  Tell me now!</p>

<p>Ok! Ok!</p>

<p>Almost everything in here is something I've gone over, above, but
it's the short version for the impatient.  (Of course, there is more
than this, but this is what applies to the guide.)</p>

<numlist>
<li>First of all, try to use <ii key="getaddrinfo()"/><link
dest="getaddrinfo"><func>getaddrinfo()</func></link> to get all the
<type>struct sockaddr</type> info, instead of packing the structures by
hand.  This will keep you IP version-agnostic, and will eliminate many
of the subsequent steps.</li>

<li>Any place that you find you're hard-coding anything related to the
IP version, try to wrap up in a helper function.</li>

<li>Change <const>AF_INET</const> to <const>AF_INET6</const>.</li>

<li>Change <const>PF_INET</const> to <const>PF_INET6</const>.</li>

<li><p>Change <const>INADDR_ANY</const> assignments to
<const>in6addr_any</const> assignments, which are slightly
different:</p>

<code><![CDATA[
struct sockaddr_in sa;
struct sockaddr_in6 sa6;

sa.sin_addr.s_addr = INADDR_ANY;  // use my IPv4 address
sa6.sin6_addr = in6addr_any; // use my IPv6 address]]></code>

<p>Also, the value <const>IN6ADDR_ANY_INIT</const> can be used as an
initializer when the <type>struct in6_addr</type> is declared, like
so:</p>

<code><![CDATA[struct in6_addr ia6 = IN6ADDR_ANY_INIT;]]></code>
</li>

<li>Instead of <type>struct sockaddr_in</type> use <type>struct
sockaddr_in6</type>, being sure to add "6" to the fields as appropriate
(see <link dest="structs"><type>struct</type>s</link>, above).  There is
no <var>sin6_zero</var> field.</li>

<li>Instead of <type>struct in_addr</type> use <type>struct
in6_addr</type>, being sure to add "6" to the fields as appropriate (see
<link dest="structs"><type>struct</type>s</link>, above).</li>

<li>Instead of <func>inet_aton()</func> or <func>inet_addr()</func>, use
<func>inet_pton()</func>.</li>

<li>Instead of <func>inet_ntoa()</func>, use
<func>inet_ntop()</func>.</li>

<li>Instead of <func>gethostbyname()</func>, use the superior
<func>getaddrinfo()</func>.</li>

<li>Instead of <func>gethostbyaddr()</func>, use the superior <ii
key="getnameinfo()"/><func>getnameinfo()</func> (although
<func>gethostbyaddr()</func> can still work with IPv6).</li>

<li><const>INADDR_BROADCAST</const> no longer works.  Use IPv6 multicast
instead.</li>

</numlist>

<p><foreign>Et voila</foreign>!</p>

</sect1>

<!-- ======================================================= -->
<!-- System Calls -->
<!-- ======================================================= -->
<sect1 id="syscalls">
<title>System Calls or Bust</title>

<p>This is the section where we get into the system calls (and other
library calls) that allow you to access the network functionality of a
Unix box, or any box that supports the sockets API for that matter (BSD,
Windows, Linux, Mac, what-have-you.)  When you call one of these
functions, the kernel takes over and does all the work for you
automagically.</p>

<p>The place most people get stuck around here is what order to call
these things in.  In that, the <com>man</com> pages are no use,
as you've probably discovered.  Well, to help with that dreadful
situation, I've tried to lay out the system calls in the following
sections in <emp>exactly</emp> (approximately) the same order
that you'll need to call them in your programs.</p>

<p>That, coupled with a few pieces of sample code here and there,
some milk and cookies (which I fear you will have to supply yourself),
and some raw guts and courage, and you'll be beaming data around the
Internet like the Son of Jon Postel!</p>

<p>(Please note that for brevity, many code snippets below do not
include necessary error checking.  And they very commonly assume that
the result from calls to <func>getaddrinfo()</func> succeed and return a
valid entry in the linked list.  Both of these situations are properly
addressed in the stand-alone programs, though, so use those as a
model.)</p>

<!-- ======================================================= -->
<!-- socket -->
<!-- ======================================================= -->
<sect2 id="getaddrinfo">
<title><func>getaddrinfo()</func>&emdash;Prepare to launch!</title>

<p><ii key="getaddrinfo()"/>This is a real workhorse of a function with
a lot of options, but usage is actually pretty simple.  It helps set up
the <type>struct</type>s you need later on.</p>

<p>A tiny bit of history: it used to be that you would use a function
called <func>gethostbyname()</func> to do DNS lookups.  Then you'd
load that information by hand into a <type>struct sockaddr_in</type>,
and use that in your calls.</p>

<p>This is no longer necessary, thankfully.  (Nor is it desirable, if
you want to write code that works for both IPv4 and IPv6!)  In these
modern times, you now have the function <func>getaddrinfo()</func> that
does all kinds of good stuff for you, including DNS and service name
lookups, and fills out the <type>struct</type>s you need, besides!</p>

<p>Let's take a look!</p>

<code><![CDATA[#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>

int getaddrinfo(const char *node,     // e.g. "www.example.com" or IP
                const char *service,  // e.g. "http" or port number
                const struct addrinfo *hints,
                struct addrinfo **res);]]></code>

<p>You give this function three input parameters, and it gives you a
pointer to a linked-list, <param>res</param>, of results.</p>

<p>The <param>node</param> parameter is the host name to connect to, or
an IP address.</p>

<p>Next is the parameter <param>service</param>, which can be a port
number, like "80", or the name of a particular service (found in <ulink
url="&portlist;">The IANA Port List</ulink> or the
<file>/etc/services</file> file on your Unix machine) like "http" or
"ftp" or "telnet" or "smtp" or whatever.</p>

<p>Finally, the <param>hints</param> parameter points to a <type>struct
addrinfo</type> that you've already filled out with relevant
information.</p>

<p>Here's a sample call if you're a server who wants to listen on your
host's IP address, port 3490.  Note that this doesn't actually do any
listening or network setup; it merely sets up structures we'll use
later:</p>

<code><![CDATA[int status;
struct addrinfo hints;
struct addrinfo *servinfo;  // will point to the results

memset(&hints, 0, sizeof hints); // make sure the struct is empty
hints.ai_family = AF_UNSPEC;     // don't care IPv4 or IPv6
hints.ai_socktype = SOCK_STREAM; // TCP stream sockets
hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

if ((status = getaddrinfo(NULL, "3490", &hints, &servinfo)) == -1) {
	fprintf(stderr, "getaddrinfo error: %s\n", gai_strerror(status));
	exit(1);
}

// servinfo now points to a linked list of 1 or more struct addrinfos

// ... do everything until you don't need servinfo anymore ....

freeaddrinfo(servinfo); // free the linked-list]]></code>

<p>Notice that I set the <param>ai_family</param> to
<const>AF_UNSPEC</const>, thereby saying that I don't care if we use
IPv4 or IPv6.  You can set it to <const>AF_INET</const> or
<const>AF_INET6</const> if you want one or the other specifically.</p>

<p>Also, you'll see the <const>AI_PASSIVE</const> flag in there; this
tells <func>getaddrinfo()</func> to assign the address of my local host
to the socket structures.  This is nice because then you don't have to
hardcode it.  (Or you can put a specific address in as the first
parameter to <func>getaddrinfo()</func> where I currently have
<const>NULL</const>, up there.)</p>

<p>Then we make the call.  If there's an error, we can print it out
using the function <func>gai_strerror()</func>, as you see.  If
everything works properly, though, <var>servinfo</var> will point to a
linked list of <type>struct addrinfo</type>s, each of which contains a
<type>struct sockaddr</type> of some kind that we can use later!
Nifty!</p>

<p>Finally, when we're eventually all done with the linked list that
<func>getaddrinfo()</func> so graciously allocated for us, we can (and
should) free it all up with a call to <func>freeaddrinfo()</func>.</p>

<p>Here's a sample call if you're a client who wants to connect to a
particular server, say "www.example.net" port 3490.  Again, this doesn't
actually connect, but it sets up the structures we'll use later:</p>

<code><![CDATA[int status;
struct addrinfo hints;
struct addrinfo *servinfo;  // will point to the results

memset(&hints, 0, sizeof hints); // make sure the struct is empty
hints.ai_family = AF_UNSPEC;     // don't care IPv4 or IPv6
hints.ai_socktype = SOCK_STREAM; // TCP stream sockets

// get ready to connect
status = getaddrinfo("www.example.net, "3490", &hints, &servinfo);

// servinfo now points to a linked list of 1 or more struct addrinfos

// etc.]]></code>

<p>I keep saying that <var>servinfo</var> is a linked list with all
kinds of address information.  Let's write a quick demo program to show
off this information.  <ulink url="&samplepre;showip.c">This short
program</ulink> will print the IP addresses for whatever host you
specify on the command line:</p>

<code><![CDATA[/*
** showip.c -- show IP addresses for a host given on the command line
*/

#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>

int main(int argc, char *argv[])
{
	struct addrinfo hints, *res, *p;
	int status;
	char ipstr[INET6_ADDRSTRLEN];

	if (argc != 2) {
	    fprintf(stderr,"usage: showip hostname\n");
	    return 1;
	}

	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC; // AF_INET or AF_INET6 to force version
	hints.ai_socktype = SOCK_STREAM;

	if ((status = getaddrinfo(argv[1], NULL, &hints, &res)) != 0) {
		fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(status));
		return 2;
	}

	printf("IP addresses for %s:\n\n", argv[1]);

	for(p = res;p != NULL; p = p->ai_next) {
		void *addr;
		char *ipver;

		// get the pointer to the address itself,
		// different fields in IPv4 and IPv6:
		if (p->ai_family == AF_INET) { // IPv4
			struct sockaddr_in *ipv4 = (struct sockaddr_in *)p->ai_addr;
			addr = &(ipv4->sin_addr);
			ipver = "IPv4";
		} else { // IPv6
			struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)p->ai_addr;
			addr = &(ipv6->sin6_addr);
			ipver = "IPv6";
		}

		// convert the IP to a string and print it:
		inet_ntop(p->ai_family, addr, ipstr, sizeof ipstr);
		printf("  %s: %s\n", ipver, ipstr);
	}

	freeaddrinfo(res); // free the linked list

	return 0;
}]]></code>

<p>As you see, the code calls <func>getaddrinfo()</func> on whatever you
pass on the command line, that fills out the linked list pointed to by
<var>res</var>, and then we can iterate over the list and print stuff
out or do whatever.</p>

<p>(There's a little bit of ugliness there where we have to dig into the
different types of <type>struct sockaddr</type>s depending on the IP
version.  Sorry about that!  I'm not sure of a better way around
it.)</p>

<p>Sample run!  Everyone loves screenshots:</p>

<screen>$ <com>showip www.example.net</com>
IP addresses for www.example.net:

  IPv4: 192.0.2.88

$ <com>showip ipv6.example.com</com>
IP addresses for ipv6.example.com:

  IPv4: 192.0.2.101
  IPv6: 2001:db8:8c00:22::171</screen>

<p>Now that we have that under control, we'll use the results we get
from <func>getaddrinfo()</func> to pass to other socket functions and,
at long last, get our network connection established!  Keep reading!</p>

</sect2> <!-- getaddrinfo -->

<!-- ======================================================= -->
<!-- socket -->
<!-- ======================================================= -->
<sect2 id="socket">
<title><func>socket()</func>&emdash;Get the File Descriptor!</title>

<p>I guess I can put it off no longer&emdash;I have to talk about the
<ii key="socket()"/><func>socket()</func> system call.  Here's the
breakdown:</p>

<code><![CDATA[#include <sys/types.h>
#include <sys/socket.h>

int socket(int domain, int type, int protocol); ]]>
</code>

<p>But what are these arguments?  They allow you to say what kind of
socket you want (IPv4 or IPv6, stream or datagram, and TCP or UDP).</p>

<p>It used to be people would hardcode these values, and you can
absolutely still do that.  (<param>domain</param> is
<const>PF_INET</const> or <const>PF_INET6</const>, <param>type</param>
is <const>SOCK_STREAM</const> or <const>SOCK_DGRAM</const>, and
<param>protocol</param> can be set to <const>0</const> to choose the
proper protocol for the given <const>type</const>.  Or you can call
<func>getprotobyname()</func> to look up the protocol you want, "tcp" or
"udp".)</p>

<p>(This <const>PF_INET</const> thing is a close relative of the <ii
key="AF_INET"/><const>AF_INET</const> that you can use when initializing
the <var>sin_family</var> field in your <type>struct sockaddr_in</type>.
In fact, they're so closely related that they actually have the same
value, and many programmers will call <func>socket()</func> and pass
<const>AF_INET</const> as the first argument instead of
<func>PF_INET</func>.  Now, get some milk and cookies, because it's
times for a story.  Once upon a time, a long time ago, it was thought
that maybe a address family (what the "AF" in "<const>AF_INET</const>"
stands for) might support several protocols that were referred to by
their protocol family (what the "PF" in "<const>PF_INET</const>" stands
for).  That didn't happen.  And they all lived happily ever after, The
End.  So the most correct thing to do is to use <const>AF_INET</const>
in your <type>struct sockaddr_in</type> and <const>PF_INET</const> in
your call to <func>socket()</func>.)</p>

<p>Anyway, enough of that.  What you really want to do is use the values
from the results of the call to <func>getaddrinfo()</func>, and feed
them into <func>socket()</func> directly like this:</p>

<code><![CDATA[int s;
struct addrinfo *res;

// do the lookup
getaddrinfo("www.example.com", "http", &hints, &res);

s = socket(res->ai_family, res->ai_socktype, res->ai_protocol);]]></code>

<p><func>socket()</func> simply returns to you a <emp>socket
descriptor</emp> that you can use in later system calls, or
<const>-1</const> on error.  The global variable <param>errno</param> is
set to the error's value (see the <func>perror()</func> man page.)</p>

<p>Fine, fine, fine, but what good is this socket?  The answer is
that it's really no good by itself, and you need to read on and make
more system calls for it to make any sense.</p>

</sect2>

<!-- ======================================================= -->
<!-- bind -->
<!-- ======================================================= -->
<sect2 id="bind">
<title><func>bind()</func>&emdash;What port am I on?</title>

<p><ii key="bind()"/>Once you have a socket, you might have to associate
that socket with a <ii key="ports"/>port on your local machine.  (This
is commonly done if you're going to <ii
key="listen()"/><func>listen()</func> for incoming connections on a
specific port&emdash;multiplayer network games do this when they tell
you to "connect to 192.168.5.10 port 3490".)  The port number is used by
the kernel to match an incoming packet to a certain process's socket
descriptor.  If you're going to only be doing a <ii
key="connect()"/><func>connect()</func> (because you're the client, not
the server), this is probably be unnecessary.  Read it anyway, just for
kicks.</p>

<p>Here is the synopsis for the <func>bind()</func> system
call:</p>

<code><![CDATA[#include <sys/types.h>
#include <sys/socket.h>

int bind(int sockfd, struct sockaddr *my_addr, int addrlen);]]>
</code>

<p><param>sockfd</param> is the socket file descriptor returned by
<func>socket()</func>.  <param>my_addr</param> is a pointer to a
<type>struct sockaddr</type> that contains information about your
address, namely, port and <ii key="IP"/>IP address.
<param>addrlen</param> is the length in bytes of that address.</p>

<p>Whew.  That's a bit to absorb in one chunk.  Let's have an
example that binds the socket to the host the program is running on,
port 3490:</p>

<code><![CDATA[struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

getaddrinfo(NULL, "3490", &hints, &res);

// make a socket:

sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

// bind it to the port we passed in to getaddrinfo():

bind(sockfd, res->ai_addr, res->ai_addrlen);]]></code>

<p>By using the <const>AI_PASSIVE</const> flag, I'm telling the program
to bind to the IP of the host it's running on.  If you want to bind to a
specific local IP address, drop the <const>AI_PASSIVE</const> and put an
IP address in for the first argument to <func>getaddrinfo()</func>.</p>

<p><func>bind()</func> also returns <const>-1</const>
on error and sets <param>errno</param> to the error's
value.</p>

<p>Lots of old code manually packs the <type>struct sockaddr_in</type>
before calling <func>bind()</func>.  Obviously this is IPv4-specific,
but there's really nothing stopping you from doing the same thing with
IPv6, except that using <func>getaddrinfo()</func> is going to be
easier, generally.  Anyway, the old code looks something like this:</p>

<code><![CDATA[// !!! THIS IS THE OLD WAY !!!

int sockfd;
struct sockaddr_in my_addr;

sockfd = socket(PF_INET, SOCK_STREAM, 0);

my_addr.sin_family = AF_INET;
my_addr.sin_port = htons(MYPORT);     // short, network byte order
my_addr.sin_addr.s_addr = inet_addr("10.12.110.57");
memset(my_addr.sin_zero, '\0', sizeof my_addr.sin_zero);

bind(sockfd, (struct sockaddr *)&my_addr, sizeof my_addr);]]></code>

<p>In the above code, you could also assign <const>INADDR_ANY</const> to
the <var>s_addr</var> field if you wanted to bind to your local IP
address (like the <const>AI_PASSIVE</const> flag, above.)  The IPv6
version of <const>INADDR_ANY</const> is a global variable
<var>in6addr_any</var> that is assigned into the <var>sin6_addr</var>
field of your <type>struct sockaddr_in6</type>.  (There is also a macro
<const>IN6ADDR_ANY_INIT</const> that you can use in a variable
initializer.)</p>

<p>Another thing to watch out for when calling <func>bind()</func>:
don't go underboard with your port numbers.  <ii key="ports"/>All ports
below 1024 are RESERVED (unless you're the superuser)!  You can have any
port number above that, right up to 65535 (provided they aren't already
being used by another program.)</p>

<p>Sometimes, you might notice, you try to rerun a server and
<func>bind()</func> fails, claiming <ii key="Address already in use"/>"Address
already in use." What does that mean?  Well, a little bit of a socket
that was connected is still hanging around in the kernel, and it's
hogging the port.  You can either wait for it to clear (a minute or so),
or add code to your program allowing it to reuse the port, like
this:</p>

<code><ii key="setsockopt()"/><ii key="SO_REUSEADDR"/><![CDATA[int yes=1;
//char yes='1'; // Solaris people use this

// lose the pesky "Address already in use" error message
if (setsockopt(listener,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(int)) == -1) {
    perror("setsockopt");
    exit(1);
} ]]>
</code>

<p><ii key="bind();implicit"/>One small extra final note about
<func>bind()</func>: there are times when you won't absolutely have to
call it.  If you are <ii key="connect()"/><func>connect()</func>ing to a
remote machine and you don't care what your local port is (as is the
case with <com>telnet</com> where you only care about the remote port),
you can simply call <func>connect()</func>, it'll check to see if the
socket is unbound, and will <func>bind()</func> it to an unused local
port if necessary.</p>

</sect2>

<!-- ======================================================= -->
<!-- connect -->
<!-- ======================================================= -->
<sect2 id="connect">
<title><func>connect()</func>&emdash;Hey, you!</title>

<p><ii key="connect()"/>Let's just pretend for a few minutes that you're
a telnet application.  Your user commands you (just like in the movie
<ii key="TRON"/><emp>TRON</emp>) to get a socket file descriptor.  You
comply and call <func>socket()</func>.  Next, the user tells you to
connect to "<tt>10.12.110.57</tt>" on port "<tt>23</tt>" (the standard
telnet port.)  Yow!  What do you do now?</p>

<p>Lucky for you, program, you're now perusing the section on
<func>connect()</func>&emdash;how to connect to a remote host.  So read
furiously onward!  No time to lose!</p>

<p>The <func>connect()</func> call is as follows:</p>

<code><![CDATA[#include <sys/types.h>
#include <sys/socket.h>

int connect(int sockfd, struct sockaddr *serv_addr, int addrlen); ]]>
</code>

<p><param>sockfd</param> is our friendly neighborhood socket
file descriptor, as returned by the <func>socket()</func> call,
<param>serv_addr</param> is a <type>struct sockaddr</type>
containing the destination port and IP address, and
<param>addrlen</param> is the length in bytes of the server address
structure.</p>

<p>All of this information can be gleaned from the results of the
<func>getaddrinfo()</func> call, which rocks.</p>

<p>Is this starting to make more sense?  I can't hear you from here, so
I'll just have to hope that it is.  Let's have an example where we make
a socket connection to "www.example.com", port 3490:</p>

<code><![CDATA[struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;
hints.ai_socktype = SOCK_STREAM;

getaddrinfo("www.example.com", "3490", &hints, &res);

// make a socket:

sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

// connect!

connect(sockfd, res->ai_addr, res->ai_addrlen);]]></code>

<p>Again, old-school programs filled out their own <type>struct
sockaddr_in</type>s to pass to <func>connect()</func>.  You can do that
if you want to.  See the similar note in the <link
dest="bind"><func>bind()</func> section</link>, above</p>

<p>Be sure to check the return value from
<func>connect()</func>&emdash;it'll return <const>-1</const> on error
and set the variable <param>errno</param>.</p>

<p><ii key="bind();implicit"/>Also, notice that we didn't call
<func>bind()</func>.  Basically, we don't care about our local port
number; we only care where we're going (the remote port).  The kernel
will choose a local port for us, and the site we connect to will
automatically get this information from us.  No worries.</p>

</sect2>

<!-- ======================================================= -->
<!-- listen -->
<!-- ======================================================= -->
<sect2 id="listen">
<title><func>listen()</func>&emdash;Will somebody please call
me?</title>

<p><ii key="listen()"/>Ok, time for a change of pace.  What if you don't
want to connect to a remote host.  Say, just for kicks, that you want to
wait for incoming connections and handle them in some way.  The process
is two step: first you <func>listen()</func>, then you
<ii key="accept()"/><func>accept()</func> (see below.)</p>

<p>The listen call is fairly simple, but requires a bit of
explanation:</p>

<code><![CDATA[int listen(int sockfd, int backlog); ]]>
</code>

<p><param>sockfd</param> is the usual socket file descriptor
from the <func>socket()</func> system call.
<ii key="listen();backlog"/><param>backlog</param> is the number of
connections allowed on the incoming queue.  What does that mean?  Well,
incoming connections are going to wait in this queue until you
<func>accept()</func> them (see below) and this is the limit on how many
can queue up.  Most systems silently limit this number to about 20; you
can probably get away with setting it to <const>5</const> or
<const>10</const>.</p>

<p>Again, as per usual, <func>listen()</func> returns
<const>-1</const> and sets <param>errno</param> on
error.</p>

<p>Well, as you can probably imagine, we need to call
<func>bind()</func> before we call <func>listen()</func> so that the
server is running on a specific port.  (You have to be able to tell your
buddies which port to connect to!)  So if you're going to be listening
for incoming connections, the sequence of system calls you'll make
is:</p>

<code><![CDATA[getaddrinfo();
socket();
bind();
listen();
/* accept() goes here */ ]]>
</code>

<p>I'll just leave that in the place of sample code, since it's
fairly self-explanatory.  (The code in the <func>accept()</func>
section, below, is more complete.)  The really tricky part of this whole
sha-bang is the call to <func>accept()</func>.</p>

</sect2>

<!-- ======================================================= -->
<!-- accept -->
<!-- ======================================================= -->
<sect2 id="accept">
<title><func>accept()</func>&emdash;"Thank you for calling port
3490."</title>

<p><ii key="accept()"/>Get ready&emdash;the <func>accept()</func> call
is kinda weird!  What's going to happen is this: someone far far away
will try to <func>connect()</func> to your machine on a port that you
are <func>listen()</func>ing on.  Their connection will be queued up
waiting to be <func>accept()</func>ed.  You call <func>accept()</func>
and you tell it to get the pending connection.  It'll return to you a
<emp>brand new socket file descriptor</emp> to use for this single
connection!  That's right, suddenly you have <emp>two socket file
descriptors</emp> for the price of one!  The original one is still
listening for more new connections, and the newly created one is finally
ready to <func>send()</func> and <func>recv()</func>.  We're there! </p>

<p>The call is as follows:</p>

<code><![CDATA[#include <sys/types.h>
#include <sys/socket.h>

int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); ]]>
</code>

<p><param>sockfd</param> is the
<func>listen()</func>ing socket descriptor.  Easy enough.
<param>addr</param> will usually be a pointer to a local
<type>struct sockaddr_storage</type>.  This is where the information
about the incoming connection will go (and with it you can determine
which host is calling you from which port).  <param>addrlen</param> is a
local integer variable that should be set to <tt>sizeof(struct
sockaddr_storage)</tt> before its address is passed to
<func>accept()</func>.  <func>accept()</func> will not put more than
that many bytes into <param>addr</param>.  If it puts fewer in, it'll
change the value of <param>addrlen</param> to reflect that.</p>

<p>Guess what?  <func>accept()</func> returns <const>-1</const> and sets
<param>errno</param> if an error occurs.  Betcha didn't figure that.</p>

<p>Like before, this is a bunch to absorb in one chunk, so here's a
sample code fragment for your perusal:</p>

<code><![CDATA[#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define MYPORT "3490"  // the port users will be connecting to
#define BACKLOG 10     // how many pending connections queue will hold

int main(void)
{
	struct sockaddr_storage their_addr;
	socklen_t addr_size;
	struct addrinfo hints, *res;
	int sockfd, new_fd;

    // !! don't forget your error checking for these calls !!

	// first, load up address structs with getaddrinfo():

	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

	getaddrinfo(NULL, MYPORT, &hints, &res);

	// make a socket, bind it, and listen on it:

	sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
	bind(sockfd, res->ai_addr, res->ai_addrlen);
    listen(sockfd, BACKLOG);

	// now accept an incoming connection:

    addr_size = sizeof their_addr;
    new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &addr_size);

	// ready to communicate on socket descriptor new_fd!
	.
	.
	.]]></code>

<p>Again, note that we will use the socket descriptor
<param>new_fd</param> for all <func>send()</func> and
<func>recv()</func> calls.  If you're only getting one single connection
ever, you can <func>close()</func> the listening <param>sockfd</param>
in order to prevent more incoming connections on the same port, if you
so desire.</p>

</sect2>

<!-- ======================================================= -->
<!-- sendrecv -->
<!-- ======================================================= -->
<sect2 id="sendrecv">
<title><func>send()</func> and <func>recv()</func>&emdash;Talk to me,
baby!</title>

<p>These two functions are for communicating over stream sockets or
connected datagram sockets.  If you want to use regular unconnected
datagram sockets, you'll need to see the section on <link
dest="sendtorecv"><func>sendto()</func> and
<func>recvfrom()</func></link>, below.</p>

<p><ii key="send()"/>The <func>send()</func> call:</p>

<code><![CDATA[int send(int sockfd, const void *msg, int len, int flags); ]]>
</code>

<p><param>sockfd</param> is the socket descriptor you want to
send data to (whether it's the one returned by
<func>socket()</func> or the one you got with
<func>accept()</func>.) <param>msg</param> is a pointer
to the data you want to send, and <param>len</param> is the
length of that data in bytes.  Just set <param>flags</param> to
<const>0</const>.  (See the <func>send()</func> man page
for more information concerning flags.)</p>

<p>Some sample code might be:</p>

<code><![CDATA[char *msg = "Beej was here!";
int len, bytes_sent;
.
.
.
len = strlen(msg);
bytes_sent = send(sockfd, msg, len, 0);
.
.
. ]]>
</code>

<p><func>send()</func> returns the number of bytes actually
sent out&emdash;<emp>this might be less than the number you told it to
send!</emp>  See, sometimes you tell it to send a whole gob of data and
it just can't handle it.  It'll fire off as much of the data as it can,
and trust you to send the rest later.  Remember, if the value returned
by <func>send()</func> doesn't match the value in <param>len</param>,
it's up to you to send the rest of the string.  The good news is this:
if the packet is small (less than 1K or so) it will <emp>probably</emp>
manage to send the whole thing all in one go.  Again, <const>-1</const>
is returned on error, and <param>errno</param> is set to the error
number.</p>

<p><ii key="recv()"/>The <func>recv()</func> call is similar in many
respects:</p>

<code><![CDATA[int recv(int sockfd, void *buf, int len, int flags);]]></code>

<p><param>sockfd</param> is the socket descriptor to read
from, <param>buf</param> is the buffer to read the information
into, <param>len</param> is the maximum length of the buffer,
and <param>flags</param> can again be set to
<const>0</const>.  (See the <func>recv()</func> man page
for flag information.)</p>

<p><func>recv()</func> returns the number of bytes actually
read into the buffer, or <const>-1</const> on error (with
<param>errno</param> set, accordingly.)</p>

<p>Wait!  <func>recv()</func> can return
<const>0</const>.  This can mean only one thing: the remote side
has closed the connection on you!  A return value of
<const>0</const> is <func>recv()</func>'s way of letting
you know this has occurred.</p>

<p>There, that was easy, wasn't it?  You can now pass data back and
forth on stream sockets!  Whee!  You're a Unix Network
Programmer!</p>

</sect2>

<!-- ======================================================= -->
<!-- sendtorecv -->
<!-- ======================================================= -->
<sect2 id="sendtorecv">
<title><func>sendto()</func> and
<func>recvfrom()</func>&emdash;Talk to me, DGRAM-style</title>

<p><ii key="SOCK_DGRAM"/>"This is all fine and dandy," I hear you
saying, "but where does this leave me with unconnected datagram
sockets?"  No problemo, amigo.  We have just the thing.</p>

<p>Since datagram sockets aren't connected to a remote host, guess which
piece of information we need to give before we send a packet?  That's
right!  The destination address!  Here's the scoop:</p>

<code><![CDATA[int sendto(int sockfd, const void *msg, int len, unsigned int flags,
           const struct sockaddr *to, socklen_t tolen); ]]></code>

<p>As you can see, this call is basically the same as the call to
<func>send()</func> with the addition of two other pieces of
information.  <param>to</param> is a pointer to a <type>struct
sockaddr</type> (which will probably be another <type>struct
sockaddr_in</type> or <type>struct sockaddr_in6</type> or <type>struct
sockaddr_storage</type> that you cast at the last minute) which contains
the destination <ii key="IP"/>IP address and <ii key="port"/>port.
<param>tolen</param>, an <type>int</type> deep-down, can simply be set
to <tt>sizeof *to</tt> or <tt>sizeof(struct sockaddr_storage)</tt>.</p>

<p>To get your hands on the destination address structure, you'll
probably either get it from <func>getaddrinfo()</func>, or from
<func>recvfrom()</func>, below, or you'll fill it out by hand.</p>

<p>Just like with <func>send()</func>,
<func>sendto()</func> returns the number of bytes actually sent
(which, again, might be less than the number of bytes you told it to
send!), or <const>-1</const> on error.</p>

<p>Equally similar are <func>recv()</func> and
<ii key="recvfrom()"/><func>recvfrom()</func>.  The synopsis of
<func>recvfrom()</func> is:</p>

<code><![CDATA[int recvfrom(int sockfd, void *buf, int len, unsigned int flags,
             struct sockaddr *from, int *fromlen); ]]></code>

<p>Again, this is just like <func>recv()</func> with the
addition of a couple fields.  <param>from</param> is a pointer to a
local <ii key="struct sockaddr"/><type>struct sockaddr_storage</type>
that will be filled with the IP address and port of the originating
machine.  <param>fromlen</param> is a pointer to a local
<type>int</type> that should be initialized to <tt>sizeof *from</tt> or
<tt>sizeof(struct sockaddr_storage)</tt>.  When the function returns,
<param>fromlen</param> will contain the length of the address actually
stored in <param>from</param>.</p>

<p><func>recvfrom()</func> returns the number of bytes
received, or <const>-1</const> on error (with
<param>errno</param> set accordingly.)</p>

<p>So, here's a question: why do we use <type>struct
sockaddr_storage</type> as the socket type?  Why not <type>struct
sockaddr_in</type>?  Because, you see, we want to not tie ourselves down
to IPv4 or IPv6.  So we use the generic <type>struct
sockaddr_storage</type> which we know will be big enough for either.</p>

<p>(So... here's another question: why isn't <type>struct
sockaddr</type> itself big enough for any address?  We even cast the
general-purpose <type>struct sockaddr_storage</type> to the
general-purpose <type>struct sockaddr</type>!  Seems extraneous and
redundant, huh.  The answer is, it just isn't big enough, and I'd guess
that changing it at this point would be Problematic.  So they made a new
one.)</p>

<p>Remember, if you <ii
key="connect();on datagram sockets"/><func>connect()</func> a datagram
socket, you can then simply use <func>send()</func> and
<func>recv()</func> for all your transactions.  The socket itself is
still a datagram socket and the packets still use UDP, but the socket
interface will automatically add the destination and source information
for you.</p>

</sect2>

<!-- ======================================================= -->
<!-- closedown -->
<!-- ======================================================= -->

<sect2 id="closedown">

<title><func>close()</func> and
<func>shutdown()</func>&emdash;Get outta my face!</title>

<p>Whew!  You've been <func>send()</func>ing and
<func>recv()</func>ing data all day long, and you've had it.
You're ready to close the connection on your socket descriptor.  This is
easy.  You can just use the regular Unix file descriptor
<ii key="close()"/><func>close()</func> function:</p>

<code><![CDATA[close(sockfd); ]]>
</code>

<p>This will prevent any more reads and writes to the socket.  Anyone
attempting to read or write the socket on the remote end will receive an
error.</p>

<p>Just in case you want a little more control over how the socket
closes, you can use the <ii key="shutdown()"/><func>shutdown()</func>
function.  It allows you to cut off communication in a certain
direction, or both ways (just like <func>close()</func> does.)
Synopsis:</p>

<code><![CDATA[int shutdown(int sockfd, int how); ]]>
</code>

<p><param>sockfd</param> is the socket file descriptor you
want to shutdown, and <param>how</param> is one of the
following:</p>

<p><table border="0" width="80%">
<tr><td width="10%"><p><const>0</const></p></td><td width="88%"><p>Further receives are disallowed</p></td></tr>
<tr><td><p><const>1</const></p></td><td><p>Further sends are disallowed</p></td></tr>
<tr><td><p><const>2</const></p></td><td><p>Further sends and receives are disallowed (like <func>close()</func>)</p></td></tr>
</table></p>

<p><func>shutdown()</func> returns <const>0</const> on
success, and <const>-1</const> on error (with
<param>errno</param> set accordingly.)</p>

<p>If you deign to use <func>shutdown()</func> on unconnected
datagram sockets, it will simply make the socket unavailable for further
<func>send()</func> and <func>recv()</func> calls
(remember that you can use these if you <func>connect()</func>
your datagram socket.)</p>

<p>It's important to note that <func>shutdown()</func>
doesn't actually close the file descriptor&emdash;it just changes its
usability.  To free a socket descriptor, you need to use
<func>close()</func>.</p>

<p>Nothing to it.</p>

<p>(Except to remember that if you're using <ii key="Windows"/>Windows
and <ii key="Winsock"/>Winsock that you should call <ii
key="closesocket()"/><func>closesocket()</func> instead of
<func>close()</func>.)</p>

</sect2>

<!-- ======================================================= -->
<!-- getpeername -->
<!-- ======================================================= -->

<sect2 id="getpeername">
<title><func>getpeername()</func>&emdash;Who are you?</title>

<p><ii key="getpeername()"/>This function is so easy.</p>

<p>It's so easy, I almost didn't give it it's own section.  But here
it is anyway.</p>

<p>The function <func>getpeername()</func> will tell you who is at the other end
of a connected stream socket.  The synopsis:</p>

<code><![CDATA[#include <sys/socket.h>

int getpeername(int sockfd, struct sockaddr *addr, int *addrlen); ]]>
</code>

<p><param>sockfd</param> is the descriptor of the connected
stream socket, <param>addr</param> is a pointer to a
<type>struct sockaddr</type> (or a <type>struct sockaddr_in</type>) that
will hold the information about the other side of the connection, and
<param>addrlen</param> is a pointer to an <type>int</type>, that
should be initialized to <tt>sizeof *addr</tt> or <tt>sizeof(struct
sockaddr)</tt>.</p>

<p>The function returns <const>-1</const> on error and sets
<param>errno</param> accordingly.</p>

<p>Once you have their address, you can use <ii
key="inet_ntop()"/><func>inet_ntop()</func>, <ii
key="getnameinfo()"/><func>getnameinfo()</func>, or <ii
key="gethostbyaddr()"/><func>gethostbyaddr()</func> to print or get more
information.  No, you can't get their login name.  (Ok, ok.  If the
other computer is running an ident daemon, this is possible.  This,
however, is beyond the scope of this document.  Check out <ulink
url="&rfcpre;1413&rfcpost;">RFC 1413</ulink> for more info.)</p>

</sect2>

<!-- ======================================================= -->
<!-- gethostname -->
<!-- ======================================================= -->

<sect2 id="gethostname">
<title><func>gethostname()</func>&emdash;Who am I?</title>

<p><ii key="gethostname()"/>Even easier than <func>getpeername()</func>
is the function <func>gethostname()</func>.  It returns the name of the
computer that your program is running on.  The name can then be used by
<ii key="gethostbyname()"/><func>gethostbyname()</func>, below, to
determine the <ii key="IP"/>IP address of your local machine.</p>

<p>What could be more fun?  I could think of a few things, but they
don't pertain to socket programming.  Anyway, here's the
breakdown:</p>

<code><![CDATA[#include <unistd.h>

int gethostname(char *hostname, size_t size); ]]>
</code>

<p>The arguments are simple: <param>hostname</param> is a
pointer to an array of chars that will contain the hostname upon the
function's return, and <param>size</param> is the length in
bytes of the <param>hostname</param> array.</p>

<p>The function returns <const>0</const> on successful
completion, and <const>-1</const> on error, setting
<param>errno</param> as usual.</p>

</sect2>

</sect1>  <!-- syscalls -->

<!-- ======================================================= -->
<!-- clientserver -->
<!-- ======================================================= -->

<sect1 id="clientserver">
<title>Client-Server Background</title>

<p><ii key="client/server"/>It's a client-server world, baby.  Just
about everything on the network deals with client processes talking to
server processes and vice-versa.  Take <com>telnet</com>, for instance.
When you connect to a remote host on port 23 with telnet (the client), a
program on that host (called <com>telnetd</com>, the server) springs to
life.  It handles the incoming telnet connection, sets you up with a
login prompt, etc.</p>

<figure id="figure2">
	<image file="cs-120-3.334.png" printfile="cs-300-3.334.png" printwidth="3.334in" alt="[Client-Server Interaction Diagram]"/>
	<title>Client-Server Interaction.</title>
</figure>

<p>The exchange of information between client and server is
summarized in <link dest="figure2">the above diagram</link>.</p>

<p>Note that the client-server pair can speak
<const>SOCK_STREAM</const>, <const>SOCK_DGRAM</const>, or
anything else (as long as they're speaking the same thing.)  Some good
examples of client-server pairs are
<com>telnet</com>/<com>telnetd</com>,
<com>ftp</com>/<com>ftpd</com>, or
<com>Firefox</com>/<com>Apache</com>.  Every time you use
<com>ftp</com>, there's a remote program,
<com>ftpd</com>, that serves you.</p>

<p>Often, there will only be one server on a machine, and that server
will handle multiple clients using <ii
key="fork()"/><func>fork()</func>.  The basic routine is: server will
wait for a connection, <func>accept()</func> it, and <func>fork()</func>
a child process to handle it.  This is what our sample server does in
the next section.</p>

<!-- ======================================================= -->
<!-- simpleserver -->
<!-- ======================================================= -->

<sect2 id="simpleserver">
<title>A Simple Stream Server</title>

<p><ii key="server;stream"/>All this server does is send the string
"<tt>Hello, World!\n</tt>" out over a stream connection.  All you need
to do to test this server is run it in one window, and telnet to it from
another with:</p>

<screen>$ telnet remotehostname 3490</screen>

<p>where <tt>remotehostname</tt> is the name of the machine you're
running it on.</p>

<p><ulink url="&samplepre;server.c">The server code</ulink>:</p>

<code><![CDATA[/*
** server.c -- a stream socket server demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>

#define PORT "3490"  // the port users will be connecting to

#define BACKLOG 10	 // how many pending connections queue will hold

void sigchld_handler(int s)
{
	while(waitpid(-1, NULL, WNOHANG) > 0);
}

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
	if (sa->sa_family == AF_INET) {
		return &(((struct sockaddr_in*)sa)->sin_addr);
	}

	return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

int main(void)
{
	int sockfd, new_fd;  // listen on sock_fd, new connection on new_fd
	struct addrinfo hints, *servinfo, *p;
	struct sockaddr_storage their_addr; // connector's address information
	socklen_t sin_size;
	struct sigaction sa;
	int yes=1;
	char s[INET6_ADDRSTRLEN];
	int rv;

	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE; // use my IP

	if ((rv = getaddrinfo(NULL, PORT, &hints, &servinfo)) == -1) {
		fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
		return 1;
	}

	// loop through all the results and bind to the first we can
	for(p = servinfo; p != NULL; p = p->ai_next) {
		if ((sockfd = socket(p->ai_family, p->ai_socktype,
				p->ai_protocol)) == -1) {
			perror("server: socket");
			continue;
		}

		if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &yes,
				sizeof(int)) == -1) {
			perror("setsockopt");
			exit(1);
		}

		if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
			close(sockfd);
			perror("server: bind");
			continue;
		}

		break;
	}

	if (p == NULL)  {
		fprintf(stderr, "server: failed to bind\n");
		return 2;
	}

	freeaddrinfo(servinfo); // all done with this structure

	if (listen(sockfd, BACKLOG) == -1) {
		perror("listen");
		exit(1);
	}

	sa.sa_handler = sigchld_handler; // reap all dead processes
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		perror("sigaction");
		exit(1);
	}

	printf("server: waiting for connections...\n");

	while(1) {  // main accept() loop
		sin_size = sizeof their_addr;
		new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &sin_size);
		if (new_fd == -1) {
			perror("accept");
			continue;
		}

		inet_ntop(their_addr.ss_family,
			get_in_addr((struct sockaddr *)&their_addr),
			s, sizeof s);
		printf("server: got connection from %s\n", s);

		if (!fork()) { // this is the child process
			close(sockfd); // child doesn't need the listener
			if (send(new_fd, "Hello, world!", 13, 0) == -1)
				perror("send");
			close(new_fd);
			exit(0);
		}
		close(new_fd);  // parent doesn't need this
	}

	return 0;
}]]></code>

<p>In case you're curious, I have the code in one big
<func>main()</func> function for (I feel) syntactic clarity.
Feel free to split it into smaller functions if it makes you feel
better.</p>

<p>(Also, this whole <ii key="sigaction()"/><func>sigaction()</func>
thing might be new to you&emdash;that's ok.  The code that's there is
responsible for reaping <ii key="zombie process"/>zombie processes that
appear as the <func>fork()</func>ed child processes exit.  If you make
lots of zombies and don't reap them, your system administrator will
become agitated.)</p>

<p>You can get the data from this server by using the client
listed in the next section.</p>

</sect2>

<!-- ======================================================= -->
<!-- simpleclient -->
<!-- ======================================================= -->

<sect2 id="simpleclient">
<title>A Simple Stream Client</title>

<p><ii key="client;stream"/>This guy's even easier than the server.  All
this client does is connect to the host you specify on the command line,
port 3490.  It gets the string that the server sends.</p>

<p><ulink url="&samplepre;client.c">The client
source</ulink>:</p>

<code><![CDATA[/*
** client.c -- a stream socket client demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>

#include <arpa/inet.h>

#define PORT "3490" // the port client will be connecting to 

#define MAXDATASIZE 100 // max number of bytes we can get at once 

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
	if (sa->sa_family == AF_INET) {
		return &(((struct sockaddr_in*)sa)->sin_addr);
	}

	return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

int main(int argc, char *argv[])
{
	int sockfd, numbytes;  
	char buf[MAXDATASIZE];
	struct addrinfo hints, *servinfo, *p;
	int rv;
	char s[INET6_ADDRSTRLEN];

	if (argc != 2) {
	    fprintf(stderr,"usage: client hostname\n");
	    exit(1);
	}

	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;

	if ((rv = getaddrinfo(argv[1], PORT, &hints, &servinfo)) != 0) {
		fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
		return 1;
	}

	// loop through all the results and connect to the first we can
	for(p = servinfo; p != NULL; p = p->ai_next) {
		if ((sockfd = socket(p->ai_family, p->ai_socktype,
				p->ai_protocol)) == -1) {
			perror("client: socket");
			continue;
		}

		if (connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
			close(sockfd);
			perror("client: connect");
			continue;
		}

		break;
	}

	if (p == NULL) {
		fprintf(stderr, "client: failed to connect\n");
		return 2;
	}

	inet_ntop(p->ai_family, get_in_addr((struct sockaddr *)p->ai_addr),
			s, sizeof s);
	printf("client: connecting to %s\n", s);

	freeaddrinfo(servinfo); // all done with this structure

	if ((numbytes = recv(sockfd, buf, MAXDATASIZE-1, 0)) == -1) {
	    perror("recv");
	    exit(1);
	}

	buf[numbytes] = '\0';

	printf("client: received '%s'\n",buf);

	close(sockfd);

	return 0;
}]]></code>

<p>Notice that if you don't run the server before you run the client,
<func>connect()</func> returns
<ii key="Connection refused"/>"Connection refused".  Very
useful.</p>

</sect2>

<!-- ======================================================= -->
<!-- datagram -->
<!-- ======================================================= -->

<sect2 id="datagram">
<title>Datagram Sockets</title>

<p>We've already covered the basics of UDP datagram sockets with our
discussion of <func>sendto()</func> and <func>recvfrom()</func>, above,
so I'll just present a couple of sample programs: <file>talker.c</file>
and <file>listener.c</file>.</p>

<p><ii key="server;datagram"/><com>listener</com> sits on a machine
waiting for an incoming packet on port 4950.  <com>talker</com> sends a
packet to that port, on the specified machine, that contains whatever
the user enters on the command line.</p>

<p>Here is the <ulink url="&samplepre;listener.c">source for
<file>listener.c</file></ulink>:</p>

<code><![CDATA[/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#define MYPORT "4950"	// the port users will be connecting to

#define MAXBUFLEN 100

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
	if (sa->sa_family == AF_INET) {
		return &(((struct sockaddr_in*)sa)->sin_addr);
	}

	return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

int main(void)
{
	int sockfd;
	struct addrinfo hints, *servinfo, *p;
	int rv;
	int numbytes;
	struct sockaddr_storage their_addr;
	char buf[MAXBUFLEN];
	size_t addr_len;
	char s[INET6_ADDRSTRLEN];

	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_DGRAM;
	hints.ai_flags = AI_PASSIVE; // use my IP

	if ((rv = getaddrinfo(NULL, MYPORT, &hints, &servinfo)) == -1) {
		fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
		return 1;
	}

	// loop through all the results and bind to the first we can
	for(p = servinfo; p != NULL; p = p->ai_next) {
		if ((sockfd = socket(p->ai_family, p->ai_socktype,
				p->ai_protocol)) == -1) {
			perror("listener: socket");
			continue;
		}

		if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
			close(sockfd);
			perror("listener: bind");
			continue;
		}

		break;
	}

	if (p == NULL) {
		fprintf(stderr, "listener: failed to bind socket\n");
		return 2;
	}

	freeaddrinfo(servinfo);

	printf("listener: waiting to recvfrom...\n");

	addr_len = sizeof their_addr;
	if ((numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
		(struct sockaddr *)&their_addr, &addr_len)) == -1) {
		perror("recvfrom");
		exit(1);
	}

	printf("listener: got packet from %s\n",
		inet_ntop(their_addr.ss_family,
			get_in_addr((struct sockaddr *)&their_addr),
			s, sizeof s));
	printf("listener: packet is %d bytes long\n", numbytes);
	buf[numbytes] = '\0';
	printf("listener: packet contains \"%s\"\n", buf);

	close(sockfd);

	return 0;
}]]></code>

<p>Notice that in our call to <func>getaddrinfo()</func> we're finally
using <const>SOCK_DGRAM</const>.  Also, note that there's no need to
<func>listen()</func> or <func>accept()</func>.  This is one of the
perks of using unconnected datagram sockets!</p>

<p><ii key="client;datagram"/>Next comes the <ulink
url="&samplepre;talker.c">source for <file>talker.c</file></ulink>:</p>

<!-- BEGIN talker.c -->
<code><![CDATA[/*
** talker.c -- a datagram "client" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#define SERVERPORT "4950"	// the port users will be connecting to

int main(int argc, char *argv[])
{
	int sockfd;
	struct addrinfo hints, *servinfo, *p;
	int rv;
	int numbytes;

	if (argc != 3) {
		fprintf(stderr,"usage: talker hostname message\n");
		exit(1);
	}

	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_DGRAM;

	if ((rv = getaddrinfo(argv[1], SERVERPORT, &hints, &servinfo)) != 0) {
		fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
		return 1;
	}

	// loop through all the results and make a socket
	for(p = servinfo; p != NULL; p = p->ai_next) {
		if ((sockfd = socket(p->ai_family, p->ai_socktype,
				p->ai_protocol)) == -1) {
			perror("talker: socket");
			continue;
		}

		break;
	}

	if (p == NULL) {
		fprintf(stderr, "talker: failed to bind socket\n");
		return 2;
	}

	if ((numbytes = sendto(sockfd, argv[2], strlen(argv[2]), 0,
			 p->ai_addr, p->ai_addrlen)) == -1) {
		perror("talker: sendto");
		exit(1);
	}

	freeaddrinfo(servinfo);

	printf("talker: sent %d bytes to %s\n", numbytes, argv[1]);
	close(sockfd);

	return 0;
}]]></code>
<!-- END talker.c -->

<p>And that's all there is to it!  Run <com>listener</com> on some
machine, then run <com>talker</com> on another.  Watch them communicate!
Fun G-rated excitement for the entire nuclear family!</p>

<p>You don't even have to run the server this time!  You can run
<com>talker</com> by itself, and it just happily fires packets off into
the ether where they disappear if no one is ready with a
<func>recvfrom()</func> on the other side.  Remember: data sent using
UDP datagram sockets isn't guaranteed to arrive!</p>

<p>Except for one more tiny detail that I've mentioned many times in the
past: <ii key="connect();on datagram sockets"/>connected datagram
sockets.  I need to talk about this here, since we're in the datagram
section of the document.  Let's say that <com>talker</com> calls
<func>connect()</func> and specifies the <com>listener</com>'s address.
From that point on, <com>talker</com> may only sent to and receive from
the address specified by <func>connect()</func>.  For this reason, you
don't have to use <func>sendto()</func> and <func>recvfrom()</func>; you
can simply use <func>send()</func> and <func>recv()</func>.</p>

</sect2>

</sect1> <!-- clientserver -->

<!-- ======================================================= -->
<!-- advanced -->
<!-- ======================================================= -->

<sect1 id="advanced">
<title>Slightly Advanced Techniques</title>

<p>These aren't <emp>really</emp> advanced, but they're
getting out of the more basic levels we've already covered.  In fact, if
you've gotten this far, you should consider yourself fairly accomplished
in the basics of Unix network programming!  Congratulations!</p>

<p>So here we go into the brave new world of some of the more
esoteric things you might want to learn about sockets.  Have at
it!</p>

<!-- ======================================================= -->
<!-- blocking -->
<!-- ======================================================= -->

<sect2 id="blocking">
<title>Blocking</title>

<p><ii key="blocking"/>Blocking.  You've heard about it&emdash;now what
the heck is it?  In a nutshell, "block" is techie jargon for "sleep".
You probably noticed that when you run <com>listener</com>, above, it
just sits there until a packet arrives.  What happened is that it called
<func>recvfrom()</func>, there was no data, and so
<func>recvfrom()</func> is said to "block" (that is, sleep there) until
some data arrives.</p>

<p>Lots of functions block.  <func>accept()</func> blocks.
All the <func>recv()</func> functions block.  The reason they
can do this is because they're allowed to.  When you first create the
socket descriptor with <func>socket()</func>, the kernel sets it
to blocking.  <ii key="non-blocking sockets"/>If you don't want a socket to be blocking, you have to
make a call to <ii key="fcntl()"/><func>fcntl()</func>:</p>

<code><![CDATA[#include <unistd.h>
#include <fcntl.h>
.
.
.
sockfd = socket(PF_INET, SOCK_STREAM, 0);
fcntl(sockfd, F_SETFL, O_NONBLOCK);
.
.
. ]]>
</code>

<p>By setting a socket to non-blocking, you can effectively "poll"
the socket for information.  If you try to read from a non-blocking
socket and there's no data there, it's not allowed to block&emdash;it
will return <const>-1</const> and <param>errno</param> will be set to
<ii key="EWOULDBLOCK"/><const>EWOULDBLOCK</const>.</p>

<p>Generally speaking, however, this type of polling is a bad idea.
If you put your program in a busy-wait looking for data on the socket,
you'll suck up CPU time like it was going out of style.  A more elegant
solution for checking to see if there's data waiting to be read comes in
the following section on <ii key="select()"/><func>select()</func>.</p>

</sect2>

<!-- ======================================================= -->
<!-- select -->
<!-- ======================================================= -->

<sect2 id="select">
<title><func>select()</func>&emdash;Synchronous I/O Multiplexing</title>

<p><ii key="select()"/>This function is somewhat strange, but it's very
useful.  Take the following situation: you are a server and you want to
listen for incoming connections as well as keep reading from the
connections you already have.</p>

<p>No problem, you say, just an <func>accept()</func> and a
couple of <func>recv()</func>s.  Not so fast, buster!  What if
you're blocking on an <func>accept()</func> call?  How are you
going to <func>recv()</func> data at the same time?  "Use
non-blocking sockets!"  No way!  You don't want to be a CPU hog.  What,
then?</p>

<p><func>select()</func> gives you the power to monitor
several sockets at the same time.  It'll tell you which ones are ready
for reading, which are ready for writing, and which sockets have raised
exceptions, if you really want to know that.</p>

<p>Without any further ado, I'll offer the synopsis of
<func>select()</func>:</p>

<code><![CDATA[#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

int select(int numfds, fd_set *readfds, fd_set *writefds,
           fd_set *exceptfds, struct timeval *timeout); ]]>
</code>

<p>The function monitors "sets" of file descriptors; in particular
<param>readfds</param>, <param>writefds</param>, and
<param>exceptfds</param>.  If you want to see if you can read
from standard input and some socket descriptor,
<param>sockfd</param>, just add the file descriptors
<const>0</const> and <param>sockfd</param> to the set
<param>readfds</param>.  The parameter
<param>numfds</param> should be set to the values of the highest
file descriptor plus one.  In this example, it should be set to
<param>sockfd+1</param>, since it is assuredly higher than
standard input (<const>0</const>).</p>

<p>When <func>select()</func> returns,
<param>readfds</param> will be modified to reflect which of the
file descriptors you selected which is ready for reading.  You can test
them with the macro <func>FD_ISSET()</func>, below.</p>

<p>Before progressing much further, I'll talk about how to manipulate
these sets.  Each set is of the type <type>fd_set</type>.  The following
macros operate on this type:</p>

<p><table border="0">
<tr><td width="50%"><p><ii key="FD_SET()"/><func>FD_SET(int fd, fd_set *set);</func></p></td>
<td width="48%"><p>Add <var>fd</var> to the <var>set</var>.</p></td></tr>

<tr><td><p><ii key="FD_CLR()"/><func>FD_CLR(int fd, fd_set *set);</func></p></td>
<td><p>Remove <var>fd</var> from the <var>set</var>.</p></td></tr>

<tr><td><p><ii key="FD_ISSET()"/><func>FD_ISSET(int fd, fd_set *set);</func></p></td>
<td><p>Return true if <var>fd</var> is in the
<var>set</var>.</p></td></tr>

<tr><td><p><ii key="FD_ZERO()"/><func>FD_ZERO(fd_set *set);</func></p></td>
<td><p>Clear all entries from the <var>set</var>.</p></td></tr>
</table></p>

<p>Finally, what is this weirded out <ii key="struct timeval"/>
<type>struct timeval</type>?
Well, sometimes you don't want to wait forever for someone to send you
some data.  Maybe every 96 seconds you want to print "Still Going..." to
the terminal even though nothing has happened.  This time structure
allows you to specify a timeout period.  If the time is exceeded and
<func>select()</func> still hasn't found any ready file
descriptors, it'll return so you can continue processing.</p>

<p>The <type>struct timeval</type> has the follow fields:</p>

<code><![CDATA[struct timeval {
    int tv_sec;     // seconds
    int tv_usec;    // microseconds
}; ]]>
</code>

<p>Just set <param>tv_sec</param> to the number of seconds to
wait, and set <param>tv_usec</param> to the number of
microseconds to wait.  Yes, that's <emp>micro</emp>seconds,
not milliseconds.  There are 1,000 microseconds in a millisecond, and
1,000 milliseconds in a second.  Thus, there are 1,000,000 microseconds
in a second.  Why is it "usec"?  The "u" is supposed to look like the
Greek letter <mu/> (Mu) that we use for "micro".  Also, when the function
returns, <param>timeout</param> <emp>might</emp> be
updated to show the time still remaining.  This depends on what flavor
of Unix you're running.</p>

<p>Yay!  We have a microsecond resolution timer!  Well, don't count on
it.  You'll probably have to wait some part of your standard Unix
timeslice no matter how small you set your <type>struct
timeval</type>.</p>

<p>Other things of interest:  If you set the fields in your
<type>struct timeval</type> to <const>0</const>,
<func>select()</func> will timeout immediately, effectively
polling all the file descriptors in your sets.  If you set the
parameter <param>timeout</param> to NULL, it will never timeout,
and will wait until the first file descriptor is ready.  Finally, if you
don't care about waiting for a certain set, you can just set it to NULL
in the call to <func>select()</func>.</p>

<p><ulink url="&samplepre;select.c">The following code snippet</ulink> waits 2.5 seconds for
something to appear on standard input:</p>

<code><![CDATA[/*
** select.c -- a select() demo
*/

#include <stdio.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

#define STDIN 0  // file descriptor for standard input

int main(void)
{
    struct timeval tv;
    fd_set readfds;

    tv.tv_sec = 2;
    tv.tv_usec = 500000;

    FD_ZERO(&readfds);
    FD_SET(STDIN, &readfds);

    // don't care about writefds and exceptfds:
    select(STDIN+1, &readfds, NULL, NULL, &tv);

    if (FD_ISSET(STDIN, &readfds))
        printf("A key was pressed!\n");
    else
        printf("Timed out.\n");

    return 0;
} ]]>
</code>

<p>If you're on a line buffered terminal, the key you hit should be
RETURN or it will time out anyway.</p>

<p>Now, some of you might think this is a great way to wait for data
on a datagram socket&emdash;and you are right: it <emp>might</emp> be.
Some Unices can use select in this manner, and some can't.  You should
see what your local man page says on the matter if you want to attempt
it.</p>

<p>Some Unices update the time in your <type>struct timeval</type> to
reflect the amount of time still remaining before a timeout.  But others
do not.  Don't rely on that occurring if you want to be portable.  (Use
<ii key="gettimeofday()"/><func>gettimeofday()</func> if you need to
track time elapsed.  It's a bummer, I know, but that's the way it
is.)</p>

<p>What happens if a socket in the read set closes the connection?
Well, in that case, <func>select()</func> returns with that
socket descriptor set as "ready to read".  When you actually do
<func>recv()</func> from it, <func>recv()</func> will
return <const>0</const>.  That's how you know the client has
closed the connection.</p>

<p>One more note of interest about <func>select()</func>: if you have a
socket that is <ii key="select();with listen()"/>
<ii key="listen();with select()"/> <func>listen()</func>ing, you can
check to see if there is a new connection by putting that socket's file
descriptor in the <param>readfds</param> set.</p>

<p>And that, my friends, is a quick overview of the almighty
<func>select()</func> function.</p>

<p>But, by popular demand, here is an in-depth example.
Unfortunately, the difference between the dirt-simple example, above, and
this one here is significant.  But have a look, then read the
description that follows it.</p>

<p><ulink url="&samplepre;selectserver.c">This program</ulink> acts
like a simple multi-user chat server.  Start it running in one window,
then <com>telnet</com> to it ("<com>telnet hostname
9034</com>") from multiple other windows.  When you type something
in one <com>telnet</com> session, it should appear in all the
others.</p>

<code><![CDATA[/*
** selectserver.c -- a cheezy multiperson chat server
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#define PORT "9034"   // port we're listening on

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
	if (sa->sa_family == AF_INET) {
		return &(((struct sockaddr_in*)sa)->sin_addr);
	}

	return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

int main(void)
{
    fd_set master;    // master file descriptor list
    fd_set read_fds;  // temp file descriptor list for select()
    int fdmax;        // maximum file descriptor number

    int listener;     // listening socket descriptor
    int newfd;        // newly accept()ed socket descriptor
    struct sockaddr_storage remoteaddr; // client address
    socklen_t addrlen;

    char buf[256];    // buffer for client data
    int nbytes;

	char remoteIP[INET6_ADDRSTRLEN];

    int yes=1;        // for setsockopt() SO_REUSEADDR, below
    int i, j, rv;

	struct addrinfo hints, *ai, *p;

    FD_ZERO(&master);    // clear the master and temp sets
    FD_ZERO(&read_fds);

	// get us a socket and bind it
	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE;
	if ((rv = getaddrinfo(NULL, PORT, &hints, &ai)) != 0) {
		fprintf(stderr, "selectserver: %s\n", gai_strerror(rv));
		exit(1);
	}
	
	for(p = ai; p != NULL; p = p->ai_next) {
    	listener = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
		if (listener < 0) { 
			continue;
		}
		
		// lose the pesky "address already in use" error message
		setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int));

		if (bind(listener, p->ai_addr, p->ai_addrlen) < 0) {
			close(listener);
			continue;
		}

		break;
	}

	// if we got here, it means we didn't get bound
	if (p == NULL) {
		fprintf(stderr, "selectserver: failed to bind\n");
		exit(2);
	}

	freeaddrinfo(ai); // all done with this

    // listen
    if (listen(listener, 10) == -1) {
        perror("listen");
        exit(3);
    }

    // add the listener to the master set
    FD_SET(listener, &master);

    // keep track of the biggest file descriptor
    fdmax = listener; // so far, it's this one

    // main loop
    for(;;) {
        read_fds = master; // copy it
        if (select(fdmax+1, &read_fds, NULL, NULL, NULL) == -1) {
            perror("select");
            exit(4);
        }

        // run through the existing connections looking for data to read
        for(i = 0; i <= fdmax; i++) {
            if (FD_ISSET(i, &read_fds)) { // we got one!!
                if (i == listener) {
                    // handle new connections
                    addrlen = sizeof remoteaddr;
					newfd = accept(listener, (struct sockaddr *)&remoteaddr,
						&addrlen);

					if (newfd == -1) {
                        perror("accept");
                    } else {
                        FD_SET(newfd, &master); // add to master set
                        if (newfd > fdmax) {    // keep track of the maximum
                            fdmax = newfd;
                        }
                        printf("selectserver: new connection from %s on "
                            "socket %d\n",
							inet_ntop(remoteaddr.ss_family,
								get_in_addr((struct sockaddr*)&remoteaddr),
								remoteIP, INET6_ADDRSTRLEN),
							newfd);
                    }
                } else {
                    // handle data from a client
                    if ((nbytes = recv(i, buf, sizeof buf, 0)) <= 0) {
                        // got error or connection closed by client
                        if (nbytes == 0) {
                            // connection closed
                            printf("selectserver: socket %d hung up\n", i);
                        } else {
                            perror("recv");
                        }
                        close(i); // bye!
                        FD_CLR(i, &master); // remove from master set
                    } else {
                        // we got some data from a client
                        for(j = 0; j <= fdmax; j++) {
                            // send to everyone!
                            if (FD_ISSET(j, &master)) {
                                // except the listener and ourselves
                                if (j != listener && j != i) {
                                    if (send(j, buf, nbytes, 0) == -1) {
                                        perror("send");
                                    }
                                }
                            }
                        }
                    }
                } // END handle data from client
            } // END got new incoming connection
        } // END looping through file descriptors
    } // END for(;;)--and you thought it would never end!
    
    return 0;
}]]>
</code>

<p>Notice I have two file descriptor sets in the code:
<param>master</param> and <param>read_fds</param>.  The
first, <param>master</param>, holds all the socket descriptors
that are currently connected, as well as the socket descriptor that is
listening for new connections.</p>

<p>The reason I have the <param>master</param> set is that
<func>select()</func> actually <emp>changes</emp> the
set you pass into it to reflect which sockets are ready to read.  Since
I have to keep track of the connections from one call of
<func>select()</func> to the next, I must store these safely
away somewhere.  At the last minute, I copy the
<param>master</param> into the <param>read_fds</param>,
and then call <func>select()</func>.</p>

<p>But doesn't this mean that every time I get a new connection, I
have to add it to the <param>master</param> set?  Yup!  And
every time a connection closes, I have to remove it from the
<param>master</param> set?  Yes, it does.</p>

<p>Notice I check to see when the <param>listener</param>
socket is ready to read.  When it is, it means I have a new connection
pending, and I <func>accept()</func> it and add it to the
<param>master</param> set.  Similarly, when a client connection
is ready to read, and <func>recv()</func> returns
<const>0</const>, I know the client has closed the connection, and
I must remove it from the <param>master</param> set.</p>

<p>If the client <func>recv()</func> returns non-zero,
though, I know some data has been received.  So I get it, and then go
through the <param>master</param> list and send that data to all
the rest of the connected clients.</p>

<p>And that, my friends, is a less-than-simple overview of the
almighty <func>select()</func> function.</p>

<p>In addition, here is a bonus afterthought: there is another function
called <ii key="poll()"/><func>poll()</func> which behaves much the same way
<func>select()</func> does, but with a different system for managing the
file descriptor sets.  <link dest="pollman">Check it out!</link></p>

</sect2>

<!-- ======================================================= -->
<!-- sendall -->
<!-- ======================================================= -->

<sect2 id="sendall">
<title>Handling Partial <func>send()</func>s</title>

<p>Remember back in the <link dest="sendrecv">section about
<func>send()</func></link>, above, when I said that
<func>send()</func> might not send all the bytes you asked it
to?  That is, you want it to send 512 bytes, but it returns 412.  What
happened to the remaining 100 bytes?</p>

<p>Well, they're still in your little buffer waiting to be sent out.
Due to circumstances beyond your control, the kernel decided not to send
all the data out in one chunk, and now, my friend, it's up to you to get
the data out there.</p>

<p><ii key="sendall()"/>You could write a function like this to do it,
too:</p>

<code><![CDATA[#include <sys/types.h>
#include <sys/socket.h>

int sendall(int s, char *buf, int *len)
{
    int total = 0;        // how many bytes we've sent
    int bytesleft = *len; // how many we have left to send
    int n;

    while(total < *len) {
        n = send(s, buf+total, bytesleft, 0);
        if (n == -1) { break; }
        total += n;
        bytesleft -= n;
    }

    *len = total; // return number actually sent here

    return n==-1?-1:0; // return -1 on failure, 0 on success
} ]]>
</code>

<p>In this example, <param>s</param> is the socket you want
to send the data to, <param>buf</param> is the buffer containing
the data, and <param>len</param> is a pointer to an
<type>int</type> containing the number of bytes in the buffer.</p>

<p>The function returns <const>-1</const> on error (and
<param>errno</param> is still set from the call to
<func>send()</func>.)  Also, the number of bytes actually sent
is returned in <param>len</param>.  This will be the same number
of bytes you asked it to send, unless there was an error.
<func>sendall()</func> will do it's best, huffing and puffing,
to send the data out, but if there's an error, it gets back to you right
away.</p>

<p>For completeness, here's a sample call to the function:</p>

<code><![CDATA[char buf[10] = "Beej!";
int len;

len = strlen(buf);
if (sendall(s, buf, &len) == -1) {
    perror("sendall");
    printf("We only sent %d bytes because of the error!\n", len);
} ]]>
</code>

<p>What happens on the receiver's end when part of a packet arrives?
If the packets are variable length, how does the receiver know when one
packet ends and another begins?  Yes, real-world scenarios are a royal
pain in the <ii key="donkeys"/>donkeys.  You probably have to <ii
key="data encapsulation"/><emp>encapsulate</emp> (remember that from the
<link dest="lowlevel">data encapsulation section</link> way back there
at the beginning?)  Read on for details!</p>

</sect2>

<!-- ======================================================= -->
<!-- serialization -->
<!-- ======================================================= -->

<sect2 id="serialization">
<title>Serialization&emdash;How to Pack Data</title>

<p><ii key="serialization"/>It's easy enough to send text data across
the network, you're finding, but what happens if you want to send some
"binary" data like <type>int</type>s or <type>float</type>s?  It turns
out you have a few options.</p>

<numlist>
<li>Convert the number into text with a function like
<func>sprintf()</func>, then send the text.  The receiver will parse the
text back into a number using a function like
<func>strtol()</func>.</li>

<li>Just send the data raw, passing a pointer to the data to
<func>send()</func>.</li>

<li>Encode the number into a portable binary form.  The receiver will
decode it.</li>
</numlist>

<p>Sneak preview!  Tonight only!</p>

<p>[<emp>Curtain raises</emp>]</p>

<p>Beej says, "I prefer Method Three, above!"</p>

<p>[<emp>THE END</emp>]</p>

<p>Actually, they all have their drawbacks and advantages, but, like I
said, in general, I prefer the third method.  First, though, let's talk
about some of the drawbacks and advantages to the other two.</p>

<p>The first method, encoding the numbers as text before sending, has
the advantage that you can easily print and read the data that's coming
over the wire.  Sometimes a human-readable protocol is excellent to use
in a non-bandwidth-intensive situation, such as with <ii
key="IRC"/><ulink url="&wpirc;">Internet Relay Chat (IRC)</ulink>.
However, it has the disadvantage that it is slow to convert, and the
results almost always take up more space than the original number!</p>

<p>Method two: passing the raw data.  This one is quite easy (but
dangerous!): just take a pointer to the data to send, and call send with
it.</p>

<code><![CDATA[double d = 3490.15926535;

send(s, &d, sizeof d, 0);  /* DANGER--non-portable! */]]></code>

<p>The receiver gets it like this:</p>

<code><![CDATA[double d;

recv(s, &d, sizeof d, 0);  /* DANGER--non-portable! */]]></code>

<p>Fast, simple&emdash;what's not to like?  Well, it turns out that not
all architectures represent a <type>double</type> (or <type>int</type>
for that matter) with the same bit representation or even the same byte
ordering!  The code is decidedly non-portable.  (Hey&emdash;maybe you
don't need portability, in which case this is nice and fast.)</p>

<p>When packing integer types, we've already seen how the <ii
key="htons()"/><func>htons()</func>-class of functions can help keep
things portable by transforming the numbers into <ii key="byte ordering"/>
Network Byte Order, and how that's the Right Thing to do.
Unfortunately, there are no similar functions for <type>float</type>
types.  Is all hope lost?</p>

<p>Fear not!  (Were you afraid there for a second?  No?  Not even a
little bit?)  There is something we can do: we can pack (or "marshal",
or "serialize", or one of a thousand million other names) the data into
a known binary format that the receiver can unpack on the remote
side.</p>

<p>What do I mean by "known binary format"?  Well, we've already seen
the <func>htons()</func> example, right?  It changes (or "encodes", if
you want to think of it that way) a number from whatever the host format
is into Network Byte Order.  To reverse (unencode) the number, the
receiver calls <func>ntohs()</func>.</p>

<p>But didn't I just get finished saying there wasn't any such function
for other non-integer types?  Yes.  I did.  And since there's no
standard way in C to do this, it's a bit of a pickle (that a gratuitous
pun there for you Python fans).</p>

<p>The thing to do is to pack the data into a known format and send that
over the wire for decoding.  For example, to pack <type>float</type>s,
here's <ulink url="&samplepre;pack.c">something quick and dirty with
plenty of room for improvement:</ulink></p>

<code><![CDATA[#include <stdint.h>

uint32_t htonf(float f)
{
	uint32_t p;
	uint32_t sign;

	if (f < 0) { sign = 1; f = -f; }
	else { sign = 0; }
		
	p = ((((uint32_t)f)&0x7fff)<<16) | (sign<<31); // whole part and sign
	p |= (uint32_t)(((f - (int)f) * 65536.0f))&0xffff; // fraction

	return p;
}

float ntohf(uint32_t p)
{
	float f = ((p>>16)&0x7fff); // whole part
	f += (p&0xffff) / 65536.0f; // fraction

	if (((p>>31)&0x1) == 0x1) { f = -f; } // sign bit set

	return f;
}]]></code>

<p>The above code is sort of a naive implementation that stores a
<type>float</type> in a 32-bit number.  The high bit (31) is used to
store the sign of the number ("1" means negative), and the next seven
bits (30-16) are used to store the whole number portion of the
<type>float</type>.  Finally, the remaining bits (15-0) are used to
store the fractional portion of the number.</p>

<p>Usage is fairly straightforward:</p>

<code><![CDATA[#include <stdio.h>

int main(void)
{
	float f = 3.1415926, f2;
	uint32_t netf;

	netf = htonf(f);  // convert to "network" form
	f2 = ntohf(netf); // convert back to test

	printf("Original: %f\n", f);        // 3.141593
	printf(" Network: 0x%08X\n", netf); // 0x0003243F
	printf("Unpacked: %f\n", f2);       // 3.141586

	return 0;
}]]></code>

<p>On the plus side, it's small, simple, and fast.  On the minus side,
it's not an efficient use of space and the range is severely
restricted&emdash;try storing a number greater-than 32767 in there and
it won't be very happy!  You can also see in the above example that the
last couple decimal places are not correctly preserved.</p>

<p>What can we do instead?  Well, <emp>The</emp> Standard for storing
floating point numbers is known as <ii key="IEEE-754"/><ulink
url="&wp754;">IEEE-754</ulink>.  Most computers use this format
internally for doing floating point math, so in those cases, strictly
speaking, conversion wouldn't need to be done.  But if you want your
source code to be portable, that's an assumption you can't necessarily
make.</p>

<p><ulink url="&samplepre;ieee754.c">Here's some code that encodes
floats and doubles into IEEE-754 format</ulink>.  (Mostly&emdash;it
doesn't encode NaN or Infinity, but it could be modified to do
that.)</p>

<code><![CDATA[#define pack754_32(f) (pack754((f), 32, 8))
#define pack754_64(f) (pack754((f), 64, 11))
#define unpack754_32(i) (unpack754((i), 32, 8))
#define unpack754_64(i) (unpack754((i), 64, 11))

long long pack754(long double f, unsigned bits, unsigned expbits)
{
	long double fnorm;
	int shift;
	long long sign, exp, significand;
	unsigned significandbits = bits - expbits - 1; // -1 for sign bit

	if (f == 0.0) return 0; // get this special case out of the way

	// check sign and begin normalization
	if (f < 0) { sign = 1; fnorm = -f; }
	else { sign = 0; fnorm = f; }

	// get the normalized form of f and track the exponent
	shift = 0;
	while(fnorm >= 2.0) { fnorm /= 2.0; shift++; }
	while(fnorm < 1.0) { fnorm *= 2.0; shift--; }
	fnorm = fnorm - 1.0;

	// calculate the binary form (non-float) of the significand data
	significand = fnorm * ((1LL<<significandbits) + 0.5f);

	// get the biased exponent
	exp = shift + ((1<<(expbits-1)) - 1); // shift + bias

	// return the final answer
	return (sign<<(bits-1)) | (exp<<(bits-expbits-1)) | significand;
}

long double unpack754(long long i, unsigned bits, unsigned expbits)
{
	long double result;
	long long shift;
	unsigned bias;
	unsigned significandbits = bits - expbits - 1; // -1 for sign bit

	if (i == 0) return 0.0;

	// pull the significand
	result = (i&((1LL<<significandbits)-1)); // mask
	result /= (1LL<<significandbits); // convert back to float
	result += 1.0f; // add the one back on

	// deal with the exponent
	bias = (1<<(expbits-1)) - 1;
	shift = ((i>>significandbits)&((1LL<<expbits)-1)) - bias;
	while(shift > 0) { result *= 2.0; shift--; }
	while(shift < 0) { result /= 2.0; shift++; }

	// sign it
	result *= (i>>(bits-1))&1? -1.0: 1.0;

	return result;
}]]></code>

<p>I put some handy macros up there at the top for packing and unpacking
32-bit (probably a <type>float</type>) and 64-bit (probably a
<type>double</type>) numbers, but the <func>pack754()</func> function
could be called directly and told to encode <var>bits</var>-worth of
data (<var>expbits</var> of which are reserved for the normalized
number's exponent.)</p>

<p>Here's sample usage:</p>

<code><![CDATA[
#include <stdio.h>
#include <stdint.h> // defines uintN_t types

int main(void)
{
	float f = 3.1415926, f2;
	double d = 3.14159265358979323, d2;
	uint32_t fi;
	uint64_t di;

	fi = pack754_32(f);
	f2 = unpack754_32(fi);

	di = pack754_64(d);
	d2 = unpack754_64(di);

	printf("float before : %.7f\n", f);
	printf("float encoded: 0x%08X\n", fi);
	printf("float after  : %.7f\n\n", f2);

	printf("double before : %.20lf\n", d);
	printf("double encoded: 0x%016llX\n", di);
	printf("double after  : %.20lf\n", d2);

	return 0;
}]]></code>

<p>The above code produces this output:</p>

<screen>float before : 3.1415925
float encoded: 0x40490FDA
float after  : 3.1415925

double before : 3.14159265358979311600
double encoded: 0x400921FB54442D18
double after  : 3.14159265358979311600</screen>

<p>Another question you might have is how do you pack
<type>struct</type>s?  Unfortunately for you, the compiler is free to
put padding all over the place in a <type>struct</type>, and that means
you can't portably send the whole thing over the wire in one chunk.
(Aren't you getting sick of hearing "can't do this", "can't do that"?
Sorry!  To quote a friend, "Whenever anything goes wrong, I always blame
Microsoft."  This one might not be Microsoft's fault, admittedly, but my
friend's statement is completely true.)</p>

<p>Back to it: the best way to send the <type>struct</type> over the
wire is to pack each field independently and then unpack them into the
<type>struct</type> when they arrive on the other side.</p>

<p>That's a lot of work, is what you're thinking.  Yes, it is.  One
thing you can do is write a helper function to help pack the data for
you.  It'll be fun!  Really!</p>

<p>In the book "<ulink url="&practprog;">The Practice of
Programming</ulink>" by Kernighan and Pike, they implement
<func>printf()</func>-like functions called <func>pack()</func>  and
<func>unpack()</func> that do exactly this.  I'd link to them, but
apparently those functions aren't online with the rest of the
source from the book.</p>

<p>(The Practice of Programming is an excellent read.  Zeus saves a
kitten every time I recommend it.)</p>

<p>At this point, I'm going to drop a pointer to the BSD-licensed <ulink
url="&tplurl;">Typed Parameter Language C API</ulink> which I've never
used, but looks completely respectable.  Python and Perl programmers
will want to check out their language's <func>pack()</func> and
<func>unpack()</func> functions for accomplishing the same thing.  And
Java has a big-ol' Serializable interface that can be used in a similar
way.</p>

<p>But if you want to write your own packing utility in C, K&amp;P's
trick is to use variable argument lists to make
<func>printf()</func>-like functions to build the packets.  <ulink
url="&samplepre;pack2.c">Here's a version I cooked up</ulink> on my own
based on that which hopefully will be enough to give you an idea of how
such a thing can work.</p>

<p>(This code references the <func>pack754()</func> functions, above.
The <func>packi*()</func> functions operate like the familiar
<func>htons()</func> family, except they pack into a <type>char</type>
array instead of another integer.)</p>

<code><![CDATA[#include <ctype.h>
#include <stdarg.h>
#include <string.h>

/*
** packi16() -- store a 16-bit int into a char buffer (like htons())
*/ 
void packi16(unsigned char *buf, unsigned int i)
{
	*buf++ = i>>8; *buf++ = i;
}

/*
** packi32() -- store a 32-bit int into a char buffer (like htonl())
*/ 
void packi32(unsigned char *buf, unsigned long i)
{
	*buf++ = i>>24; *buf++ = i>>16;
	*buf++ = i>>8;  *buf++ = i;
}

/*
** unpacki16() -- unpack a 16-bit int from a char buffer (like ntohs())
*/ 
unsigned int unpacki16(unsigned char *buf)
{
	return (buf[0]<<8) | buf[1];
}

/*
** unpacki32() -- unpack a 32-bit int from a char buffer (like ntohl())
*/ 
unsigned long unpacki32(unsigned char *buf)
{
	return (buf[0]<<24) | (buf[1]<<16) | (buf[2]<<8) | buf[3];
}

/*
** pack() -- store data dictated by the format string in the buffer
**
**  h - 16-bit              l - 32-bit
**  c - 8-bit char          f - float, 32-bit
**  s - string (16-bit length is automatically prepended)
*/ 
size_t pack(unsigned char *buf, char *format, ...)
{
	va_list ap;
	int h;
	int l;
	char c;
	float f;
	char *s;
	size_t size = 0, len;

	va_start(ap, format);

	for(; *format != '\0'; format++) {
		switch(*format) {
		case 'h': // 16-bit
			size += 2;
			h = va_arg(ap, int); // promoted
			packi16(buf, h);
			buf += 2;
			break;

		case 'l': // 32-bit
			size += 4;
			l = va_arg(ap, int);
			packi32(buf, l);
			buf += 4;
			break;

		case 'c': // 8-bit
			size += 1;
			c = va_arg(ap, int); // promoted
			*buf++ = (c>>0)&0xff;
			break;

		case 'f': // float
			size += 4;
			f = va_arg(ap, double); // promoted
			l = pack754_32(f); // convert to IEEE 754
			packi32(buf, l);
			buf += 4;
			break;

		case 's': // string
			s = va_arg(ap, char*);
			len = strlen(s);
			size += len + 2;
			packi16(buf, len);
			buf += 2;
			memcpy(buf, s, len);
			buf += len;
			break;
		}
	}

	va_end(ap);

	return size;
}

/*
** unpack() -- unpack data dictated by the format string into the buffer
*/
void unpack(unsigned char *buf, char *format, ...)
{
	va_list ap;
	short *h;
	int *l;
	int pf;
	char *c;
	float *f;
	char *s;
	size_t len, count, maxstrlen=0;

	va_start(ap, format);

	for(; *format != '\0'; format++) {
		switch(*format) {
		case 'h': // 16-bit
			h = va_arg(ap, short*);
			*h = unpacki16(buf);
			buf += 2;
			break;

		case 'l': // 32-bit
			l = va_arg(ap, int*);
			*l = unpacki32(buf);
			buf += 4;
			break;

		case 'c': // 8-bit
			c = va_arg(ap, char*);
			*c = *buf++;
			break;

		case 'f': // float
			f = va_arg(ap, float*);
			pf = unpacki32(buf);
			buf += 4;
			*f = unpack754_32(pf);
			break;

		case 's': // string
			s = va_arg(ap, char*);
			len = unpacki16(buf);
			buf += 2;
			if (maxstrlen > 0 && len > maxstrlen) count = maxstrlen - 1;
			else count = len;
			memcpy(s, buf, count);
			s[count] = '\0';
			buf += len;
			break;

		default:
			if (isdigit(*format)) { // track max str len
				maxstrlen = maxstrlen * 10 + (*format-'0');
			}
		}

		if (!isdigit(*format)) maxstrlen = 0;
	}

	va_end(ap);
}]]></code>

<p>And <ulink url="&samplepre;pack2.c">here is a demonstration
program</ulink> of the above code that packs some data into
<var>buf</var> and then unpacks it into variables.  Note that when
calling <func>unpack()</func> with a string argument (format specifier
"<const>s</const>"), it's wise to put a maximum length count in front of
it to prevent a buffer overrun, e.g. "<const>96s</const>".  Be wary when
unpacking data you get over the network&emdash;a malicious user might
send badly-constructed packets in an effort to attack your system!</p>

<code><![CDATA[#include <stdio.h>

int main(void)
{
	unsigned char buf[1024];
	char magic;
	short monkeycount;
	long altitude;
	float absurdityfactor;
	char *s = "Great unmitigated Zot!  You've found the Runestaff!";
	char s2[96];
	size_t packetsize, ps2;

	packetsize = pack(buf, "chhlsf", 'B', 0, 37, -5, s, -3490.6677);
	packi16(buf+1, packetsize); // store packet size in packet for kicks

	printf("packet is %d bytes\n", packetsize);

	unpack(buf, "chhl96sf", &magic, &ps2, &monkeycount, &altitude, s2,
		&absurdityfactor);

	printf("'%c' %d %d %ld \"%s\" %f\n", magic, ps2, monkeycount, altitude,
		s2, absurdityfactor);

	return 0;
}]]></code>

<p>Whether you roll your own code or use someone else's, it's a good
idea to have a general set of data packing routines for the sake of
keeping bugs in check, rather than packing each bit by hand each
time.</p>

<p>When packing the data, what's a good format to use?  Excellent
question.  Fortunately, <ii key="XDR"/><ulink
url="&rfcpre;4506&rfcpost;">RFC 4506</ulink>, the External Data
Representation Standard, already defines binary formats for a bunch of
different types, like floating point types, integer types, arrays, raw
data, etc.  I suggest conforming to that if you're going to roll the
data yourself.  But you're not obligated to.  The Packet Police are not
right outside your door.  At least, I don't <emp>think</emp> they are.</p>

<p>In any case, encoding the data somehow or another before you send it
is the right way of doing things!</p>

</sect2>

<!-- ======================================================= -->
<!-- sonofdataencap -->
<!-- ======================================================= -->

<sect2 id="sonofdataencap">
<title>Son of Data Encapsulation</title>

<p>What does it really mean to encapsulate data, anyway?  In the
simplest case, it means you'll stick a header on there with either some
identifying information or a packet length, or both.</p>

<p>What should your header look like?  Well, it's just some binary
data that represents whatever you feel is necessary to complete your
project.</p>

<p>Wow.  That's vague.</p>

<p>Okay.  For instance, let's say you have a multi-user chat program
that uses <const>SOCK_STREAM</const>s.  When a user types ("says")
something, two pieces of information need to be transmitted to the
server: what was said and who said it.</p>

<p>So far so good?  "What's the problem?" you're asking.</p>

<p>The problem is that the messages can be of varying lengths.  One
person named "tom" might say, "Hi", and another person named
"Benjamin" might say, "Hey guys what is up?"</p>

<p>So you <func>send()</func> all this stuff to the clients
as it comes in.  Your outgoing data stream looks like this:</p>

<screen>t o m H i B e n j a m i n H e y g u y s w h a t i s u p ?</screen>

<p>And so on.  How does the client know when one message starts and
another stops?  You could, if you wanted, make all messages the same
length and just call the <ii key="sendall()"/><func>sendall()</func> we
implemented, <link dest="sendall">above</link>.  But that wastes
bandwidth!  We don't want to <func>send()</func> 1024 bytes just so
"tom" can say "Hi".</p>

<p>So we <emp>encapsulate</emp> the data in a tiny header
and packet structure.  Both the client and server know how to pack and
unpack (sometimes referred to as "marshal" and "unmarshal") this data.
Don't look now, but we're starting to define a
<emp>protocol</emp> that describes how a client and server
communicate!</p>

<p>In this case, let's assume the user name is a fixed length of 8
characters, padded with <const>'\0'</const>.  And then let's
assume the data is variable length, up to a maximum of 128
characters.  Let's have a look a sample packet structure that we might
use in this situation:</p>

<numlist>

<li><tt>len</tt> (1 byte, unsigned)&emdash;The total length of the
packet, counting the 8-byte user name and chat data.</li>

<li><tt>name</tt> (8 bytes)&emdash;The user's name, NUL-padded if
necessary.</li>

<li><tt>chatdata</tt>
(<emp>n</emp>-bytes)&emdash;The data itself, no more than 128 bytes.
The length of the packet should be calculated as the length of this data
plus 8 (the length of the name field, above).</li>

</numlist>

<p>Why did I choose the 8-byte and 128-byte limits for the fields?  I
pulled them out of the air, assuming they'd be long enough.  Maybe,
though, 8 bytes is too restrictive for your needs, and you can have a
30-byte name field, or whatever.  The choice is up to you.</p>

<p>Using the above packet definition, the first packet would consist
of the following information (in hex and ASCII):</p>

<screen><![CDATA[   0A     74 6F 6D 00 00 00 00 00      48 69
(length)  T  o  m    (padding)         H  i]]>
</screen>

<p>And the second is similar:</p>

<screen><![CDATA[   18     42 65 6E 6A 61 6D 69 6E      48 65 79 20 67 75 79 73 20 77 ...
(length)  B  e  n  j  a  m  i  n       H  e  y     g  u  y  s     w  ...]]>
</screen>

<p>(The length is stored in Network Byte Order, of course.  In this
case, it's only one byte so it doesn't matter, but generally speaking
you'll want all your binary integers to be stored in Network Byte Order
in your packets.)</p>

<p>When you're sending this data, you should be safe and use a
command similar to <link
dest="sendall"><func>sendall()</func></link>, above, so you
know all the data is sent, even if it takes multiple calls to
<func>send()</func> to get it all out.</p>

<p>Likewise, when you're receiving this data, you need to do a bit of extra
work.  To be safe, you should assume that you might receive a partial
packet (like maybe we receive "<tt>18 42 65
6E 6A</tt>" from Benjamin, above, but that's all we get in this
call to <func>recv()</func>).  We need to call
<func>recv()</func> over and over again until the packet is
completely received.</p>

<p>But how?  Well, we know the number of bytes we need to receive in
total for the packet to be complete, since that number is tacked on the
front of the packet.  We also know the maximum packet size is 1+8+128,
or 137 bytes (because that's how we defined the packet.)</p>

<p>There are actually a couple things you can do here.  Since you know
every packet starts off with a length, you can call <func>recv()</func>
just to get the packet length.  Then once you have that, you can call it
again specifying exactly the remaining length of the packet (possibly
repeatedly to get all the data) until you have the complete packet.
The advantage of this method is that you only need a buffer large
enough for one packet, while the disadvantage is that you need to call
<func>recv()</func> at least twice to get all the data.</p>

<p>Another option is just to call <func>recv()</func> and say the amount
you're willing to receive is the maximum number of bytes in a packet.
Then whatever you get, stick it onto the back of a buffer, and finally
check to see if the packet is complete.  Of course, you might get some
of the next packet, so you'll need to have room for that.</p>

<p>What you can do is declare an array big enough for two packets.
This is your work array where you will reconstruct packets as they
arrive.</p>

<p>Every time you <func>recv()</func> data, you'll append it
into the work buffer and check to see if the packet is complete.  That
is, the number of bytes in the buffer is greater than or equal to the
length specified in the header (+1, because the length in the header
doesn't include the byte for the length itself.)  If the number of bytes
in the buffer is less than 1, the packet is not complete, obviously.
You have to make a special case for this, though, since the first byte
is garbage and you can't rely on it for the correct packet
length.</p>

<p>Once the packet is complete, you can do with it what you
will.  Use it, and remove it from your work buffer.</p>

<p>Whew!  Are you juggling that in your head yet?  Well, here's the
second of the one-two punch: you might have read past the end of one
packet and onto the next in a single <func>recv()</func> call.
That is, you have a work buffer with one complete packet, and an
incomplete part of the next packet!  Bloody heck.  (But this is why you
made your work buffer large enough to hold <emp>two</emp>
packets&emdash;in case this happened!)</p>

<p>Since you know the length of the first packet from the header, and
you've been keeping track of the number of bytes in the work buffer, you
can subtract and calculate how many of the bytes in the work buffer
belong to the second (incomplete) packet.  When you've handled the first
one, you can clear it out of the work buffer and move the partial second
packet down the to front of the buffer so it's all ready to go for the
next <func>recv()</func>.</p>

<p>(Some of you readers will note that actually moving the partial
second packet to the beginning of the work buffer takes time, and the
program can be coded to not require this by using a circular buffer.
Unfortunately for the rest of you, a discussion on circular buffers is
beyond the scope of this article.  If you're still curious, grab a data
structures book and go from there.)</p>

<p>I never said it was easy.  Ok, I did say it was easy.  And it is;
you just need practice and pretty soon it'll come to you naturally.  By
<ii key="Excalibur"/>Excalibur I swear it!</p>

</sect2> <!-- sonofdataencap -->

<!-- ======================================================= -->
<!-- broadcast -->
<!-- ======================================================= -->
<sect2 id="broadcast">
<title>Broadcast Packets&emdash;Hello, World!</title>

<p>So far, this guide has talked about sending data from one host to one
other host.  But it is possible, I insist, that you can, with the proper
authority, send data to multiple hosts <emp>at the same time</emp>!</p>

<p>With <ii key="UDP"/>UDP (only UDP, not TCP) and standard IPv4, this
is done through a mechanism called <ii
key="broadcast"/><emp>broadcasting</emp>.  With IPv6, broadcasting isn't
supported, and you have to resort to the often superior technique of
<emp>multicasting</emp>, which, sadly I won't be discussing at this
time.   But enough of the starry-eyed future&emdash;we're stuck in the
32-bit present.</p>

<p>But wait!  You can't just run off and start broadcasting willy-nilly;
You have to <ii key="setsockopt()"/>set the socket option <ii
key="SO_BROADCAST"/><const>SO_BROADCAST</const> before you can send a
broadcast packet out on the network.  It's like a one of those little
plastic covers they put over the missile launch switch!  That's just how
much power you hold in your hands!</p>

<p>But seriously, though, there is a danger to using broadcast packets,
and that is: every system that receives a broadcast packet must undo all
the onion-skin layers of data encapsulation until it finds out what port
the data is destined to.  And then it hands the data over or discards
it.  In either case, it's a lot of work for each machine that receives
the broadcast packet, and since it is all of them on the local network,
that could be a lot of machines doing a lot of unnecessary work.  When
the game Doom first came out, this was a complaint about its network
code.</p>

<p>Yes, I said the local network.  There is more than one way to skin a
cat... wait a minute.  Is there really more than one way to skin a cat?
What kind of expression is that?  Uh, and likewise, there is more than
one way to send a broadcast packet, but the broadcast packets will
usually be restricted to your local network no matter how you send
them.</p>

<p>So now to the meat and potatoes of the whole thing: how do you
specify the destination address for a broadcast message?  There are two
common ways.</p>

<numlist>
<li>Send the data to your broadcast address.  This is your network
number with all one-bits set for the host portion of the address.  For
instance, at home my network is 192.168.1.0, my netmask is
255.255.255.0, so the last byte of the address is my host number
(because the first three bytes, according to the netmask, are the
network number).  So my broadcast address is 192.168.1.255.  Under Unix,
the <com>ifconfig</com> command will actually give you all this data.
(If you're curious, the bitwise logic to get your broadcast address is
<var>network_number</var> OR (NOT <var>netmask</var>).)</li>

<li>Send the data to the "global" broadcast address.  This is <ii
key="255.255.255.255"/>255.255.255.255, aka
<ii key="INADDR_BROADCAST"/><const>INADDR_BROADCAST</const>.  Many
machines will automatically bitwise AND this with your network number to
convert it to a network broadcast address, but some won't.  It
varies.</li>

</numlist>

<p>So what happens if you try to send data on the broadcast address
without first setting the <const>SO_BROADCAST</const> socket option?
Well, let's fire up good old <link dest="datagram"><com>talker</com> and
<com>listener</com></link> and see what happens.</p>

<screen><![CDATA[$ talker 192.168.1.2 foo
sent 3 bytes to 192.168.1.2
$ talker 192.168.1.255 foo
sendto: Permission denied
$ talker 255.255.255.255 foo
sendto: Permission denied]]>
</screen>

<p>Yes, it's not happy at all...because we didn't set the
<const>SO_BROADCAST</const> socket option.  Do that, and now you can
<func>sendto()</func> anywhere you want!</p>

<p>In fact, that's the <emp>only difference</emp> between a UDP
application that can broadcast and one that can't.  So let's take the
old <com>talker</com> application and add one section that sets the
<const>SO_BROADCAST</const> socket option.  We'll call this program
<ulink url="&samplepre;broadcaster.c">
<file>broadcaster.c</file></ulink>:</p>

<!-- BEGIN broadcaster.c -->
<code><![CDATA[/*
** broadcaster.c -- a datagram "client" like talker.c, except
**                  this one can broadcast
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#define SERVERPORT 4950	// the port users will be connecting to

int main(int argc, char *argv[])
{
	int sockfd;
	struct sockaddr_in their_addr; // connector's address information
	struct hostent *he;
	int numbytes;
	int broadcast = 1;
	//char broadcast = '1'; // if that doesn't work, try this

	if (argc != 3) {
		fprintf(stderr,"usage: broadcaster hostname message\n");
		exit(1);
	}

	if ((he=gethostbyname(argv[1])) == NULL) {  // get the host info
		herror("gethostbyname");
		exit(1);
	}

	if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
		perror("socket");
		exit(1);
	}

	// this call is the difference between this program and talker.c:
	if (setsockopt(sockfd, SOL_SOCKET, SO_BROADCAST, &broadcast,
		sizeof broadcast) == -1) {
		perror("setsockopt (SO_BROADCAST)");
		exit(1);
	}

	their_addr.sin_family = AF_INET;	 // host byte order
	their_addr.sin_port = htons(SERVERPORT); // short, network byte order
	their_addr.sin_addr = *((struct in_addr *)he->h_addr);
	memset(their_addr.sin_zero, '\0', sizeof their_addr.sin_zero);

	if ((numbytes=sendto(sockfd, argv[2], strlen(argv[2]), 0,
			 (struct sockaddr *)&their_addr, sizeof their_addr)) == -1) {
		perror("sendto");
		exit(1);
	}

	printf("sent %d bytes to %s\n", numbytes, inet_ntoa(their_addr.sin_addr));

	close(sockfd);

	return 0;
}]]></code>
<!-- END broadcaster.c -->

<p>What's different between this and a "normal" UDP client/server
situation?  Nothing!  (With the exception of the client being allowed to
send broadcast packets in this case.)  As such, go ahead and run the old
UDP <link dest="datagram"><com>listener</com></link> program in one
window, and <com>broadcaster</com> in another.  You should be now be
able to do all those sends that failed, above.</p>

<screen>
$ talker 192.168.1.2 foo
sent 3 bytes to 192.168.1.2
$ talker 192.168.1.255 foo
sent 3 bytes to 192.168.1.255
$ talker 255.255.255.255 foo
sent 3 bytes to 255.255.255.255
</screen>

<p>And you should see <com>listener</com> responding that it got the
packets.</p>

<p>Well, that's kind of exciting.  But now fire up <com>listener</com> on
another machine next to you on the same network so that you have two
copies going, one on each machine, and run <com>broadcaster</com> again
with your broadcast address... Hey!  Both <com>listener</com>s get the
packet even though you only called <func>sendto()</func> once!
Cool!</p>

<p>If the <com>listener</com> gets data you send directly to it, but not
data on the broadcast address, it could be that you have a <ii
key="firewall"/>firewall on your local machine that is blocking the
packets.  (Yes, <ii key="Pat"/>Pat and <ii key="Bapper"/>Bapper, thank
you for realizing before I did that this is why my sample code wasn't
working.  I told you I'd mention you in the guide, and here you are.  So
<emp>nyah</emp>.)</p>

<p>Again, be careful with broadcast packets.  Since every machine on the
LAN will be forced to deal with the packet whether it
<func>recvfrom()</func>s it or not, it can present quite a load to the
entire computing network.  They are definitely to be used sparingly and
appropriately.</p>

</sect2> <!-- broadcast -->

</sect1> <!-- advanced -->

<!-- ======================================================= -->
<!-- faq -->
<!-- ======================================================= -->

<sect1 id="faq">
<title>Common Questions</title>

<faq>

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q>Where can I get those header files?</q>

<a><p><ii key="header files"/>If you don't have them on your system
already, you probably don't need them.  Check the manual for your
particular platform.  If you're building for <ii key="Windows"/>Windows,
you only need to <tt>#include &lt;winsock.h&gt;</tt>.</p></a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q>What do I do when <func>bind()</func> reports
<ii key="Address already in use"/>"Address already in use"?</q>

<a><p>You have to use <ii key="setsockopt()"/><func>setsockopt()</func>
with the <ii key="SO_REUSEADDR"/><const>SO_REUSEADDR</const> option on
the listening socket.  Check out the <link dest="bind">section on <ii
key="bind()"/><func>bind()</func></link> and the <link
dest="select">section on <ii
key="select()"/><func>select()</func></link> for an example.</p></a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q>How do I get a list of open sockets on the
system?</q>

<a><p>Use the <ii key="netstat"/><com>netstat</com>.  Check the
<com>man</com> page for full details, but you should get some good
output just typing:</p>

<screen>$ netstat</screen>

<p>The only trick is determining which socket is associated with
which program. <smiley/></p></a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q>How can I view the routing table?</q>

<a><p>Run the <ii key="route"/><com>route</com> command (in
<file>/sbin</file> on most Linuxes) or the command
<ii key="netstat"/><com>netstat -r</com>.</p></a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q>How can I run the client and server programs if I only
have one computer?  Don't I need a network to write network
programs?</q>

<a><p>Fortunately for you, virtually all machines implement a <ii
key="loopback device"/>loopback network "device" that sits in the kernel
and pretends to be a network card.  (This is the interface listed as
"<tt>lo</tt>" in the routing table.)</p>

<p>Pretend you're logged into a machine named
<ii key="goat"/>"<tt>goat</tt>".  Run the client in one window
and the server in another.  Or start the server in the background
("<com>server &amp;</com>") and run the client in the same
window.  The upshot of the loopback device is that you can either
<com>client goat</com> or <ii key="localhost"/><com>client localhost</com>
(since "<tt>localhost</tt>" is likely defined in
your <file>/etc/hosts</file> file) and you'll have the client
talking to the server without a network!</p>

<p>In short, no changes are necessary to any of the code to make it
run on a single non-networked machine!  Huzzah!</p></a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q>How can I tell if the remote side has closed
connection?</q>

<a><p>You can tell because <func>recv()</func> will
return <const>0</const>.</p></a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q>How do I implement a <ii key="ping"/>"ping" utility?  What is <ii
key="ICMP"/>ICMP?  Where can I find out more about <ii key="raw
sockets"/>raw sockets and <const>SOCK_RAW</const>?</q>

<a><p>All your raw sockets questions will be answered in W.
Richard Stevens' UNIX Network Programming books.  See the <link
dest="books">books</link> section of this guide.</p></a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q>How do I build for Windows?</q>

<a><p>First, delete Windows and install Linux or BSD.
<evilwinky/>.  No, actually, just see the <link
dest="windows">section on building for
Windows</link> in the introduction.</p></a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q>How do I build for Solaris/SunOS?  I keep getting linker
errors when I try to compile!</q>

<a><p>The linker errors happen because Sun boxes don't
automatically compile in the socket libraries.  See the <link
dest="solaris">section on building for Solaris/SunOS</link> in the
introduction for an example of how to do this.</p></a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q>Why does <func>select()</func> keep falling out
on a signal?</q>

<a><p>Signals tend to cause blocked system calls to return
<const>-1</const> with <param>errno</param> set to <const>EINTR</const>.
When you set up a signal handler with <ii
key="sigaction()"/><func>sigaction()</func>, you can set the flag <ii
key="SA_RESTART"/><const>SA_RESTART</const>, which is supposed to
restart the system call after it was interrupted.</p>

<p>Naturally, this doesn't always work.</p>

<p>My favorite solution to this involves a
<ii key="goto"/><tt>goto</tt> statement.  You know this
irritates your professors to no end, so go for it!</p>

<code><![CDATA[select_restart:
if ((err = select(fdmax+1, &readfds, NULL, NULL, NULL)) == -1) {
    if (errno == EINTR) {
        // some signal just interrupted us, so restart
        goto select_restart;
    }
    // handle the real error here:
    perror("select");
} ]]>
</code>

<p>Sure, you don't <emp>need</emp> to use
<tt>goto</tt> in this case; you can use other
structures to control it.  But I think the
<tt>goto</tt> statement is actually
cleaner.</p></a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q>How can I implement a <ii key="recv();timeout"/>timeout on a call to
<func>recv()</func>?</q>

<a><p>Use <ii key="select()"/><link
dest="select"><func>select()</func></link>!  It allows you to specify a
timeout parameter for socket descriptors that you're looking to read
from.  Or, you could wrap the entire functionality in a single function,
like this:</p>

<code><![CDATA[#include <unistd.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/socket.h>

int recvtimeout(int s, char *buf, int len, int timeout)
{
	fd_set fds;
	int n;
	struct timeval tv;

	// set up the file descriptor set
	FD_ZERO(&fds);
	FD_SET(s, &fds);

	// set up the struct timeval for the timeout
	tv.tv_sec = timeout;
	tv.tv_usec = 0;

	// wait until timeout or data received
	n = select(s+1, &fds, NULL, NULL, &tv);
	if (n == 0) return -2; // timeout!
	if (n == -1) return -1; // error

	// data must be here, so do a normal recv()
	return recv(s, buf, len, 0);
}
.
.
.
// Sample call to recvtimeout():
n = recvtimeout(s, buf, sizeof buf, 10); // 10 second timeout

if (n == -1) {
    // error occurred
    perror("recvtimeout");
}
else if (n == -2) {
    // timeout occurred
} else {
    // got some data in buf
}
.
.
. ]]>
</code>

<p>Notice that <ii key="recvtimeout()"/><func>recvtimeout()</func>
returns <const>-2</const> in case of a timeout.  Why not return
<const>0</const>?  Well, if you recall, a return value of
<const>0</const> on a call to <func>recv()</func> means that the remote
side closed the connection.  So that return value is already spoken for,
and <const>-1</const> means "error", so I chose <const>-2</const> as my
timeout indicator.</p>

</a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<!-- already answered, above
<faqentry>

<q>What if I only have one computer and no network?  How is
it possible to write and test sockets programs?</q>

<a><p>It will work on a single computer exactly the same way that it
works on a networked computer.</p>

<p>That is, running the client and server on the same machine works
just as well as running them on different machines, and you don't even
have to think about the difference.</p>

<p>You can get the answer as to why this is the case if you type
"<com>route</com>":</p>

<screen>
$ route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.0.0.0        *               255.0.0.0       U     0      0        0 eth0
127.0.0.0       *               255.0.0.0       U     0      0        0 lo
default         mygateway       0.0.0.0         UG    0      0        0 eth0
</screen>

<p>See, all the traffic on <tt>10.x.x.x</tt>
goes to my local subnet via <tt>eth0</tt> (the
network card), but all traffic to the
<tt>127.x.x.x</tt> subnet goes to the
<tt>lo</tt>
interface (loopback&emdash;a fake "network card" inside the kernel that
handles traffic from one machine to itself.)</p>

<p>The <tt>lo</tt> interface is also used
when you try to telnet to your own IP address (at least under Linux).
So from host "frog" I can either "<com>telnet frog</com>", or
"<com>telnet localhost</com>"&emdash;localhost is
<tt>127.0.0.1</tt>&emdash;and it will use
<tt>lo</tt>.)</p>

<p>So in short, don't worry about it.  The client and server will
run on the same machine just fine.</p>

</a>

</faqentry>
-->

<!-- +++++++++++++++++++++++++ -->

<faqentry>

<q>How do I <ii key="encryption"/>encrypt or compress the data before
sending it through the socket?</q>

<a>

<p>One easy way to do encryption is to use <ii key="SSL"/>SSL (secure
sockets layer), but that's beyond the scope of this guide.  (<ii
key="OpenSSL"/>Check out the <ulink url="&openssl;">OpenSSL
project</ulink> for more info.)</p>

<p>But assuming you want to plug in or implement your own <ii
key="compression"/>compressor
or encryption system, it's just a matter of thinking of your data as
running through a sequence of steps between both ends.  Each step
changes the data in some way.</p>

<numlist>
<li>server reads data from file (or wherever)</li>
<li>server encrypts/compresses data  (you add this part)</li>
<li>server <func>send()</func>s encrypted data</li>
</numlist>

<p>Now the other way around:</p>

<numlist>
<li>client <func>recv()</func>s encrypted data</li>
<li>client decrypts/decompresses data  (you add this part)</li>
<li>client writes data to file (or wherever)</li>
</numlist>

<p>If you're going to compress and encrypt, just remember to compress
first.  <smiley/></p>

<p>Just as long as the client properly undoes what the server does,
the data will be fine in the end no matter how many intermediate steps
you add.</p>

<p>So all you need to do to use my code is to find the place between
where the data is read and the data is sent (using
<func>send()</func>) over the network, and stick some code in
there that does the encryption.</p>

</a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->

<faqentry>

<q><ii key="PF_INET"/><ii key="AF_INET"/>What is this
"<const>PF_INET</const>" I keep seeing?  Is it related to
<const>AF_INET</const>?</q>

<a>
<p>Yes, yes it is.  See <link dest="socket">the section on
<func>socket()</func></link> for details.</p>

</a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->

<faqentry>

<q>How can I write a server that accepts shell commands
from a client and executes them?</q>

<a>

<p>For simplicity, lets say the client
<func>connect()</func>s, <func>send()</func>s, and
<func>close()</func>s the connection (that is, there are no
subsequent system calls without the client connecting again.)</p>

<p>The process the client follows is this:</p>

<numlist>
<li><func>connect()</func> to server</li>
<li><func>send("/sbin/ls &gt; /tmp/client.out")</func></li>
<li><func>close()</func> the connection</li>
</numlist>

<p>Meanwhile, the server is handling the data and executing
it:</p>

<numlist>
<li><func>accept()</func> the connection from the client</li>
<li><func>recv(str)</func> the command string</li>
<li><func>close()</func> the connection</li>
<li><func>system(str)</func> to run the command</li>
</numlist>

<p><ii key="security"/><emp>Beware!</emp>  Having the server execute
what the client says is like giving remote shell access and people can
do things to your account when they connect to the server.  For
instance, in the above example, what if the client sends "<com>rm -rf
~</com>"?  It deletes everything in your account, that's what!</p>

<p>So you get wise, and you prevent the client from using any except
for a couple utilities that you know are safe, like the
<com>foobar</com> utility:</p>

<code><![CDATA[if (!strncmp(str, "foobar", 6)) {
    sprintf(sysstr, "%s > /tmp/server.out", str);
    system(sysstr);
} ]]>
</code>

<p>But you're still unsafe, unfortunately: what if the client enters
"<com>foobar; rm -rf ~</com>"?  The safest thing to do is to
write a little routine that puts an escape ("<const>\</const>")
character in front of all non-alphanumeric characters (including spaces,
if appropriate) in the arguments for the command.</p>

<p>As you can see, security is a pretty big issue when the server
starts executing things the client sends.</p>

</a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->

<faqentry>

<q>I'm sending a slew of data, but when I
<func>recv()</func>, it only receives 536 bytes or 1460 bytes at
a time.  But if I run it on my local machine, it receives all the data
at the same time.  What's going on?</q>

<a>

<p>You're hitting the <ii key="MTU"/>MTU&emdash;the maximum size the
physical medium can handle.  On the local machine, you're using the
loopback device which can handle 8K or more no problem.  But on
Ethernet, which can only handle 1500 bytes with a header, you hit that
limit.  Over a modem, with 576 MTU (again, with header), you hit the
even lower limit.</p>

<p>You have to make sure all the data is being sent, first of all.
(See the <link dest="sendall"><func>sendall()</func></link>
function implementation for details.) Once you're sure of that, then you
need to call <func>recv()</func> in a loop until all your data
is read.</p>

<p>Read the section <link dest="sonofdataencap">Son of Data
Encapsulation</link> for details on receiving complete packets of data
using multiple calls to <func>recv()</func>.</p>

</a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->

<faqentry>

<q>I'm on a Windows box and I don't have the
<func>fork()</func> system call or any kind of <type>struct
sigaction</type>.  What to do?</q>

<a>
<p><ii key="fork()"/>If they're anywhere, they'll be in POSIX libraries
that may have shipped with your compiler.  Since I don't have a Windows
box, I really can't tell you the answer, but I seem to remember that
Microsoft has a POSIX compatibility layer and that's where
<func>fork()</func> would be.  (And maybe even
<type>sigaction</type>.)</p>

<p>Search the help that came with VC++ for "fork" or "POSIX" and see if it
gives you any clues.</p>

<p>If that doesn't work at all, ditch the
<func>fork()</func>/<type>sigaction</type> stuff and replace it with the
Win32 equivalent: <ii
key="CreateProcess()"/><func>CreateProcess()</func>.  I don't know how
to use <func>CreateProcess()</func>&emdash;it takes a bazillion
arguments, but it should be covered in the docs that came with VC++.</p>

</a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<!--
<faqentry>

<q>How do I send data securely with TCP/IP using
encryption?</q>

<a><ii key="SSL"/><ii key="OpenSSL"/><ii key="encryption"/><p>Check out
the <ulink url="&openssl;">OpenSSL project</ulink>.</p></a>

</faqentry>
-->

<!-- +++++++++++++++++++++++++ -->
<faqentry>

<q><ii key="firewall"/>I'm behind a firewall&emdash;how do I let people
outside the firewall know my IP address so they can connect to my
machine?</q>

<a><p>Unfortunately, the purpose of a firewall is to prevent
people outside the firewall from connecting to machines inside the
firewall, so allowing them to do so is basically considered a breach of
security.</p>

<p>This isn't to say that all is lost.  For one thing, you can still
often <func>connect()</func> through the firewall if it's doing
some kind of masquerading or NAT or something like that.  Just design
your programs so that you're always the one initiating the connection,
and you'll be fine.</p>

<p><ii key="firewall;poking holes in"/>If that's not satisfactory, you
can ask your sysadmins to poke a hole in the firewall so that people can
connect to you.  The firewall can forward to you either through it's NAT
software, or through a proxy or something like that.</p>

<p>Be aware that a hole in the firewall is nothing to be taken
lightly.  You have to make sure you don't give bad people access to the
internal network; if you're a beginner, it's a lot harder to make
software secure than you might imagine.</p>

<p>Don't make your sysadmin mad at me.
<winky/></p></a>

</faqentry>

<faqentry>

<q><ii key="packet sniffer"/><ii key="promiscuous mode"/>How do I write
a packet sniffer?  How do I put my Ethernet interface into promiscuous
mode?</q>

<a><p>For those not in the know, when a network card is in "promiscuous
mode", it will forward ALL packets to the operating system, not just
those that were addressed to this particular machine.  (We're talking
Ethernet-layer addresses here, not IP addresses--but since ethernet is
lower-layer than IP, all IP addresses are effectively forwarded as
well.  See the section <link dest="lowlevel">Low Level Nonsense and
Network Theory</link> for more info.)</p>

<p>This is the basis for how a packet sniffer works.  It puts the
interface into promiscuous mode, then the OS gets every single packet
that goes by on the wire.  You'll have a socket of some type that you
can read this data from.</p>

<p>Unfortunately, the answer to the question varies depending on the
platform, but if you Google for, for instance, "windows promiscuous <ii
key="ioctl()"/>ioctl" you'll probably get somewhere.  There's what looks
like <ulink url="&ljsniff;">a decent writeup in Linux Journal</ulink>,
as well.</p></a>

</faqentry>

<faqentry>

<q>How can I set a custom <ii key="timeout, setting"/>timeout value for
a TCP or UDP socket?</q>

<a><p>It depends on your system.  You might search the net for <ii
key="SO_RCVTIMEO"/><const>SO_RCVTIMEO</const> and <ii
key="SO_SNDTIMEO"/><const>SO_SNDTIMEO</const> (for use with <ii
key="setsockopt()"/><func>setsockopt()</func>) to see if your system
supports such functionality.</p>

<p>The Linux man page suggests using <func>alarm()</func> or
<func>setitimer()</func> as a substitute.</p>

</a>

</faqentry>

<faqentry>

<q>How can I tell which ports are available to use?  Is there a list of
"official" port numbers?</q>

<a><p>Usually this isn't an issue.  If you're writing, say, a web
server, then it's a good idea to use the well-known port 80 for your
software.  If you're writing just your own specialized server, then
choose a port at random (but greater than 1023) and give it a try.</p>

<p>If the port is already in use, you'll get an "Address already in use"
error when you try to <func>bind()</func>.  Choose another port.  (It's
a good idea to allow the user of your software to specify an alternate
port either with a config file or a command line switch.)</p>

<p>There is a <ulink url="&portlist;">list of official port
numbers</ulink> maintained by the Internet Assigned Numbers Authority
(IANA).  Just because something (over 1023) is in that list doesn't mean
you can't use the port.  For instance, Id Software's DOOM uses the same
port as "mdqs", whatever that is.  All that matters is that no one else
<emp>on the same machine</emp> is using that port when you want to use
it.</p>

</a>

</faqentry>

<!-- +++++++++++++++++++++++++ -->
<!--
<faqentry>

<q>When I have two interfaces, how do I
<func>bind()</func> to an interface by name (like
"<tt>eth0</tt>") instead of IP
address?</q>

<a><p></p></a>

</faqentry>
-->

</faq>

</sect1> <!-- faq -->

<!-- ======================================================= -->
<!-- conclusion -->
<!-- ======================================================= -->

<!--
<sect1 id="conclusion">
<title>Disclaimer and Call for Help</title>

<p>Well, that's the lot of it.  Hopefully at least some of the
information contained within this document has been remotely accurate
and I sincerely hope there aren't any glaring errors.  Well, sure, there
always are.</p>

<p>So, let this be a warning to you!  I'm sorry if any inaccuracies
contained herein have caused you any grief, but you just can't hold me
accountable.  See, I don't stand behind a single word of this document,
legally speaking.  The whole thing could be completely and utterly
wrong!</p>

<p>But it's probably not.  After all, I've spent many many hours
messing with this stuff, and implemented several TCP/IP network
utilities at work, have written multiplayer game engines, and so on.
But I'm not the sockets god; I'm just some guy.</p>

<p>By the way, if anyone has any constructive (or destructive)
criticism about this document, please send mail to
<email>&beejmail;</email> and I'll try to make an effort to set the
record straight.</p>

<p>In case you're wondering why I did this, well, I did it for the
money.  Ha!  No, really, I did it because a lot of people have asked me
socket-related questions and when I tell them I've been thinking about
putting together a socket page, they say, "Cool!"  Besides, I feel that
all this hard-earned knowledge is going to waste if I can't share it
with others.  The web just happens to be the perfect vehicle.  I
encourage others to provide similar information whenever
possible.</p>

<p>Enough of this - back to coding!  <winky/></p>
-->
<!-- </sect1> --> <!-- conclusion -->

<!-- ================================================================
== manpages
================================================================= -->

<sect1 id="man">
<title>Man Pages</title>

<p><ii key="man pages"/>In the Unix world, there are a lot of manuals.
They have little sections that describe individual functions that you
have at your disposal.</p>

<p>Of course, <com>manual</com> would be too much of a thing to type.  I
mean, no one in the Unix world, including myself, likes to type that
much.  Indeed I could go on and on at great length about how much I
prefer to be terse but instead I shall be brief and not bore you with
long-winded diatribes about how utterly amazingly brief I prefer to be
in virtually all circumstances in their entirety.</p>

<p><emp>[Applause]</emp></p>

<p>Thank you.  What I am getting at is that these pages are called "man
pages" in the Unix world, and I have included my own personal truncated
variant here for your reading enjoyment.  The thing is, many of these
functions are way more general purpose than I'm letting on, but I'm only
going to present the parts that are relevant for Internet Sockets
Programming.</p>

<p>But wait!  That's not all that's wrong with my man pages:</p>

<list>
<li>They are incomplete and only show the basics from the guide.</li>
<li>There are many more man pages than this in the real world.</li>
<li>They are different than the ones on your system.</li>
<li>The header files might be different for certain functions on your
system.</li>
<li>The function parameters might be different for certain functions on your
system.</li>
</list>

<p>If you want the real information, check your local Unix man pages by
typing <com>man whatever</com>, where "whatever" is something that
you're incredibly interested in, such as "<tt>accept</tt>".  (I'm sure
Microsoft Visual Studio has something similar in their help section.
But "man" is better because it is one byte more concise than "help".
Unix wins again!)</p>

<p>So, if these are so flawed, why even include them at all in the
Guide?  Well, there are a few reasons, but the best are that (a) these
versions are geared specifically toward network programming and are
easier to digest than the real ones, and (b) these versions contain
examples!</p>

<p>Oh!  And speaking of the examples, I don't tend to put in all the
error checking because it really increases the length of the code.  But
you should absolutely do error checking pretty much any time you make
any of the system calls unless you're totally 100% sure it's not going
to fail, and you should probably do it even then!</p>

<!-- ================================================================
== accept()
================================================================= -->
<manpage id="acceptman">
<title><func>accept()</func></title>
<short><p>Accept an incoming connection on a listening socket</p></short>

<prototypes>
<code>#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int accept(int <param>s</param>, struct sockaddr *<param>addr</param>, socklen_t *<param>addrlen</param>);</code>
</prototypes>

<description>
<p><ii key="accept()"/>Once you've gone through the trouble of getting a
<ii key="SOCK_STREAM"/><const>SOCK_STREAM</const> socket and setting it
up for incoming connections with <func>listen()</func>, then you call
<func>accept()</func> to actually get yourself a new socket descriptor
to use for subsequent communication with the newly connected client.</p>

<p>The old socket that you are using for listening is still there, and
will be used for further <func>accept()</func> calls as they come
in.</p>

<p>
<table border="0">
<tr><td width="20%"><p><var>s</var></p></td>
<td width="78%"><p>The <func>listen()</func>ing socket descriptor.</p></td></tr>

<tr><td><p><var>addr</var></p></td>
<td><p>This is filled in with the address of the site that's
connecting to you.</p></td></tr>

<tr><td><p><var>addrlen</var></p></td>
<td><p>This is filled in with the <func>sizeof()</func> the
structure returned in the <var>addr</var> parameter.  You can safely
ignore it if you assume you're getting a <ii key="struct sockaddr_in"/>
<type>struct
sockaddr_in</type> back, which you know you are, because that's the type
you passed in for <var>addr</var>.</p></td></tr>
</table>
</p>

<p><func>accept()</func> will normally block, and you can use
<func>select()</func> to peek on the listening socket descriptor ahead
of time to see if it's "ready to read".  If so, then there's a new
connection waiting to be <func>accept()</func>ed!  Yay!  Alternatively,
you could set the <ii key="O_NONBLOCK"/><const>O_NONBLOCK</const> flag
on the listening socket using <ii key="fcntl()"/><func>fcntl()</func>,
and then it will never block, choosing instead to return
<const>-1</const> with <var>errno</var> set to <ii
key="EWOULDBLOCK"/><const>EWOULDBLOCK</const>.</p>

<p>The socket descriptor returned by <func>accept()</func> is a bona
fide socket descriptor, open and connected to the remote host.  You have
to <func>close()</func> it when you're done with it.</p>

</description>

<rvalue>
<p><func>accept()</func> returns the newly connected socket descriptor,
or <const>-1</const> on error, with <var>errno</var> set
appropriately.</p>
</rvalue>

<example>
<code><![CDATA[struct sockaddr_storage their_addr;
socklen_t addr_size;
struct addrinfo hints, *res;
int sockfd, new_fd;

// first, load up address structs with getaddrinfo():

memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

getaddrinfo(NULL, MYPORT, &hints, &res);

// make a socket, bind it, and listen on it:

sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
bind(sockfd, res->ai_addr, res->ai_addrlen);
listen(sockfd, BACKLOG);

// now accept an incoming connection:

addr_size = sizeof their_addr;
new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &addr_size);

// ready to communicate on socket descriptor new_fd!]]></code>
</example>

<seealso>
<p><link dest="socketman"><func>socket()</func></link>,
<link dest="getaddrinfoman"><func>getaddrinfo()</func></link>,
<link dest="listenman"><func>listen()</func></link>,
<link dest="sockaddr_inman"><type>struct sockaddr_in</type></link></p>
</seealso>

</manpage>

<!-- ================================================================
== bind
================================================================= -->
<manpage id="bindman">
<title><func>bind()</func></title>
<short><p>Associate a socket with an IP address and port number</p></short>

<prototypes>
<code>#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int bind(int <param>sockfd</param>, struct sockaddr *<param>my_addr</param>, socklen_t <param>addrlen</param>);</code>
</prototypes>

<description>
<p><ii key="bind()"/>When a remote machine wants to connect to your
server program, it needs two pieces of information: the
<ii key="IP address"/>IP address and the <ii key="port"/>port number.
The <func>bind()</func> call allows you to do just that.</p>

<p>First, you call <func>getaddrinfo()</func> to load up a <func>struct
sockaddr</func> with the destination address and port information.  Then
you call <func>socket()</func> to get a socket descriptor, and then you
pass the socket and address into <func>bind()</func>, and the IP address
and port are magically (using actual magic) bound to the socket!</p>

<p>If you don't know your IP address, or you know you only have one IP
address on the machine, or you don't care which of the machine's IP
addresses is used, you can simply pass the <const>AI_PASSIVE</const>
flag in the <param>hints</param> parameter to
<func>getaddrinfo()</func>.  What this does is fill in the IP address
part of the <func>struct sockaddr</func> with a special value that tells
<func>bind()</func> that it should automatically fill in this host's IP
address.</p>

<p>What what?  What special value is loaded into the <func>struct
sockaddr</func>'s IP address to cause it to auto-fill the address with
the current host?  I'll tell you, but keep in mind this is only if
you're filling out the <type>struct sockaddr</type> by hand; if not, use
the results from <func>getaddrinfo()</func>, as per above.  In IPv4, the
<param>sin_addr.s_addr</param> field of the <type>struct
sockaddr_in</type> structure is set to <const>INADDR_ANY</const>.  In
IPv6, the <param>sin6_addr</param> field of the <type>struct
sockaddr_in6</type> structure is assigned into from the global variable
<var>in6addr_any</var>.  Or, if you're declaring a new <type>struct
in6_addr</type>, you can initialize it to
<const>IN6ADDR_ANY_INIT</const>.</p>

<p>Lastly, the <var>addrlen</var> parameter should be set to
<tt>sizeof my_addr</tt>.</p>
</description>

<rvalue>
<p>Returns zero on success, or <const>-1</const> on error (and
<func>errno</func> will be set accordingly.)</p>
</rvalue>

<example>
<code><![CDATA[// proper way of doing things with getaddrinfo()

struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

getaddrinfo(NULL, "3490", &hints, &res);

// make a socket:

sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

// bind it to the port we passed in to getaddrinfo():

bind(sockfd, res->ai_addr, res->ai_addrlen);]]></code>

<code><![CDATA[// example of packing a struct by hand, IPv4

struct sockaddr_in myaddr;
int s;

myaddr.sin_family = AF_INET;
myaddr.sin_port = htons(3490);

// you can specify an IP address:
inet_pton(AF_INET, "63.161.169.137", &myaddr.sin_addr.s_addr);

// or you can let it automatically select one:
myaddr.sin_addr.s_addr = INADDR_ANY;

s = socket(PF_INET, SOCK_STREAM, 0);
bind(s, (struct sockaddr*)myaddr, sizeof myaddr);]]></code>

</example>

<seealso>
<p><link dest="getaddrinfoman"><func>getaddrinfo()</func></link>,
<link dest="socketman"><func>socket()</func></link>,
<link dest="sockaddr_inman"><type>struct sockaddr_in</type></link>,
<link dest="sockaddr_inman"><type>struct in_addr</type></link></p>
</seealso>

</manpage>

<!-- ================================================================
== connect()
================================================================= -->
<manpage id="connectman">
<title><func>connect()</func></title>
<short><p>Connect a socket to a server</p></short>

<prototypes>
<code>#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int connect(int <param>sockfd</param>, const struct sockaddr *<param>serv_addr</param>,
            socklen_t <param>addrlen</param>);</code>
</prototypes>

<description>
<p><ii key="connect()"/>Once you've built a socket descriptor with the
<func>socket()</func> call, you can <func>connect()</func> that socket
to a remote server using the well-named <func>connect()</func> system
call.  All you need to do is pass it the socket descriptor and the
address of the server you're interested in getting to know better.  (Oh,
and the length of the address, which is commonly passed to functions
like this.)</p>

<p>Usually this information comes along as the result of a call to
<func>getaddrinfo()</func>, but you can fill out your own <type>struct
sockaddr</type> if you want to.</p>

<p>If you haven't yet called <func>bind()</func> on the socket
descriptor, it is automatically bound to your IP address and a random
local port.  This is usually just fine with you if you're not a server,
since you really don't care what your local port is; you only care what
the remote port is so you can put it in the <var>serv_addr</var>
parameter.  You <emp>can</emp> call <func>bind()</func> if you really
want your client socket to be on a specific IP address and port, but
this is pretty rare.</p>

<p>Once the socket is <func>connect()</func>ed, you're free to
<func>send()</func> and <func>recv()</func> data on it to your heart's
content.</p>

<p><ii key="connect();on datagram sockets"/>Special note: if you
<func>connect()</func> a <const>SOCK_DGRAM</const> UDP socket to a
remote host, you can use <func>send()</func> and <func>recv()</func> as
well as <func>sendto()</func> and <func>recvfrom()</func>.  If you
want.</p>

</description>

<rvalue>
<p>Returns zero on success, or <const>-1</const> on error (and
<func>errno</func> will be set accordingly.)</p>
</rvalue>

<example>
<code><![CDATA[// connect to www.example.com port 80 (http)

struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;

// we could put "80" instead on "http" on the next line:
getaddrinfo("www.example.com", "http", &hints, &res);

// make a socket:

sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

// connect it to the address and port we passed in to getaddrinfo():

connect(sockfd, res->ai_addr, res->ai_addrlen);]]></code>
</example>

<seealso>
<p><link dest="socketman"><func>socket()</func></link>,
<link dest="bindman"><func>bind()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== close()
================================================================= -->
<manpage id="closeman">
<title><func>close()</func></title>
<short><p>Close a socket descriptor</p></short>

<prototypes>
<code>#include &lt;unistd.h&gt;

int close(int <param>s</param>);</code>
</prototypes>

<description>
<p><ii key="close()"/>After you've finished using the socket for
whatever demented scheme you have concocted and you don't want to
<func>send()</func> or <func>recv()</func> or, indeed, do <emp>anything
else</emp> at all with the socket, you can <func>close()</func> it, and
it'll be freed up, never to be used again.</p>

<p>The remote side can tell if this happens one of two ways. One: if the
remote side calls <func>recv()</func>, it will return <const>0</const>.
Two: if the remote side calls <func>send()</func>, it'll receive a
signal <ii key="SIGPIPE"/><const>SIGPIPE</const> and send() will return
<const>-1</const> and <var>errno</var> will be set to <ii
key="EPIPE"/><const>EPIPE</const>.</p>

<p><ii key="Windows"/><b>Windows users</b>: the function you need to use
is called <ii key="closesocket()"/><func>closesocket()</func>, not
<func>close()</func>.  If you try to use <func>close()</func> on a
socket descriptor, it's possible Windows will get angry... And you
wouldn't like it when it's angry.</p>

</description>

<rvalue>
<p>Returns zero on success, or <const>-1</const> on error (and
<func>errno</func> will be set accordingly.)</p>
</rvalue>

<example>
<code>s = socket(PF_INET, SOCK_DGRAM, 0);
.
.
.
// a whole lotta stuff...*BRRRONNNN!*
.
.
.
close(s);  // not much to it, really.</code>
</example>

<seealso>
<p><link dest="socketman"><func>socket()</func></link>,
<link dest="shutdownman"><func>shutdown()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== getaddrinfo, freeaddrinfo, gai_strerror
================================================================= -->
<manpage id="getaddrinfoman">
<title><func>getaddrinfo()</func>, <func>freeaddrinfo()</func>,
<func>gai_strerror()</func></title>
<short><p>Get information about a host name and/or service and load up a
<type>struct sockaddr</type> with the result.</p></short>

<prototypes>
<code><![CDATA[#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>

int getaddrinfo(const char *nodename, const char *servname,
                const struct addrinfo *hints, struct addrinfo **res);

void freeaddrinfo(struct addrinfo *ai);

const char *gai_strerror(int ecode);

struct addrinfo {
  int     ai_flags;          // AI_PASSIVE, AI_CANONNAME, ...
  int     ai_family;         // AF_xxx
  int     ai_socktype;       // SOCK_xxx
  int     ai_protocol;       // 0 (auto) or IPPROTO_TCP, IPPROTO_UDP 

  socklen_t  ai_addrlen;     // length of ai_addr
  char   *ai_canonname;      // canonical name for nodename
  struct sockaddr  *ai_addr; // binary address
  struct addrinfo  *ai_next; // next structure in linked list
};]]></code></prototypes>

<description>
<p><func>getaddrinfo()</func> is an excellent function that will return
information on a particular host name (such as its IP address) and load
up a <type>struct sockaddr</type> for you, taking care of the gritty
details (like if it's IPv4 or IPv6.)  It replaces the old functions
<func>gethostbyname()</func> and <func>getservbyname()</func>.The
description, below, contains a lot of information that might be a little
daunting, but actual usage is pretty simple.  It might be worth it to
check out the examples first.</p>

<p>The host name that you're interested in goes in the
<param>nodename</param> parameter.  The address can be either a host
name, like "www.example.com", or an IPv4 or IPv6 address (passed as a
string).  This parameter can also be <const>NULL</const> if you're using
the <const>AI_PASSIVE</const> flag (see below.)</p>

<p>The <param>servname</param> parameter is basically the port number.
It can be a port number (passed as a string, like "80"), or it can be a
service name, like "http" or "tftp" or "smtp" or "pop", etc.  Well-known
service names can be found in the <ulink url="&portlist;">IANA Port
List</ulink> or in your <file>/etc/services</file> file.</p>

<p>Lastly, for input parameters, we have <param>hints</param>.  This is
really where you get to define what the <func>getaddinfo()</func>
function is going to do.  Zero the whole structure before use with
<func>memset()</func>.  Let's take a look at the fields you need to set
up before use.</p>

<p>The <param>ai_flags</param> can be set to a variety of things, but
here are a couple important ones.  (Multiple flags can be specified by
bitwise-ORing them together with the <operator>|</operator> operator.)
Check your man page for the complete list of flags.</p>

<p><const>AI_CANONNAME</const> causes the <param>ai_canonname</param>
of the result to the filled out with the host's canonical (real) name.
<const>AI_PASSIVE</const> causes the result's IP address to
be filled out with <const>INADDR_ANY</const> (IPv4)or
<var>in6addr_any</var> (IPv6); this causes a subsequent call to
<func>bind()</func> to auto-fill the IP address of the <type>struct
sockaddr</type> with the address of the current host.  That's excellent
for setting up a server when you don't want to hardcode the address.</p>

<p>If you do use the <const>AI_PASSIVE</const>, flag, then you can pass
<const>NULL</const> in the <param>nodename</param> (since
<func>bind()</func> will fill it in for you later.</p>

<p>Continuing on with the input paramters, you'll likely want to set
<param>ai_family</param> to <const>AF_UNSPEC</const> which tells
<func>getaddrinfo()</func> to look for both IPv4 and IPv6 addresses.
You can also restrict yourself to one or the other with
<const>AF_INET</const> or <const>AF_INET6</const>.</p>

<p>Next, the <param>socktype</param> field should be set to
<const>SOCK_STREAM</const> or <const>SOCK_DGRAM</const>, depending on
which type of socket you want.</p>

<p>Finally, just leave <param>ai_protocol</param> at <const>0</const> to
automatically choose your protocol type.</p>

<p>Now, after you get all that stuff in there, you can
<emp>finally</emp> make the call to <func>getaddrinfo()</func>!</p>

<p>Of course, this is where the fun begins.  The <param>res</param> will
now point to a linked list of <type>struct addrinfo</type>s, and you can
go through this list to get all the addresses that match what you passed
in with the hints.</p>

<p>Now, it's possible to get some addresses that don't work for one
reason or another, so what the Linux man page does is loops through the
list doing a call to <func>socket()</func> and <func>connect()</func>
(or <func>bind()</func> if you're setting up a server with the
<const>AI_PASSIVE</const> flag) until it succeeds.</p>

<p>Finally, when you're done with the linked list, you need to call
<func>freeaddrinfo()</func> to free up the memory (or it will be leaked,
and Some People will get upset.)</p>

</description>

<rvalue>
<p>Returns zero on success, or nonzero on error.  If it returns nonzero,
you can use the function <func>gai_strerror()</func> to get a printable
version of the error code in the return value.</p>
</rvalue>

<example>
<code><![CDATA[// code for a client connecting to a server
// namely a stream socket to www.example.com on port 80 (http)
// either IPv4 or IPv6

int sockfd;  
struct addrinfo hints, *servinfo, *p;
int rv;

memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC; // use AF_INET6 to force IPv6
hints.ai_socktype = SOCK_STREAM;

if ((rv = getaddrinfo("www.example.com", "http", &hints, &servinfo)) != 0) {
	fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
	exit(1);
}

// loop through all the results and connect to the first we can
for(p = servinfo; p != NULL; p = p->ai_next) {
	if ((sockfd = socket(p->ai_family, p->ai_socktype,
			p->ai_protocol)) == -1) {
		perror("socket");
		continue;
	}

	if (connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
		close(sockfd);
		perror("connect");
		continue;
	}

	break; // if we get here, we must have connected successfully
}

if (p == NULL) {
	// looped off the end of the list with no connection
	fprintf(stderr, "failed to connect\n");
	exit(2);
}

freeaddrinfo(servinfo); // all done with this structure]]></code>

<p/>
<code><![CDATA[// code for a server waiting for connections
// namely a stream socket on port 3490, on this host's IP
// either IPv4 or IPv6.

int sockfd;  
struct addrinfo hints, *servinfo, *p;
int rv;

memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC; // use AF_INET6 to force IPv6
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE; // use my IP address

if ((rv = getaddrinfo(NULL, "3490", &hints, &servinfo)) != 0) {
	fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
	exit(1);
}

// loop through all the results and bind to the first we can
for(p = servinfo; p != NULL; p = p->ai_next) {
	if ((sockfd = socket(p->ai_family, p->ai_socktype,
			p->ai_protocol)) == -1) {
		perror("socket");
		continue;
	}

	if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
		close(sockfd);
		perror("bind");
		continue;
	}

	break; // if we get here, we must have connected successfully
}

if (p == NULL) {
	// looped off the end of the list with no successful bind
	fprintf(stderr, "failed to bind socket\n");
	exit(2);
}

freeaddrinfo(servinfo); // all done with this structure]]></code>
</example>

<seealso>
<p><link dest="gethostbynameman"><func>gethostbyname()</func></link>,
<link dest="getnameinfoman"><func>getnameinfo()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== gethostname()
================================================================= -->
<manpage id="gethostnameman">
<title><func>gethostname()</func></title>
<short><p>Returns the name of the system</p></short>

<prototypes>
<code>#include &lt;sys/unistd.h&gt;

int gethostname(char *<param>name</param>, size_t <param>len</param>);</code>
</prototypes>

<description>
<p><ii key="gethostname()"/>Your system has a name.  They all do.  This
is a slightly more Unixy thing than the rest of the networky stuff we've
been talking about, but it still has its uses.</p>

<p>For instance, you can get your host name, and then call <ii
key="gethostbyname()"/><func>gethostbyname()</func> to find out your
<ii key="IP address"/>IP address.</p>

<p>The parameter <var>name</var> should point to a buffer that will hold
the host name, and <var>len</var> is the size of that buffer in bytes.
<func>gethostname()</func> won't overwrite the end of the buffer (it
might return an error, or it might just stop writing), and it will
<const>NUL</const>-terminate the string if there's room for it in the
buffer.</p>
</description>

<rvalue>
<p>Returns zero on success, or <const>-1</const> on error (and
<func>errno</func> will be set accordingly.)</p>
</rvalue>

<example>
<code>char hostname[128];

gethostname(hostname, sizeof hostname);
printf("My hostname: %s\n", hostname);</code>
</example>

<seealso>
<p><link dest="gethostbynameman"><func>gethostbyname()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== gethostbyname(), gethostbyaddr()
================================================================= -->
<manpage id="gethostbynameman">
<title><func>gethostbyname()</func>, <func>gethostbyaddr()</func></title>
<short><p>Get an IP address for a hostname, or vice-versa</p></short>

<prototypes>
<code>#include &lt;sys/socket.h&gt;
#include &lt;netdb.h&gt;

struct hostent *gethostbyname(const char *<param>name</param>); // DEPRECATED!
struct hostent *gethostbyaddr(const char *<param>addr</param>, int <param>len</param>, int <param>type</param>);</code>
</prototypes>

<description>
<p><ii key="gethostbyname()"/><ii key="gethostbyaddr()"/><emp>PLEASE
NOTE: these two functions are superseded by <func>getaddrinfo()</func>
and <func>getnameinfo()</func>!</emp>  In particular,
<func>gethostbyname()</func> doesn't work well with IPv6.</p>

<p>These functions map back and forth between host names and IP
addresses.  For instance, if you have "www.example.com", you can use
<func>gethostbyname()</func> to get its IP address and store it in a
<type>struct in_addr</type>.</p>

<p>Conversely, if you have a <type>struct in_addr</type> or a
<type>struct in6_addr</type>, you can use <func>gethostbyaddr()</func>
to get the hostname back.  <func>gethostbyaddr()</func> <emp>is</emp>
IPv6 compatible, but you should use the newer shinier
<func>getnameinfo()</func> instead.</p>

<p>(If you have a string containing an IP address in dots-and-numbers
format that you want to look up the hostname of, you'd be better off
using <func>getaddrinfo()</func> with the <const>AI_CANONNAME</const>
flag.)</p>

<p><func>gethostbyname()</func> takes a string like "www.yahoo.com", and
returns a <type>struct hostent</type> which contains tons of
information, including the <ii key="IP address"/>IP address.  (Other
information is the official host name, a list of aliases, the address
type, the length of the addresses, and the list of addresses&emdash;it's
a general-purpose structure that's pretty easy to use for our specific
purposes once you see how.)</p>

<p><func>gethostbyaddr()</func> takes a <type>struct in_addr</type> or
<type>struct in6_addr</type> and brings you up a corresponding host name
(if there is one), so it's sort of the reverse of
<func>gethostbyname()</func>.  As for parameters, even though
<var>addr</var> is a <type>char*</type>, you actually want to pass in a
pointer to a <type>struct in_addr</type>.  <var>len</var> should be
<tt>sizeof(struct in_addr)</tt>, and <var>type</var> should be
<const>AF_INET</const>.</p>

<p>So what is this <ii key="struct hostent"/><type>struct hostent</type>
that gets returned?  It has a number of fields that contain information
about the host in question.</p>

<p><table border="0">
<tr><td width="30%"><p><var>char *h_name</var></p></td>
<td width="68%"><p>The real canonical host name.</p></td></tr>

<tr><td><p><var>char **h_aliases</var></p></td>
<td><p>A list of aliases that can be accessed with
arrays&emdash;the last element is <const>NULL</const></p></td></tr>

<tr><td><p><var>int h_addrtype</var></p></td>
<td><p>The result's address type, which really should be
<const>AF_INET</const> for our purposes.</p></td></tr>

<tr><td><p><var>int length</var></p></td>
<td><p>The length of the addresses in bytes, which is 4 for
IP (version 4) addresses.</p></td></tr>

<tr><td><p><var>char **h_addr_list</var></p></td>
<td><p>A list of IP addresses for this host.  Although this
is a <type>char**</type>, it's really an array of <type>struct
in_addr*</type>s in disguise.  The last array element is
<const>NULL</const>.</p></td></tr>

<tr><td><p><var>h_addr</var></p></td>
<td><p>A commonly defined alias for
<var>h_addr_list[0]</var>.  If you just want any old IP address for this
host (yeah, they can have more than one) just use this field.</p></td></tr>

</table></p>

</description>

<rvalue>
<p>Returns a pointer to a resultant <type>struct hostent</type> or
success, or <const>NULL</const> on error.</p>

<p>Instead of the normal <func>perror()</func> and all that stuff you'd
normally use for error reporting, these functions have parallel results
in the variable <var>h_errno</var>, which can be printed using the
functions <ii key="herror()"/><func>herror()</func> or <ii
key="hstrerror()"/><func>hstrerror()</func>.  These work just like the
classic <var>errno</var>, <func>perror()</func>, and
<func>strerror()</func> functions you're used to.</p>

</rvalue>

<example>
<code><![CDATA[// THIS IS A DEPRECATED METHOD OF GETTING HOST NAMES
// use getaddrinfo() instead!

#include <stdio.h>
#include <errno.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main(int argc, char *argv[])
{
    int i;
    struct hostent *he;
    struct in_addr **addr_list;

    if (argc != 2) {
        fprintf(stderr,"usage: ghbn hostname\n");
        return 1;
    }

    if ((he = gethostbyname(argv[1])) == NULL) {  // get the host info
        herror("gethostbyname");
        return 2;
    }

    // print information about this host:
    printf("Official name is: %s\n", he->h_name);
    printf("    IP addresses: ");
    addr_list = (struct in_addr **)he->h_addr_list;
    for(i = 0; addr_list[i] != NULL; i++) {
        printf("%s ", inet_ntoa(*addr_list[i]));
    }
    printf("\n");

    return 0;
}]]></code>

<code><![CDATA[// THIS HAS BEEN SUPERCEDED
// use getnameinfo() instead!

struct hostent *he;
struct in_addr ipv4addr;
struct in6_addr ipv6addr;

inet_pton(AF_INET, "192.0.2.34", &ipv4addr);
he = gethostbyaddr(&ipv4addr, sizeof ipv4addr, AF_INET);
printf("Host name: %s\n", he->h_name);

inet_pton(AF_INET6, "2001:db8:63b3:1::beef", &ipv6addr);
he = gethostbyaddr(&ipv6addr, sizeof ipv6addr, AF_INET6);
printf("Host name: %s\n", he->h_name);]]></code>
</example>

<seealso>
<p><link dest="getaddrinfoman"><func>getaddrinfo()</func></link>,
<link dest="getnameinfoman"><func>getnameinfo()</func></link>,
<link dest="gethostnameman"><func>gethostname()</func></link>,
<link dest="errnoman"><var>errno</var></link>,
<link dest="perrorman"><func>perror()</func></link>,
<link dest="perrorman"><func>strerror()</func></link>,
<link dest="sockaddr_inman"><type>struct in_addr</type></link></p>
</seealso>

</manpage>

<!-- ================================================================
== manpage header
================================================================= -->
<manpage id="getnameinfoman">
<title><func>getnameinfo()</func></title>
<short><p>Look up the host name and service name information for a given
<type>struct sockaddr</type>.</p></short>

<prototypes>
<code><![CDATA[#include <sys/socket.h>
#include <netdb.h>

int getnameinfo(const struct sockaddr *sa, socklen_t salen,
                char *host, size_t hostlen,
                char *serv, size_t servlen, int flags);]]></code>
</prototypes>

<description>
<p>This function is the opposite of <func>getaddrinfo()</func>, that is,
this function takes an already loaded <type>struct sockaddr</type> and
does a name and service name lookup on it.  It replaces the old
<func>gethostbyaddr()</func> and <func>getservbyport()</func>
functions.</p>

<p>You have to pass in a pointer to a <type>struct sockaddr</type>
(which in actuality is probably a <type>struct sockaddr_in</type> or
<type>struct sockaddr_in6</type> that you've cast) in the
<param>sa</param> parameter, and the length of that <type>struct</type>
in the <param>salen</param>.</p>

<p>The resultant host name and service name will be written to the area
pointed to by the <param>host</param> and <param>serv</param>
parameters.  Of course, you have to specify the max lengths of these
buffers in <param>hostlen</param> and <param>servlen</param>.</p>

<p>Finally, there are several flags you can pass, but here a a couple
good ones.  <const>NI_NOFQDN</const> will cause the <param>host</param>
to only contain the host name, not the whole domain name.
<const>NI_NAMEREQD</const> will cause the function to fail if the name
cannot be found with a DNS lookup (if you don't specify this flag and
the name can't be found, <func>getnameinfo()</func> will put a string
version of the IP address in <param>host</param> instead.)</p>

<p>As always, check your local man pages for the full scoop.</p>
</description>

<rvalue>
<p>Returns zero on success, or non-zero on error.  If the return value
is non-zero, it can be passed to <func>gai_strerror()</func> to get a
human-readable string.  See <func>getaddrinfo</func> for more
information.</p>
</rvalue>

<example>
<code><![CDATA[struct sockaddr_in6 sa; // could be IPv4 if you want
char host[1024];
char service[20];

// pretend sa is full of good information about the host and port...

getnameinfo(&sa, sizeof sa, host, sizeof host, service, sizeof service, 0);

printf("   host: %s\n", host);    // e.g. "www.example.com"
printf("service: %s\n", service); // e.g. "http"]]>
</code>
</example>

<seealso>
<p><link dest="getaddrinfoman"><func>getaddrinfo()</func></link>,
<link dest="gethostbynameman"><func>gethostbyaddr()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== getpeername()
================================================================= -->
<manpage id="getpeernameman">
<title><func>getpeername()</func></title>
<short><p>Return address info about the remote side of the connection</p></short>

<prototypes>
<code>#include &lt;sys/socket.h&gt;

int getpeername(int <param>s</param>, struct sockaddr *<param>addr</param>, socklen_t *<param>len</param>);</code>
</prototypes>

<description>
<p><ii key="getpeername()"/>Once you have either <func>accept()</func>ed
a remote connection, or <func>connect()</func>ed to a server, you now
have what is known as a <emp>peer</emp>.  Your peer is simply the
computer you're connected to, identified by an <ii key="IP address"/>IP
address and a <ii key="port"/>port.
So...</p>

<p><func>getpeername()</func> simply returns a <type>struct
sockaddr_in</type> filled with information about the machine you're
connected to.</p>

<p>Why is it called a "name"?  Well, there are a lot of different kinds
of sockets, not just Internet Sockets like we're using in this guide,
and so "name" was a nice generic term that covered all cases.  In our
case, though, the peer's "name" is it's IP address and port.</p>

<p>Although the function returns the size of the resultant address in
<var>len</var>, you must preload <var>len</var> with the size of
<var>addr</var>.</p>

</description>

<rvalue>
<p>Returns zero on success, or <const>-1</const> on error (and
<func>errno</func> will be set accordingly.)</p>
</rvalue>

<example>
<code><![CDATA[// assume s is a connected socket

socklen_t len;
struct sockaddr_storage addr;
char ipstr[INET6_ADDRSTRLEN];
int port;

len = sizeof addr;
getpeername(s, (struct sockaddr*)&amp;addr, &amp;len);

// deal with both IPv4 and IPv6:
if (addr.ss_family == AF_INET) {
	struct sockaddr_in *s = (struct sockaddr_in *)&addr;
	port = ntohs(s->sin_port);
	inet_ntop(AF_INET, s->sin_addr, ipstr, sizeof ipstr);
} else { // AF_INET6
	struct sockaddr_in6 *s = (struct sockaddr_in6 *)&addr;
	port = ntohs(s->sin6_port);
	inet_ntop(AF_INET, s->sin6_addr, ipstr, sizeof ipstr);
}

printf("Peer IP address: %s\n", ipstr);
printf("Peer port      : %d\n", port);]]></code>
</example>

<seealso>
<p><link dest="gethostnameman"><func>gethostname()</func></link>,
<link dest="gethostbynameman"><func>gethostbyname()</func></link>,
<link dest="gethostbynameman"><func>gethostbyaddr()</func></link></p>
</seealso>

</manpage> 

<!-- ================================================================
== errno
================================================================= -->
<manpage id="errnoman">
<title><var>errno</var></title>
<short><p>Holds the error code for the last system call</p></short>

<prototypes>
<code>#include &lt;errno.h&gt;

int <var>errno</var>;</code>
</prototypes>

<description>
<p><ii key="errno"/>This is the variable that holds error information
for a lot of system calls.  If you'll recall, things like
<func>socket()</func> and <func>listen()</func> return <const>-1</const>
on error, and they set the exact value of <var>errno</var> to let you
know specifically which error occurred.</p>

<p>The header file <file>errno.h</file> lists a bunch of constant
symbolic names for errors, such as <const>EADDRINUSE</const>,
<const>EPIPE</const>, <const>ECONNREFUSED</const>, etc.  Your local man
pages will tell you what codes can be returned as an error, and you can
use these at run time to handle different errors in different ways.</p>

<p>Or, more commonly, you can call <ii
key="perror()"/><func>perror()</func> or <ii
key="strerror()"/><func>strerror()</func> to get a human-readable
version of the error.</p>

</description>

<rvalue>
<p>The value of the variable is the latest error to have transpired, which
might be the code for "success" if the last action succeeded.</p>
</rvalue>

<example>
<code>s = socket(PF_INET, SOCK_STREAM, 0);
if (s == -1) {
	perror("socket"); // or use strerror()
}

tryagain:
if (select(n, &amp;readfds, NULL, NULL) == -1) {
	// an error has occurred!!

	// if we were only interrupted, just restart the select() call:
	if (errno == EINTR) goto tryagain;  // AAAA!  goto!!!

	// otherwise it's a more serious error:
	perror("select");
	exit(1);
}</code>
</example>

<seealso>
<p><link dest="perrorman"><func>perror()</func></link>,
<link dest="perrorman"><func>strerror()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== fcntl()
================================================================= -->
<manpage id="fcntlman">
<title><func>fcntl()</func></title>
<short><p>Control socket descriptors</p></short>

<prototypes>
<code>#include &lt;sys/unistd.h&gt;
#include &lt;sys/fcntl.h&gt;

int fcntl(int <param>s</param>, int <param>cmd</param>, long <param>arg</param>);</code>
</prototypes>

<description>
<p><ii key="fcntl()"/>This function is typically used to do file locking
and other file-oriented stuff, but it also has a couple socket-related
functions that you might see or use from time to time.</p>

<p>Parameter <var>s</var> is the socket descriptor you wish to operate
on, <var>cmd</var> should be set to <ii
key="F_SETFL"/><const>F_SETFL</const>, and <var>arg</var> can be one of
the following commands.  (Like I said, there's more to
<func>fcntl()</func> than I'm letting on here, but I'm trying to stay
socket-oriented.)</p>

<p><table border="0">
<tr><td width="20%"><p><ii key="O_NONBLOCK"/><const>O_NONBLOCK</const></p></td>
<td width="73%"><p>Set the socket to be non-blocking.  See the section on
<link dest="blocking">blocking</link> for more details.</p></td></tr>

<tr><td><p><ii key="O_ASYNC"/><const>O_ASYNC</const></p></td>
<td><p>Set the socket to do asynchronous I/O.  When data is
ready to be <func>recv()</func>'d on the socket, the signal <ii
key="SIGIO"/><const>SIGIO</const> will be raised.  This is rare to see,
and beyond the scope of the guide.  And I think it's only available on
certain systems.</p></td></tr>

</table></p>

</description>

<rvalue>
<p>Returns zero on success, or <const>-1</const> on error (and
<func>errno</func> will be set accordingly.)</p>

<p>Different uses of the <func>fcntl()</func> actually have
different return values, but I haven't covered them here because they're
not socket-related.  See your local <func>fcntl()</func> man page for
more information.</p>
</rvalue>

<example>
<code>int s = socket(PF_INET, SOCK_STREAM, 0);

fcntl(s, F_SETFL, O_NONBLOCK);  // set to non-blocking
fcntl(s, F_SETFL, O_ASYNC);     // set to asynchronous I/O</code>
</example>

<seealso>
<p><link dest="blocking">Blocking</link>,
<link dest="sendman"><func>send()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== htons, htonl, ntohs, ntohl
================================================================= -->
<manpage id="htonsman">
<title><func>htons()</func>, <func>htonl()</func>,
<func>ntohs()</func>, <func>ntohl()</func></title>

<short><p>Convert multi-byte integer types from host byte order to
network byte order</p></short>

<prototypes>
<code>#include &lt;netinet/in.h&gt;

uint32_t htonl(uint32_t <param>hostlong</param>);
uint16_t htons(uint16_t <param>hostshort</param>);
uint32_t ntohl(uint32_t <param>netlong</param>);
uint16_t ntohs(uint16_t <param>netshort</param>);</code>
</prototypes>

<description>
<p><ii key="htons()"/><ii key="htonl()"/><ii key="ntohs()"/><ii
key="ntohl()"/>Just to make you really unhappy, different computers use
different byte orderings internally for their multibyte integers (i.e.
any integer that's larger than a <type>char</type>.)  The upshot of
this is that if you <func>send()</func> a two-byte <type>short
int</type> from an Intel box to a Mac (before they became Intel boxes,
too, I mean), what one computer thinks is the number <const>1</const>,
the other will think is the number <const>256</const>, and
vice-versa.</p>

<p><ii key="byte ordering"/>The way to get around this problem is for
everyone to put aside their differences and agree that Motorola and IBM
had it right, and Intel did it the weird way, and so we all convert our
byte orderings to "big-endian" before sending them out.  Since Intel is
a "little-endian" machine, it's far more politically correct to call our
preferred byte ordering "Network Byte Order".  So these functions
convert from your native byte order to network byte order and back
again.</p>

<p>(This means on Intel these functions swap all the bytes around, and
on PowerPC they do nothing because the bytes are already in Network
Byte Order.  But you should always use them in your code anyway, since
someone might want to build it on an Intel machine and still have things
work properly.)</p>

<p>Note that the types involved are 32-bit (4 byte, probably
<type>int</type>) and 16-bit (2 byte, very likely <type>short</type>)
numbers.  64-bit machines might have a <func>htonll()</func> for 64-bit
<type>int</type>s, but I've not seen it.  You'll just have to write your
own.</p>

<p>Anyway, the way these functions work is that you first decide if
you're converting <emp>from</emp> host (your machine's) byte order or
from network byte order.  If "host", the the first letter of the
function you're going to call is "h".  Otherwise it's "n" for "network".
The middle of the function name is always "to" because you're converting
from one "to" another, and the penultimate letter shows what you're converting
<emp>to</emp>.  The last letter is the size of the data, "s" for short,
or "l" for long.  Thus:</p>

<p>
<table border="0" width="60%">
<tr><td width="20%"><p><ii key="htons()"/><func>htons()</func></p></td><td width="78%"><p><func>h</func>ost <func>to</func> <func>n</func>etwork <func>s</func>hort</p></td></tr>
<tr><td><p><ii key="htonl()"/><func>htonl()</func></p></td><td><p><func>h</func>ost <func>to</func> <func>n</func>etwork <func>l</func>ong</p></td></tr>
<tr><td><p><ii key="ntohs()"/><func>ntohs()</func></p></td><td><p><func>n</func>etwork <func>to</func> <func>h</func>ost <func>s</func>hort</p></td></tr>
<tr><td><p><ii key="ntohl()"/><func>ntohl()</func></p></td><td><p><func>n</func>etwork <func>to</func> <func>h</func>ost <func>l</func>ong</p></td></tr>
</table>
</p>

</description>

<rvalue>
<p>Each function returns the converted value.</p>
</rvalue>

<example>
<code>uint32_t some_long = 10;
uint16_t some_short = 20;

uint32_t network_byte_order;

// convert and send
network_byte_order = htonl(some_long);
send(s, &amp;network_byte_order, sizeof(uint32_t), 0);

some_short == ntohs(htons(some_short)); // this expression is true</code>
</example>

<!--
<seealso>
</seealso>
-->
</manpage>

<!-- ================================================================
== inet_ntoa() etc
================================================================= -->
<manpage id="inet_ntoaman">
<title><func>inet_ntoa()</func>, <func>inet_aton()</func>,
<func>inet_addr</func></title>
<short><p>Convert IP addresses from a dots-and-number string to a
<type>struct in_addr</type> and back</p></short>

<prototypes>
<code>#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;

// ALL THESE ARE DEPRECATED!  Use inet_pton()  or inet_ntop() instead!!

char *inet_ntoa(struct in_addr <param>in</param>);
int inet_aton(const char *<param>cp</param>, struct in_addr *<param>inp</param>);
in_addr_t inet_addr(const char *<param>cp</param>);</code>
</prototypes>

<description>
<p><emp>These functions are deprecated because they don't handle IPv6!
Use <func>inet_ntop()</func> or <func>inet_pton()</func> instead!  They
are included here because they can still be found in the wild.</emp></p>

<p><ii key="inet_ntoa()"/><ii key="inet_aton()"/><ii key="inet_addr()"/>
All of these functions convert from a <type>struct in_addr</type> (part
of your <type>struct sockaddr_in</type>, most likely) to a string in
dots-and-numbers format (e.g. "192.168.5.10") and vice-versa.  If you
have an IP address passed on the command line or something, this is the
easiest way to get a <type>struct in_addr</type> to
<func>connect()</func> to, or whatever.  If you need more power, try
some of the DNS functions like <func>gethostbyname()</func> or attempt a
<foreign>coup d'&Eacute;tat</foreign> in your local country.</p>

<p>The function <func>inet_ntoa()</func> converts a network address in a
<type>struct in_addr</type> to a dots-and-numbers format string.  The
"n" in "ntoa" stands for network, and the "a" stands for ASCII for
historical reasons (so it's "Network To ASCII"&emdash;the "toa" suffix
has an analogous friend in the C library called <func>atoi()</func>
which converts an ASCII string to an integer.)</p>

<p>The function <func>inet_aton()</func> is the opposite, converting
from a dots-and-numbers string into a <type>in_addr_t</type> (which is
the type of the field <type>s_addr</type> in your <type>struct
in_addr</type>.)</p>

<p>Finally, the function <func>inet_addr()</func> is an older function
that does basically the same thing as <func>inet_aton()</func>.  It's
theoretically deprecated, but you'll see it a lot and the police won't
come get you if you use it.</p>

</description>

<rvalue>
<p><func>inet_aton()</func> returns non-zero if the address is a valid
one, and it returns zero if the address is invalid.</p>

<p><func>inet_ntoa()</func> returns the dots-and-numbers string in a
static buffer that is overwritten with each call to the function.</p>

<p><func>inet_addr()</func> returns the address as an
<type>in_addr_t</type>, or <const>-1</const> if there's an error.  (That
is the same result as if you tried to convert the string <ii
key="255.255.255.255"/>"255.255.255.255", which is a valid IP address.
This is why <func>inet_aton()</func> is better.)</p>

</rvalue>

<example>
<code>struct sockaddr_in antelope;
char *some_addr;

inet_aton("10.0.0.1", &amp;antelope.sin_addr); // store IP in antelope

some_addr = inet_ntoa(antelope.sin_addr); // return the IP
printf("%s\n", some_addr); // prints "10.0.0.1"

// and this call is the same as the inet_aton() call, above:
antelope.sin_addr.s_addr = inet_addr("10.0.0.1");</code>
</example>

<seealso>
<p><link dest="inet_ntopman"><func>inet_ntop()</func></link>,
<link dest="inet_ntopman"><func>inet_pton()</func></link>,
<link dest="gethostbynameman"><func>gethostbyname()</func></link>,
<link dest="gethostbynameman"><func>gethostbyaddr()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== inet_ntop, inet_pton
================================================================= -->
<manpage id="inet_ntopman">
<title><func>inet_ntop()</func>, <func>inet_pton()</func></title>
<short><p>Convert IP addresses to human-readable form and
back.</p></short>

<prototypes>
<code><![CDATA[#include <arpa/inet.h>

const char *inet_ntop(int af, const void *src,
	                  char *dst, socklen_t size);

int inet_pton(int af, const char *src, void *dst);]]></code>
</prototypes>


<description>
<p>These functions are for dealing with human-readable IP addresses and
converting them to their binary representation for use with various
functions and system calls.  The "n" stands for "network", and "p" for
"presentation".  Or "text presentation".  But you can think of it as
"printable".  "ntop" is "network to printable".  See?</p>

<p>Sometimes you don't want to look at a pile of binary numbers when
looking at an IP address.  You want it in a nice printable form, like
<tt>192.0.2.180</tt>, or <tt>2001:db8:8714:3a90::12</tt>.  In that case,
<func>inet_ntop()</func> is for you.</p>

<p><func>inet_ntop()</func> takes the address family in the
<param>af</param> parameter (either <const>AF_INET</const> or
<const>AF_INET6</const>).  The <param>src</param> parameter should be a
pointer to either a <type>struct in_addr</type> or <type>struct
in6_addr</type> containing the address you wish to convert to a string.
Finally <param>dst</param> and <param>size</param> are the pointer to
the destination string and the maximum length of that string.</p>

<p>What should the maximum length of the <param>dst</param> string be?
What is the maximum length for IPv4 and IPv6 addresses?  Fortunately
there are a couple of macros to help you out.  The maximum lengths are:
<const>INET_ADDRSTRLEN</const> and <const>INET6_ADDRSTRLEN</const>.</p>

<p>Other times, you might have a string containing an IP address in
readable form, and you want to pack it into a <type>struct
sockaddr_in</type> or a <type>struct sockaddr_in6</type>.  In that case,
the opposite funcion <func>inet_pton()</func> is what you're after.</p>

<p><func>inet_pton()</func> also takes an address family (either
<const>AF_INET</const> or <const>AF_INET6</const>) in the
<param>af</param> parameter.  The <param>src</param> parameter is a
pointer to a string containing the IP address in printable form.  Lastly
the <param>dst</param> parameter points to where the result should be
stored, which is probably a <type>struct in_addr</type> or <type>struct
in6_addr</type>.</p>

<p>These functions don't do DNS lookups&emdash;you'll need
<func>getaddinfo()</func> for that.</p>

</description>

<rvalue>
<p><func>inet_ntop()</func> returns the <param>dst</param> parameter on
success, or <const>NULL</const> on failure (and <var>errno</var> is
set).</p>

<p><func>inet_pton()</func> returns <const>1</const> on success.  It
returns <const>-1</const> if there was an error (<var>errno</var> is
set), or <const>0</const> if the input isn't a valid IP address.</p>

</rvalue>

<example>
<code><![CDATA[// IPv4 demo of inet_ntop() and inet_pton()

struct sockaddr_in sa;
char str[INET_ADDRSTRLEN];

// store this IP address in sa:
inet_pton(AF_INET, "192.0.2.33", &(sa.sin_addr));

// now get it back and print it
inet_ntop(AF_INET, &(sa.sin_addr), str, INET_ADDRSTRLEN);

printf("%s\n", str); // prints "192.0.2.33"]]></code>

<code><![CDATA[// IPv6 demo of inet_ntop() and inet_pton()
// (basically the same except with a bunch of 6s thrown around)

struct sockaddr_in6 sa;
char str[INET6_ADDRSTRLEN];

// store this IP address in sa:
inet_pton(AF_INET6, "2001:db8:8714:3a90::12", &(sa.sin6_addr));

// now get it back and print it
inet_ntop(AF_INET6, &(sa.sin6_addr), str, INET6_ADDRSTRLEN);

printf("%s\n", str); // prints "2001:db8:8714:3a90::12"]]></code>
<code><![CDATA[// Helper function you can use:

//Convert a struct sockaddr address to a string, IPv4 and IPv6:

char *get_ip_str(const struct sockaddr *sa, char *s, size_t maxlen)
{
	switch(sa->sa_family) {
		case AF_INET:
			inet_ntop(AF_INET, &(((struct sockaddr_in *)sa)->sin_addr),
					s, maxlen);
			break;

		case AF_INET6:
			inet_ntop(AF_INET6, &(((struct sockaddr_in6 *)sa)->sin6_addr),
					s, maxlen);
			break;

		default:
			strncpy(s, "Unknown AF", maxlen);
			return NULL;
	}

	return s;
}]]></code>
</example>

<seealso>
<p><link dest="getaddrinfoman"><func>getaddrinfo()</func></link></p>
</seealso>

</manpage>


<!-- ================================================================
== listen()
================================================================= -->
<manpage id="listenman">
<title><func>listen()</func></title>
<short><p>Tell a socket to listen for incoming connections</p></short>

<prototypes>
<code>#include &lt;sys/socket.h&gt;

int listen(int <param>s</param>, int <param>backlog</param>);</code>
</prototypes>

<description>
<p><ii key="listen()"/>You can take your socket descriptor (made with
the <func>socket()</func> system call) and tell it to listen for
incoming connections.  This is what differentiates the servers from the
clients, guys.</p>

<p>The <var>backlog</var> parameter can mean a couple different things
depending on the system you on, but loosely it is how many pending
connections you can have before the kernel starts rejecting new ones.
So as the new connections come in, you should be quick to
<func>accept()</func> them so that the backlog doesn't fill.  Try
setting it to 10 or so, and if your clients start getting "Connection
refused" under heavy load, set it higher.</p>

<p>Before calling <func>listen()</func>, your server should call
<func>bind()</func> to attach itself to a specific port number.  That
port number (on the server's IP address) will be the one that clients
connect to.</p>

</description>

<rvalue>
<p>Returns zero on success, or <const>-1</const> on error (and
<func>errno</func> will be set accordingly.)</p>
</rvalue>

<example>
<code><![CDATA[struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;
hints.ai_flags = AI_PASSIVE;     // fill in my IP for me

getaddrinfo(NULL, "3490", &hints, &res);

// make a socket:

sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

// bind it to the port we passed in to getaddrinfo():

bind(sockfd, res->ai_addr, res->ai_addrlen);

listen(sockfd, 10); // set s up to be a server (listening) socket

// then have an accept() loop down here somewhere]]></code>

</example>

<seealso>
<p><link dest="acceptman"><func>accept()</func></link>,
<link dest="bindman"><func>bind()</func></link>,
<link dest="socketman"><func>socket()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== perror()
================================================================= -->
<manpage id="perrorman">
<title><func>perror()</func>, <func>strerror()</func></title>
<short><p>Print an error as a human-readable string</p></short>

<prototypes>
<code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;   // for strerror()

void perror(const char *<param>s</param>);
char *strerror(int <param>errnum</param>);</code>
</prototypes>

<description>

<p><ii key="perror()"/><ii key="strerror()"/>Since so many functions
return <const>-1</const> on error and set the value of the variable <ii
key="errno"/><var>errno</var> to be some number, it would sure be nice
if you could easily print that in a form that made sense to you.</p>

<p>Mercifully, <func>perror()</func> does that.  If you want more
description to be printed before the error, you can point the parameter
<var>s</var> to it (or you can leave <var>s</var> as <const>NULL</const>
and nothing additional will be printed.)</p>

<p>In a nutshell, this function takes <var>errno</var> values, like
<const>ECONNRESET</const>, and prints them nicely, like "Connection
reset by peer."</p>

<p>The function <func>strerror()</func> is very similar to
<func>perror()</func>, except it returns a pointer to the error message
string for a given value (you usually pass in the variable
<var>errno</var>.)</p>

</description>

<rvalue>
<p><func>strerror()</func> returns a pointer to the error message
string.</p>
</rvalue>

<example>
<code>int s;

s = socket(PF_INET, SOCK_STREAM, 0);

if (s == -1) { // some error has occurred
	// prints "socket error: " + the error message:
	perror("socket error");
}

// similarly:
if (listen(s, 10) == -1) {
	// this prints "an error: " + the error message from errno:
	printf("an error: %s\n", strerror(errno));
}</code>
</example>

<seealso>
<p><link dest="errnoman"><var>errno</var></link></p>
</seealso>

</manpage>

<!-- ================================================================
== poll
================================================================= -->
<manpage id="pollman">
<title><func>poll()</func></title>
<short><p>Test for events on multiple sockets simultaneously</p></short>

<prototypes>
<code>#include &lt;sys/poll.h&gt;

int poll(struct pollfd *<param>ufds</param>, unsigned int <param>nfds</param>, int <param>timeout</param>);</code>
</prototypes>

<description>
<p><ii key="poll()"/>This function is very similar to
<func>select()</func> in that they both watch sets of file descriptors
for events, such as incoming data ready to <func>recv()</func>, socket
ready to <func>send()</func> data to, out-of-band data ready to
<func>recv()</func>, errors, etc.</p>

<p>The basic idea is that you pass an array of <var>nfds</var>
<type>struct pollfd</type>s in <var>ufds</var>, along with a timeout in
milliseconds (1000 milliseconds in a second.)  The <var>timeout</var>
can be negative if you want to wait forever.  If no event happens on any
of the socket descriptors by the timeout, <func>poll()</func> will
return.</p>

<p>Each element in the array of <type>struct pollfd</type>s represents
one socket descriptor, and contains the following fields:</p>

<code><ii key="struct pollfd"/>struct pollfd {
	int fd;         // the socket descriptor
	short events;   // bitmap of events we're interested in
	short revents;  // when poll() returns, bitmap of events that occurred
};</code>

<p>Before calling <func>poll()</func>, load <var>fd</var> with the
socket descriptor (if you set <var>fd</var> to a negative number, this
<type>struct pollfd</type> is ignored and its <var>revents</var> field
is set to zero) and then construct the <var>events</var> field by
bitwise-ORing the following macros:</p>

<p><table border="0">
<tr><td width="25%"><p><const>POLLIN</const></p></td>
<td width="73%"><p>Alert me when data is ready to
<func>recv()</func> on this socket.</p></td></tr>

<tr><td><p><const>POLLOUT</const></p></td>
<td><p>Alert me when I can <func>send()</func> data to this
socket without blocking.</p></td></tr>

<tr><td><p><const>POLLPRI</const></p></td>
<td><p>Alert me when out-of-band data is ready to
<func>recv()</func> on this socket.</p></td></tr>
</table></p>

<p>Once the <func>poll()</func> call returns, the <var>revents</var>
field will be constructed as a bitwise-OR of the above fields, telling
you which descriptors actually have had that event occur.  Additionally,
these other fields might be present:</p>

<p><table border="0">
<tr><td width="25%"><p><const>POLLERR</const></p></td>
<td width="73%"><p>An error has occurred on this socket.</p></td></tr>

<tr><td><p><const>POLLHUP</const></p></td>
<td><p>The remote side of the connection hung up.</p></td></tr>

<tr><td><p><const>POLLNVAL</const></p></td>
<td><p>Something was wrong with the socket descriptor
<var>fd</var>&emdash;maybe it's uninitialized?</p></td></tr>
</table></p>

</description>

<rvalue>
<p>Returns the number of elements in the <var>ufds</var> array that have
had event occur on them; this can be zero if the timeout occurred.  Also
returns <const>-1</const> on error (and <func>errno</func> will be set
accordingly.)</p>
</rvalue>

<example>
<code>int s1, s2;
int rv;
char buf1[256], buf2[256];
struct pollfd ufds[2];

s1 = socket(PF_INET, SOCK_STREAM, 0);
s2 = socket(PF_INET, SOCK_STREAM, 0);

// pretend we've connected both to a server at this point
//connect(s1, ...)...
//connect(s2, ...)...

// set up the array of file descriptors.
//
// in this example, we want to know when there's normal or out-of-band
// data ready to be recv()'d...

ufds[0].fd = s1;
ufds[0].events = POLLIN | POLLPRI; // check for normal or out-of-band

ufds[1] = s2;
ufds[1].events = POLLIN; // check for just normal data

// wait for events on the sockets, 3.5 second timeout
rv = poll(ufds, 2, 3500);

if (rv == -1) {
	perror("poll"); // error occurred in poll()
} else if (rv == 0) {
	printf("Timeout occurred!  No data after 3.5 seconds.\n");
} else {
	// check for events on s1:
	if (ufds[0].revents &amp; POLLIN) {
		recv(s1, buf1, sizeof buf1, 0); // receive normal data
	}
	if (ufds[0].revents &amp; POLLPRI) {
		recv(s1, buf1, sizeof buf1, MSG_OOB); // out-of-band data
	}

	// check for events on s2:
	if (ufds[1].revents &amp; POLLIN) {
		recv(s1, buf2, sizeof buf2, 0);
	}
}</code>
</example>

<seealso>
<p><link dest="selectman"><func>select()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== recv(), recvfrom()
================================================================= -->
<manpage id="recvman">
<title><func>recv()</func>, <func>recvfrom()</func></title>
<short><p>Receive data on a socket</p></short>

<prototypes>
<code>#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

ssize_t recv(int s, void *<param>buf</param>, size_t <param>len</param>, int <param>flags</param>);
ssize_t recvfrom(int <param>s</param>, void *<param>buf</param>, size_t <param>len</param>, int <param>flags</param>,
                 struct sockaddr *<param>from</param>, socklen_t *<param>fromlen</param>);</code>
</prototypes>

<description>
<p><ii key="recv()"/><ii key="recvfrom()"/>Once you have a socket up and
connected, you can read incoming data from the remote side using the
<func>recv()</func> (for TCP <ii
key="SOCK_STREAM"/><const>SOCK_STREAM</const> sockets) and
<func>recvfrom()</func> (for UDP <ii
key="SOCK_DGRAM"/><const>SOCK_DGRAM</const> sockets).</p>

<p>Both functions take the socket descriptor <var>s</var>, a pointer to
the buffer <var>buf</var>, the size (in bytes) of the buffer
<var>len</var>, and a set of <var>flags</var> that control how the
functions work.</p>

<p>Additionally, the <func>recvfrom()</func> takes a
<ii key="struct sockaddr"/><type>struct sockaddr*</type>,
<var>from</var> that will tell you where the data came from, and will
fill in <var>fromlen</var> with the size of <type>struct
sockaddr</type>.  (You must also initialize <var>fromlen</var> to be the
size of <var>from</var> or <type>struct sockaddr</type>.)</p>

<p>So what wondrous flags can you pass into this function?  Here are
some of them, but you should check your local man pages for more
information and what is actually supported on your system.  You
bitwise-or these together, or just set <var>flags</var> to
<const>0</const> if you want it to be a regular vanilla
<func>recv()</func>.</p>

<p><table border="0">
<tr><td width="30%"><p><ii key="MSG_OOB"/><const>MSG_OOB</const></p></td>
<td width="68%"><p><ii key="out-of-band data"/>Receive Out of Band data.
This is how to get data that has been sent to you with the
<const>MSG_OOB</const> flag in <func>send()</func>.  As the receiving
side, you will have had signal <ii key="SIGURG"/><const>SIGURG</const>
raised telling you there is urgent data.  In your handler for that
signal, you could call <func>recv()</func> with this
<const>MSG_OOB</const> flag.</p></td></tr>

<tr><td><p><ii key="MSG_PEEK"/><const>MSG_PEEK</const></p></td>
<td><p>If you want to call <func>recv()</func> "just for
pretend", you can call it with this flag.  This will tell you what's
waiting in the buffer for when you call <func>recv()</func> "for real"
(i.e. <emp>without</emp> the <const>MSG_PEEK</const> flag.  It's like a
sneak preview into the next <func>recv()</func> call.</p></td></tr>

<tr><td><p><ii key="MSG_WAITALL"/><const>MSG_WAITALL</const></p></td>
<td><p>Tell <func>recv()</func> to not return until all the data
you specified in the <var>len</var> parameter.  It will ignore your
wishes in extreme circumstances, however, like if a signal interrupts
the call or if some error occurs or if the remote side closes the
connection, etc.  Don't be mad with it.</p></td></tr>

</table></p>

<p>When you call <func>recv()</func>, it will block until there is some
data to read.  If you want to not block, set the socket to non-blocking
or check with <func>select()</func> or <func>poll()</func> to see if
there is incoming data before calling <func>recv()</func> or
<func>recvfrom()</func>.</p>

</description>

<rvalue>
<p>Returns the number of bytes actually received (which might be less
than you requested in the <var>len</var> parameter), or <const>-1</const>
on error (and <func>errno</func> will be set accordingly.)</p>

<p>If the remote side has closed the connection, <func>recv()</func>
will return <const>0</const>.  This is the normal method for determining
if the remote side has closed the connection.  Normality is good,
rebel!</p>

</rvalue>

<example>
<code><![CDATA[// stream sockets and recv()

struct addrinfo hints, *res;
int sockfd;
char buf[512];
int byte_count;

// get host info, make socket, and connect it
memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_STREAM;
getaddrinfo("www.example.com", "3490", &hints, &res);
sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
connect(sockfd, res->ai_addr, res->ai_addrlen);

// all right!  now that we're connected, we can receive some data!
byte_count = recv(sockfd, buf, sizeof buf, 0);
printf("recv()'d %d bytes of data in buf\n", byte_count);
]]></code>

<code><![CDATA[// datagram sockets and recvfrom()

struct addrinfo hints, *res;
int sockfd;
int byte_count;
socklen_t fromlen;
struct sockaddr_storage addr;
char buf[512];
char ipstr[INET6_ADDRSTRLEN];

// get host info, make socket, bind it to port 4950
memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;  // use IPv4 or IPv6, whichever
hints.ai_socktype = SOCK_DGRAM;
hints.ai_flags = AI_PASSIVE;
getaddrinfo(NULL, "4950", &hints, &res);
sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
bind(sockfd, res->ai_addr, res->ai_addrlen);

// no need to accept(), just recvfrom():

fromlen = sizeof addr;
byte_count = recvfrom(sockfd, buf, sizeof buf, 0, &amp;addr, &amp;fromlen);

printf("recv()'d %d bytes of data in buf\n", byte_count);
printf("from IP address %s\n",
	inet_ntop(addr.ss_family,
		addr.ss_family == AF_INET?
			((struct sockadd_in *)&addr)->sin_addr:
			((struct sockadd_in6 *)&addr)->sin6_addr,
		ipstr, sizeof ipstr);

]]></code>
</example>

<seealso>
<p><link dest="sendman"><func>send()</func></link>,
<link dest="sendman"><func>sendto()</func></link>,
<link dest="selectman"><func>select()</func></link>,
<link dest="pollman"><func>poll()</func></link>,
<link dest="blocking">Blocking</link></p>
</seealso>

</manpage>

<!-- ================================================================
== select()
================================================================= -->
<manpage id="selectman">
<title><func>select()</func></title>
<short><p>Check if sockets descriptors are ready to read/write</p></short>

<prototypes>
<code>#include &lt;sys/select.h&gt;

int select(int <param>n</param>, fd_set *<param>readfds</param>, fd_set *<param>writefds</param>, fd_set *<param>exceptfds</param>,
           struct timeval *<param>timeout</param>);

FD_SET(int <param>fd</param>, fd_set *<param>set</param>);
FD_CLR(int <param>fd</param>, fd_set *<param>set</param>);
FD_ISSET(int <param>fd</param>, fd_set *<param>set</param>);
FD_ZERO(fd_set *<param>set</param>);</code>
</prototypes>

<description>
<p><ii key="select()"/>The <func>select()</func> function gives you a
way to simultaneously check multiple sockets to see if they have data
waiting to be <func>recv()</func>d, or if you can <func>send()</func>
data to them without blocking, or if some exception has occurred.</p>

<p>You populate your sets of socket descriptors using the macros, like
<func>FD_SET()</func>, above.  Once you have the set, you pass it into
the function as one of the following parameters: <var>readfds</var> if
you want to know when any of the sockets in the set is ready to
<func>recv()</func> data, <var>writefds</var> if any of the sockets is
ready to <func>send()</func> data to, and/or <var>exceptfds</var> if you
need to know when an exception (error) occurs on any of the sockets.
Any or all of these parameters can be <const>NULL</const> if you're not
interested in those types of events.  After <func>select()</func>
returns, the values in the sets will be changed to show which are ready
for reading or writing, and which have exceptions.</p>

<p>The first parameter, <var>n</var> is the highest-numbered socket
descriptor (they're just <type>int</type>s, remember?) plus one.</p>

<p>Lastly, the <ii key="struct timeval"/><type>struct timeval</type>,
<var>timeout</var>, at the end&emdash;this lets you tell
<func>select()</func> how long to check these sets for.  It'll return
after the timeout, or when an event occurs, whichever is first.  The
<type>struct timeval</type> has two fields: <var>tv_sec</var> is the
number of seconds, to which is added <var>tv_usec</var>, the number of
microseconds (1,000,000 microseconds in a second.)</p>

<p>The helper macros do the following:</p>

<p><table border="0">
<tr><td width="50%"><p><ii key="FD_SET()"/><func>FD_SET(int fd, fd_set *set);</func></p></td>
<td width="48%"><p>Add <var>fd</var> to the <var>set</var>.</p></td></tr>

<tr><td><p><ii key="FD_CLR()"/><func>FD_CLR(int fd, fd_set *set);</func></p></td>
<td><p>Remove <var>fd</var> from the <var>set</var>.</p></td></tr>

<tr><td><p><ii key="FD_ISSET()"/><func>FD_ISSET(int fd, fd_set *set);</func></p></td>
<td><p>Return true if <var>fd</var> is in the
<var>set</var>.</p></td></tr>

<tr><td><p><ii key="FD_ZERO()"/><func>FD_ZERO(fd_set *set);</func></p></td>
<td><p>Clear all entries from the <var>set</var>.</p></td></tr>
</table></p>

</description>

<rvalue>
<p>Returns the number of descriptors in the set on success,
<const>0</const> if the timeout was reached, or <const>-1</const> on
error (and <func>errno</func> will be set accordingly.)  Also, the sets
are modified to show which sockets are ready.</p>
</rvalue>

<example>
<code><![CDATA[int s1, s2, n;
fd_set readfds;
struct timeval tv;
char buf1[256], buf2[256];

// pretend we've connected both to a server at this point
//s1 = socket(...);
//s2 = socket(...);
//connect(s1, ...)...
//connect(s2, ...)...

// clear the set ahead of time
FD_ZERO(&amp;readfds);

// add our descriptors to the set
FD_SET(s1, &amp;readfds);
FD_SET(s2, &amp;readfds);

// since we got s2 second, it's the "greater", so we use that for
// the n param in select()
n = s2 + 1;

// wait until either socket has data ready to be recv()d (timeout 10.5 secs)
tv.tv_sec = 10;
tv.tv_usec = 500000;
rv = select(n, &amp;readfds, NULL, NULL, &amp;tv);

if (rv == -1) {
	perror("select"); // error occurred in select()
} else if (rv == 0) {
	printf("Timeout occurred!  No data after 10.5 seconds.\n");
} else {
	// one or both of the descriptors have data
	if (FD_ISSET(s1, &amp;readfds)) {
		recv(s1, buf1, sizeof buf1, 0);
	}
	if (FD_ISSET(s2, &amp;readfds)) {
		recv(s1, buf2, sizeof buf2, 0);
	}
}]]></code>
</example>

<seealso>
<p><link dest="pollman"><func>poll()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== setsockopt()
================================================================= -->
<manpage id="setsockoptman">
<title><func>setsockopt()</func>, <func>getsockopt()</func></title>
<short><p>Set various options for a socket</p></short>

<prototypes>
<code>#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int getsockopt(int <param>s</param>, int <param>level</param>, int <param>optname</param>, void *<param>optval</param>,
               socklen_t *<param>optlen</param>);
int setsockopt(int <param>s</param>, int <param>level</param>, int <param>optname</param>, const void *<param>optval</param>,
               socklen_t <param>optlen</param>);</code>
</prototypes>

<description>
<p><ii key="getsockopt()"/><ii key="setsockopt()"/>Sockets are fairly
configurable beasts.  In fact, they are so configurable, I'm not even
going to cover it all here.  It's probably system-dependent anyway.  But
I will talk about the basics.</p>

<p>Obviously, these functions get and set certain options on a socket.
On a Linux box, all the socket information is in the man page for socket
in section 7.  (Type: "<com>man 7 socket</com>" to get all these
goodies.)</p>

<p>As for parameters, <var>s</var> is the socket you're talking about,
level should be set to <ii key="SOL_SOCKET"/><const>SOL_SOCKET</const>.
Then you set the <var>optname</var> to the name you're interested in.
Again, see your man page for all the options, but here are some of the
most fun ones:</p>

<p><table border="0">
<tr><td width="30%"><p><ii key="SO_BINDTODEVICE"/><const>SO_BINDTODEVICE</const></p></td>
<td width="68%"><p>Bind this socket to a symbolic device name like
<tt>eth0</tt> instead of using <func>bind()</func> to bind it to an IP
address.  Type the command <com>ifconfig</com> under Unix to see the
device names.</p></td></tr>

<tr><td><p><ii key="SO_REUSEADDR"/><const>SO_REUSEADDR</const></p></td>
<td><p>Allows other sockets to <func>bind()</func> to this port, unless
there is an active listening socket bound to the port already.  This
enables you to get around those "Address already in use" error messages
when you try to restart your server after a crash.</p></td></tr>

<tr><td><p><ii key="SO_BROADCAST"/><const>SO_BROADCAST</const></p></td>
<td><p>Allows UDP datagram (<ii
key="SOCK_DGRAM"/><const>SOCK_DGRAM</const>) sockets to send and receive
packets sent to and from the broadcast address.  Does
nothing&emdash;<emp>NOTHING!!</emp>&emdash;to TCP stream sockets!
Hahaha!</p></td></tr>

</table></p>

<p>As for the parameter <var>optval</var>, it's usually a pointer to an
<type>int</type> indicating the value in question.  For booleans, zero
is false, and non-zero is true.  And that's an absolute fact, unless
it's different on your system.  If there is no parameter to be passed,
<var>optval</var> can be <const>NULL</const>.</p>

<p>The final parameter, <var>optlen</var>, is filled out for you by
<func>getsockopt()</func> and you have to specify it for
<func>getsockopt()</func>, where it will probably be
<tt>sizeof(int)</tt>.</p>

<p><b>Warning</b>: on some systems (notably <ii key="SunOS"/><ii
key="Solaris"/>Sun and <ii key="Windows"/>Windows), the option
can be a <type>char</type> instead of an <type>int</type>, and is set
to, for example, a character value of <tt>'1'</tt> instead of an
<type>int</type> value of <const>1</const>.  Again, check your own man
pages for more info with "<com>man setsockopt</com>" and "<com>man 7
socket</com>"!</p>

</description>

<rvalue>
<p>Returns zero on success, or <const>-1</const> on error (and
<func>errno</func> will be set accordingly.)</p>
</rvalue>

<example>
<code>int optval;
int optlen;
char *optval2;

// set SO_REUSEADDR on a socket to true (1):
optval = 1;
setsockopt(s1, SOL_SOCKET, SO_REUSEADDR, &amp;optval, sizeof optval);

// bind a socket to a device name (might not work on all systems):
optval2 = "eth1"; // 4 bytes long, so 4, below:
setsockopt(s2, SOL_SOCKET, SO_BINDTODEVICE, optval2, 4);

// see if the SO_BROADCAST flag is set:
getsockopt(s3, SOL_SOCKET, SO_BROADCAST, &amp;optval, &amp;optlen);
if (optval != 0) {
	print("SO_BROADCAST enabled on s3!\n");
}</code>
</example>

<seealso>
<p><link dest="fcntlman"><func>fcntl()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== send(), sendto()
================================================================= -->
<manpage id="sendman">
<title><func>send()</func>, <func>sendto()</func></title>
<short><p>Send data out over a socket</p></short>

<prototypes>
<code>#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

ssize_t send(int s, const void *buf, size_t len, int flags);
ssize_t sendto(int s, const void *buf, size_t len,
               int flags, const struct sockaddr *to,
               socklen_t tolen);</code>
</prototypes>

<description>
<p><ii key="send()"/><ii key="sendto()"/>These functions send data to a
socket.  Generally speaking, <func>send()</func> is used for TCP <ii
key="SOCK_STREAM"/><const>SOCK_STREAM</const> connected sockets, and
<func>sendto()</func> is used for UDP <ii
key="SOCK_DGRAM"/><const>SOCK_DGRAM</const> unconnected datagram
sockets.  With the unconnected sockets, you must specify the destination
of a packet each time you send one, and that's why the last parameters
of <func>sendto()</func> define where the packet is going.</p>

<p>With both <func>send()</func> and <func>sendto()</func>, the
parameter <var>s</var> is the socket, <var>buf</var> is a pointer to the
data you want to send, <var>len</var> is the number of bytes you want to
send, and <var>flags</var> allows you to specify more information about
how the data is to be sent.  Set <var>flags</var> to zero if you want it
to be "normal" data.  Here are some of the commonly used flags, but
check your local <func>send()</func> man pages for more details:</p>

<p><table border="0">
<tr><td width="30%"><p><ii
key="MSG_OOB"/><const>MSG_OOB</const></p></td> <td width="68%"><p>Send
as <ii key="out-of-band data"/>"out of band" data.  TCP supports this,
and it's a way to tell the receiving system that this data has a higher
priority than the normal data.  The receiver will receive the signal
<ii key="SIGURG"/><const>SIGURG</const> and it can then receive this data without first
receiving all the rest of the normal data in the queue.</p></td></tr>

<tr><td><p><ii key="MSG_DONTROUTE"/><const>MSG_DONTROUTE</const></p></td>
<td><p>Don't send this data over a router, just keep it
local.</p></td></tr>

<tr><td><p><ii key="MSG_DONTWAIT"/><const>MSG_DONTWAIT</const></p></td>
<td><p>If <func>send()</func> would block because outbound
traffic is clogged, have it return <ii
key="EAGAIN"/><const>EAGAIN</const>.  This is like a "enable <ii
key="non-blocking sockets"/>non-blocking just for this send."  See the
section on <link dest="blocking">blocking</link>  for more
details.</p></td></tr>

<tr><td><p><ii key="MSG_NOSIGNAL"/><const>MSG_NOSIGNAL</const></p></td>
<td><p>If you <func>send()</func> to a remote host which is
no longer <func>recv()</func>ing, you'll typically get the signal <ii
key="SIGPIPE"/><const>SIGPIPE</const>.  Adding this flag prevents that
signal from being raised.</p></td></tr>

</table></p>

</description>

<rvalue>
<p>Returns the number of bytes actually sent, or <const>-1</const> on
error (and <func>errno</func> will be set accordingly.)  Note that the
number of bytes actually sent might be less than the number you asked it
to send!  See the section on <link dest="sendall">handling partial
<func>send()</func>s</link> for a helper function to get around this.</p>

<p>Also, if the socket has been closed by either side, the process
calling <func>send()</func> will get the signal <const>SIGPIPE</const>.
(Unless <func>send()</func> was called with the
<const>MSG_NOSIGNAL</const> flag.)</p>
</rvalue>

<example>
<code><![CDATA[int spatula_count = 3490;
char *secret_message = "The Cheese is in The Toaster";

int stream_socket, dgram_socket;
struct sockaddr_in dest;
int temp;

// first with TCP stream sockets:

// assume sockets are made and connected
//stream_socket = socket(...
//connect(stream_socket, ...

// convert to network byte order
temp = htonl(spatula_count);
// send data normally:
send(stream_socket, &amp;temp, sizeof temp, 0);

// send secret message out of band:
send(stream_socket, secret_message, strlen(secret_message)+1, MSG_OOB);

// now with UDP datagram sockets:
//getaddrinfo(...
//dest = ...  // assume "dest" holds the address of the destination
//dgram_socket = socket(...

// send secret message normally:
sendto(dgram_socket, secret_message, strlen(secret_message)+1, 0, 
       (struct sockaddr*)&amp;dest, sizeof dest);]]></code>
</example>

<seealso>
<p><link dest="recvman"><func>recv()</func></link>,
<link dest="recvman"><func>recvfrom()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== shutdown()
================================================================= -->
<manpage id="shutdownman">
<title><func>shutdown()</func></title>
<short><p>Stop further sends and receives on a socket</p></short>

<prototypes>
<code>#include &lt;sys/socket.h&gt;

int shutdown(int s, int how);</code>
</prototypes>

<description>
<p><ii key="shutdown()"/>That's it!  I've had it!  No more
<func>send()</func>s are allowed on this socket, but I still want to
<func>recv()</func> data on it!  Or vice-versa!  How can I do this?</p>

<p>When you <func>close()</func> a socket descriptor, it closes both
sides of the socket for reading and writing, and frees the socket
descriptor.  If you just want to close one side or the other, you can
use this <func>shutdown()</func> call.</p>

<p>As for parameters, <var>s</var> is obviously the socket you want to
perform this action on, and what action that is can be specified with
the <var>how</var> parameter.  How can be <const>SHUT_RD</const> to
prevent further <func>recv()</func>s, <const>SHUT_WR</const> to prohibit
further <func>send()</func>s, or <const>SHUT_RDWR</const> to do
both.</p>

<p>Note that <func>shutdown()</func> doesn't free up the socket
descriptor, so you still have to eventually <func>close()</func> the
socket even if it has been fully shut down.</p>

<p>This is a rarely used system call.</p>
</description>

<rvalue>
<p>Returns zero on success, or <const>-1</const> on error (and
<func>errno</func> will be set accordingly.)</p>
</rvalue>

<example>
<code>int s = socket(PF_INET, SOCK_STREAM, 0);

// ...do some send()s and stuff in here...

// and now that we're done, don't allow any more sends()s:
shutdown(s, SHUT_RD);</code>
</example>

<seealso>
<p><link dest="closeman"><func>close()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== socket()
================================================================= -->
<manpage id="socketman">
<title><func>socket()</func></title>
<short><p>Allocate a socket descriptor</p></short>

<prototypes>
<code>#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int socket(int domain, int type, int protocol);</code>
</prototypes>

<description>
<p><ii key="socket()"/>Returns a new socket descriptor that you can use
to do sockety things with.  This is generally the first call in the
whopping process of writing a socket program, and you can use the result
for subsequent calls to <func>listen()</func>, <tt>bind()</tt>,
<tt>accept()</tt>, or a variety of other functions.</p>

<p>In usual usage, you get the values for these parameters from a call
to <func>getaddrinfo()</func>, as shown in the example below.  But you
can fill them in by hand if you really want to.</p>

<p>
<table border="0">
<tr><td width="20%"><p><var>domain</var></p></td>

<td width="78%"><p><var>domain</var> describes what kind of socket
you're interested in.  This can, believe me, be a wide variety of
things, but since this is a socket guide, it's going to be <ii
key="PF_INET"/><const>PF_INET</const> for IPv4, and
<const>PF_INET6</const> for IPv6.</p></td></tr>

<tr><td><p><var>type</var></p></td>

<td><p>Also, the <var>type</var> parameter can be a number of things,
but you'll probably be setting it to either <ii
key="SOCK_STREAM"/><const>SOCK_STREAM</const> for reliable <ii
key="TCP"/>TCP sockets (<func>send()</func>, <func>recv()</func>) or <ii
key="SOCK_DGRAM"/><const>SOCK_DGRAM</const> for unreliable fast <ii
key="UDP"/>UDP sockets (<func>sendto()</func>,
<func>recvfrom()</func>.)</p>

<p>(Another interesting socket type is <ii
key="SOCK_RAW"/><const>SOCK_RAW</const> which can be used to construct
packets by hand.  It's pretty cool.)</p></td></tr>

<tr><td><p><var>protocol</var></p></td>

<td><p>Finally, the <var>protocol</var> parameter tells which protocol to
use with a certain socket type.  Like I've already said, for instance,
<const>SOCK_STREAM</const> uses TCP.  Fortunately for you, when using
<const>SOCK_STREAM</const> or <const>SOCK_DGRAM</const>, you can just
set the protocol to 0, and it'll use the proper protocol automatically.
Otherwise, you can use <ii
key="getprotobyname()"/><func>getprotobyname()</func> to look up the
proper protocol number.</p></td>

</tr></table></p>

</description>

<rvalue>
<p>The new socket descriptor to be used in subsequent calls, or
<const>-1</const> on error (and <func>errno</func> will be set
accordingly.)</p>
</rvalue>

<example>
<code><![CDATA[struct addrinfo hints, *res;
int sockfd;

// first, load up address structs with getaddrinfo():

memset(&hints, 0, sizeof hints);
hints.ai_family = AF_UNSPEC;     // AF_INET, AF_INET6, or AF_UNSPEC
hints.ai_socktype = SOCK_STREAM; // SOCK_STREAM or SOCK_DGRAM

getaddrinfo("www.example.com", "3490", &hints, &res);

// make a socket using the information gleaned from getaddrinfo():
sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);]]></code>
</example>

<seealso>
<p><link dest="acceptman"><func>accept()</func></link>,
<link dest="bindman"><func>bind()</func></link>,
<link dest="getaddrinfoman"><func>getaddrinfo()</func></link>,
<link dest="listenman"><func>listen()</func></link></p>
</seealso>

</manpage>

<!-- ================================================================
== sockaddr_in, in_addr
================================================================= -->
<manpage id="sockaddr_inman">
<title><type>struct sockaddr</type> and pals</title>
<short><p>Structures for handling internet addresses</p></short>

<prototypes>
<code>include &lt;netinet/in.h&gt;

// All pointers to socket address structures are often cast to pointers
// to this type before use in various functions and system calls:

struct sockaddr {
    unsigned short    <var>sa_family</var>;    // address family, AF_xxx
    char              <var>sa_data</var>[14];  // 14 bytes of protocol address
};


// IPv4 AF_INET sockets:

struct sockaddr_in {
	short            <var>sin_family</var>;   // e.g. AF_INET, AF_INET6
	unsigned short   <var>sin_port</var>;     // e.g. htons(3490)
	struct in_addr   <var>sin_addr</var>;     // see struct in_addr, below
	char             <var>sin_zero</var>[8];  // zero this if you want to
};

struct in_addr {
	unsigned long <var>s_addr</var>;          // load with inet_pton()
};


// IPv6 AF_INET6 sockets:

struct sockaddr_in6 {
    u_int16_t       <var>sin6_family</var>;   // address family, AF_INET6
    u_int16_t       <var>sin6_port</var>;     // port number, Network Byte Order
    u_int32_t       <var>sin6_flowinfo</var>; // IPv6 flow information
    struct in6_addr <var>sin6_addr</var>;     // IPv6 address
    u_int32_t       <var>sin6_scope_id</var>; // Scope ID
};

struct in6_addr {
    unsigned char   <var>s6_addr[16]</var>;   // load with inet_pton()
};


// General socket address holding structure, big enough to hold either
// struct sockaddr_in or struct sockaddr_in6 data:

struct sockaddr_storage {
    sa_family_t  <var>ss_family</var>;     // address family

	// all this is padding, implementation specific, ignore it:
    char      __ss_pad1[_SS_PAD1SIZE];
    int64_t   __ss_align;
    char      __ss_pad2[_SS_PAD2SIZE];
};</code>
</prototypes>

<description>

<p><ii key="struct sockaddr_in"/><ii key="struct in_addr"/>These are the
basic structures for all syscalls and functions that deal with internet
addresses.  Often you'll use <func>getaddinfo()</func> to fill these
structures out, and then will read them when you have to.</p>

<p>In memory, the <type>struct sockaddr_in</type> and <type>struct
sockaddr_in6</type> share the same beginning structure as <ii
key="struct sockaddr"/><type>struct sockaddr</type>, and you can freely
cast the pointer of one type to the other without any harm, except the
possible end of the universe.</p>

<p>Just kidding on that end-of-the-universe thing...if the universe does
end when you cast a <type>struct sockaddr_in*</type> to a <type> struct
sockaddr*</type>, I promise you it's pure coincidence and you shouldn't
even worry about it.</p>

<p>So, with that in mind, remember that whenever a function says it
takes a <type>struct sockaddr*</type> you can cast your <type>struct
sockaddr_in*</type>, <type>struct sockaddr_in6*</type>, or <type>struct
sockadd_storage*</type> to that type with ease and safety.</p>

<p><type>struct sockaddr_in</type> is the structure used with IPv4
addresses (e.g. "192.0.2.10").  It holds an address family
(<const>AF_INET</const>), a port in <var>sin_port</var>, and an IPv4
address in <var>sin_addr</var>.</p>

<p>There's also this <type>sin_zero</type> field in <type>struct
sockaddr_in</type> which some people claim must be set to zero.  Other
people don't claim anything about it (the Linux documentation doesn't
even mention it at all), and setting it to zero doesn't seem to be
actually necessary.  So, if you feel like it, set it to zero using
<func>memset()</func>.</p>

<p>Now, that <type>struct in_addr</type> is a weird beast on different
systems.  Sometimes it's a crazy <tt>union</tt> with all kinds of
<tt>#define</tt>s and other nonsense.  But what you should do is only
use the <var>s_addr</var> field in this structure, because many systems
only implement that one.</p>

<p><type>struct sockadd_in6</type> and <type>struct in6_addr</type> are
very similar, except they're used for IPv6.</p>

<p><type>struct sockaddr_storage</type> is a struct you can pass to
<func>accept()</func> or <func>recvfrom()</func> when you're trying to
write IP version-agnostic code and you don't know if the new address is
going to be IPv4 or IPv6.  The <type>struct sockaddr_storage</type>
structure is large enough to hold both types, unlike the original small
<type>struct sockaddr</type>.</p>

</description>

<!--
<rvalue>
</rvalue>
-->

<example>
<code><![CDATA[// IPv4:

struct sockaddr_in ip4addr;
int s;

ip4addr.sin_family = AF_INET;
ip4addr.sin_port = htons(3490);
inet_pton(AF_INET, "10.0.0.1", &ip4addr.sin_addr);

s = socket(PF_INET, SOCK_STREAM, 0);
bind(s, (struct sockaddr*)&ip4addr, sizeof ip4addr);]]></code>
<code><![CDATA[// IPv6:

struct sockaddr_in6 ip6addr;
int s;

ip6addr.sin6_family = AF_INET6;
ip6addr.sin6_port = htons(4950);
inet_pton(AF_INET6, "2001:db8:8714:3a90::12", &ip6addr.sin6_addr);

s = socket(PF_INET6, SOCK_STREAM, 0);
bind(s, (struct sockaddr*)&ip6addr, sizeof ip6addr);]]></code>
</example>

<seealso>
<p><link dest="acceptman"><func>accept()</func></link>,
<link dest="bindman"><func>bind()</func></link>,
<link dest="connectman"><func>connect()</func></link>,
<link dest="inet_ntoaman"><func>inet_aton()</func></link>,
<link dest="inet_ntoaman"><func>inet_ntoa()</func></link></p>
</seealso>

</manpage>

</sect1>

<!-- ================================================================
== manpage header
================================================================= -->
<!-- <manpage id="">
<title><func></func></title>
<short><p></p></short>

<prototypes>
<p><tt>#include &lt;sys/.h&gt;</tt><br/>
<tt>#include &lt;sys/.h&gt;</tt></p>
<p><tt></tt><br/>
<tt></tt></p>
</prototypes>

<description>
</description>

<rvalue>
<p>Returns zero on success, or <const>-1</const> on error (and
<func>errno</func> will be set accordingly.)</p>
</rvalue>

<example>
<code>
</code>
</example>

<seealso>
<p><link dest="socketman"><func>socket()</func></link>,
<link dest="shutdownman"><func>shutdown()</func></link></p>
</seealso>

</manpage> -->


<!-- ======================================================= -->
<!-- reference -->
<!-- ======================================================= -->

<sect1 id="reference">
<title>More References</title>

<p>You've come this far, and now you're screaming for more!  Where
else can you go to learn more about all this stuff?</p>

<!-- ======================================================= -->
<!-- books -->
<!-- ======================================================= -->

<sect2 id="books">
<title>Books</title>

<p><ii key="books"/><ii key="references"/>For old-school actual
hold-it-in-your-hand pulp paper books, try some of the following
excellent books.  I used to be an affiliate with a very popular internet
bookseller, but their new customer tracking system is incompatible with
a print document.  As such, I get no more kickbacks.  If you feel
compassion for my plight, paypal a donation to
<email>beej@beej.us</email>.  <smiley/></p>

<!--
	Note the prominent Amazon.com
logo.  What all this shameless commercialism means is that I basically
get a kickback (Amazon.com store credit, actually) for selling these
books through this guide.  So if you're going to order one of these
books anyway, why not send me a special thank you by starting your spree
from one of the links, below.</p>

<p>
<ulink url="&amazonref;redirect-home&amazonrefid;" footnote="n">
<image align="right" file="amazon-72-1.805.png" printwidth="1.805in" alt="In Association with Amazon.com"/>
</ulink>
</p>


<p>Besides, more books for me might ultimately lead to more guides
for you. <winky/></p>

-->

<referenceset>
<reference><title>Unix Network Programming, volumes 1-2</title> by W.
Richard Stevens.  Published by Prentice Hall.  ISBNs for volumes 1-2:
<ulink url="&redir;unixnet1">0131411551</ulink>,
<ulink url="&redir;unixnet2">0130810819</ulink>.
</reference>

<reference><title>Internetworking with TCP/IP, volumes I-III</title> by
Douglas E. Comer and David L. Stevens.  Published by Prentice Hall.
ISBNs for volumes I, II, and III:
<ulink url="&redir;intertcp1">0131876716</ulink>,
<ulink url="&redir;intertcp2">0130319961</ulink>,
<ulink url="&redir;intertcp3">0130320714</ulink>.
</reference>

<reference><title>TCP/IP Illustrated, volumes 1-3</title> by W.
Richard Stevens and Gary R. Wright.  Published by Addison Wesley.  ISBNs
for volumes 1, 2, and 3 (and a 3-volume set):
<ulink url="&redir;tcpi1">0201633469</ulink>,
<ulink url="&redir;tcpi2">020163354X</ulink>,
<ulink url="&redir;tcpi3">0201634953</ulink>,
(<ulink url="&redir;tcpi123">0201776316</ulink>).
</reference>

<reference><title>TCP/IP Network Administration</title> by Craig
Hunt.  Published by O'Reilly &amp; Associates, Inc.  ISBN
<ulink url="&redir;tcpna">0596002971</ulink>.
</reference>

<reference><title>Advanced Programming in the UNIX
Environment</title> by W. Richard Stevens.  Published by Addison
Wesley.  ISBN
<ulink url="&redir;advunix">0201433079</ulink>.
</reference>
</referenceset>

</sect2>

<!-- ======================================================= -->
<!-- webref -->
<!-- ======================================================= -->

<sect2 id="webref">
<title>Web References</title>

<p><ii key="references;web-based"/>On the web:</p>

<referenceset>
<reference><title><ulink url="&socketsqd;"> BSD Sockets: A Quick And
Dirty Primer</ulink></title> (Unix system programming info,
too!)</reference>

<reference><title><ulink url="&socketfaq;">The Unix Socket
FAQ</ulink></title></reference>

<reference><title><ulink url="&introtcp;">Intro to
TCP/IP</ulink></title></reference>

<reference><title><ulink url="&tcpfaq;">TCP/IP
FAQ</ulink></title></reference>

<reference><title><ulink url="&winsockfaq;">The Winsock
FAQ</ulink></title></reference>
</referenceset>

<p>And here are some relevant Wikipedia pages:</p>

<referenceset>

<reference><title><ulink url="&wpsocket;">Berkeley
Sockets</ulink></title></reference>

<reference><title><ulink url="&wpip;">Internet Protocol
(IP)</ulink></title></reference>

<reference><title><ulink url="&wptcp;">Transmission Control Protocol
(TCP)</ulink></title></reference>

<reference><title><ulink url="&wpudp;">User Datagram Protocol
(UDP)</ulink></title></reference>

<reference><title><ulink
url="&wpcs;">Client-Server</ulink></title></reference>

<reference><title><ulink
url="&wpserial;">Serialization</ulink></title> (packing and unpacking
data)</reference>

</referenceset>

</sect2>

<!-- ======================================================= -->
<!-- rfcs -->
<!-- ======================================================= -->

<sect2 id="rfcs">
<title>RFCs</title>

<p><ii key="RFCs"/><ulink url="&rfcbase;">RFCs</ulink>&emdash;the real
dirt!  These are documents that describe assigned numbers, programming
APIs, and protocols that are used on the Internet.  I've included links
to a few of them here for your enjoyment, so grab a bucket of popcorn
and put on your thinking cap:</p>

<referenceset>
<reference><title><ulink
url="&rfcpre;1&rfcpost;">RFC 1</ulink></title>&emdash;The First RFC;
this gives you an idea of what the "Internet" was like just as it was
coming to life, and an insight into how it was being designed from the
ground up.  (This RFC is completely obsolete, obviously!)</reference>

<reference><ii key="UDP"/><title><ulink
url="&rfcpre;768&rfcpost;">RFC 768</ulink></title>&emdash;The User
Datagram Protocol (UDP)</reference>

<reference><ii key="IP"/><title><ulink url="&rfcpre;791&rfcpost;">RFC
791</ulink></title>&emdash;The Internet Protocol (IP)</reference>

<reference><ii key="TCP"/><title><ulink url="&rfcpre;793&rfcpost;">RFC
793</ulink></title>&emdash;The Transmission Control Protocol
(TCP)</reference>

<reference><ii key="telnet"/><title><ulink
url="&rfcpre;854&rfcpost;">RFC 854</ulink></title>&emdash;The Telnet
Protocol</reference>

<reference><ii key="FTP"/><title><ulink
url="&rfcpre;959&rfcpost;">RFC 959</ulink></title>&emdash;File Transfer
Protocol (FTP)</reference>

<reference><ii key="TFTP"/><title><ulink url="&rfcpre;1350&rfcpost;">RFC
1350</ulink></title>&emdash;The Trivial File Transfer Protocol
(TFTP)</reference>

<reference><ii key="IRC"/><title><ulink url="&rfcpre;1459&rfcpost;">RFC
1459</ulink></title>&emdash;Internet Relay Chat Protocol
(IRC)</reference>

<reference><title><ulink url="&rfcpre;1918&rfcpost;">RFC
1918</ulink></title>&emdash;Address Allocation for Private
Internets</reference>

<reference><ii key="DHCP"/><title><ulink url="&rfcpre;2131&rfcpost;">RFC
2131</ulink></title>&emdash;Dynamic Host Configuration Protocol
(DHCP)</reference>

<reference><ii key="HTTP"/><title><ulink url="&rfcpre;2616&rfcpost;">RFC
2616</ulink></title>&emdash;Hypertext Transfer Protocol
(HTTP)</reference>

<reference><ii key="SMTP"/><title><ulink url="&rfcpre;2821&rfcpost;">RFC
2821</ulink></title>&emdash;Simple Mail Transfer Protocol
(SMTP)</reference>

<reference><title><ulink url="&rfcpre;3330&rfcpost;">RFC
3330</ulink></title>&emdash;Special-Use IPv4 Addresses</reference>

<reference><title><ulink url="&rfcpre;3493&rfcpost;">RFC
3493</ulink></title>&emdash;Basic Socket Interface Extensions for
IPv6</reference>

<reference><title><ulink url="&rfcpre;3542&rfcpost;">RFC
3542</ulink></title>&emdash;Advanced Sockets Application Program
Interface (API) for IPv6</reference>

<reference><title><ulink url="&rfcpre;3849&rfcpost;">RFC
3849</ulink></title>&emdash;IPv6 Address Prefix Reserved for
Documentation</reference>

<reference><ii key="XMPP"/><title><ulink url="&rfcpre;3920&rfcpost;">RFC
3920</ulink></title>&emdash;Extensible Messaging and Presence Protocol
(XMPP)</reference>

<reference><ii key="NNTP"/><title><ulink url="&rfcpre;3977&rfcpost;">RFC
3977</ulink></title>&emdash;Network News Transfer Protocol
(NNTP)</reference>

<reference><title><ulink url="&rfcpre;4193&rfcpost;">RFC
4193</ulink></title>&emdash;Unique Local IPv6 Unicast
Addresses</reference>

<reference><ii key="XDR"/><title><ulink url="&rfcpre;4506&rfcpost;">RFC
4506</ulink></title>&emdash;External Data Representation Standard
(XDR)</reference>

</referenceset>

<p>The IETF has a nice online tool for <ulink
url="&rfcsearch;">searching and browsing RFCs</ulink>.</p>

</sect2>

</sect1> <!-- reference -->

</guide>
